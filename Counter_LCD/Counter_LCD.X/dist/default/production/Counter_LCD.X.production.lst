

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon May 02 21:14:27 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38  0000                     
    39                           ; Version 2.40
    40                           ; Generated 17/11/2021 GMT
    41                           ; 
    42                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4520 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     _PORTDbits	set	3971
    75  0000                     _PORTBbits	set	3969
    76  0000                     _TRISB	set	3987
    77  0000                     _OSCTUNE	set	3995
    78  0000                     _OSCCON	set	4051
    79  0000                     _ADCON1	set	4033
    80  0000                     _TRISD	set	3989
    81  0000                     _PORTD	set	3971
    82  0000                     _TRISEbits	set	3990
    83  0000                     _PORTEbits	set	3972
    84                           
    85                           	psect	smallconst
    86  000600                     __psmallconst:
    87                           	callstack 0
    88  000600  00                 	db	0
    89  000601                     STR_4:
    90  000601  20                 	db	32
    91  000602  20                 	db	32
    92  000603  20                 	db	32
    93  000604  20                 	db	32
    94  000605  20                 	db	32
    95  000606  20                 	db	32
    96  000607  20                 	db	32
    97  000608  20                 	db	32
    98  000609  20                 	db	32
    99  00060A  20                 	db	32
   100  00060B  20                 	db	32
   101  00060C  20                 	db	32
   102  00060D  20                 	db	32
   103  00060E  20                 	db	32
   104  00060F  20                 	db	32
   105  000610  20                 	db	32
   106  000611  00                 	db	0
   107  000612                     STR_1:
   108  000612  20                 	db	32
   109  000613  20                 	db	32
   110  000614  20                 	db	32
   111  000615  20                 	db	32
   112  000616  43                 	db	67	;'C'
   113  000617  4F                 	db	79	;'O'
   114  000618  55                 	db	85	;'U'
   115  000619  4E                 	db	78	;'N'
   116  00061A  54                 	db	84	;'T'
   117  00061B  45                 	db	69	;'E'
   118  00061C  52                 	db	82	;'R'
   119  00061D  3A                 	db	58	;':'
   120  00061E  20                 	db	32
   121  00061F  20                 	db	32
   122  000620  20                 	db	32
   123  000621  20                 	db	32
   124  000622  00                 	db	0
   125  000623                     STR_3:
   126  000623  20                 	db	32
   127  000624  41                 	db	65	;'A'
   128  000625  55                 	db	85	;'U'
   129  000626  4C                 	db	76	;'L'
   130  000627  41                 	db	65	;'A'
   131  000628  20                 	db	32
   132  000629  31                 	db	49	;'1'
   133  00062A  20                 	db	32
   134  00062B  2D                 	db	45
   135  00062C  20                 	db	32
   136  00062D  4C                 	db	76	;'L'
   137  00062E  43                 	db	67	;'C'
   138  00062F  44                 	db	68	;'D'
   139  000630  3A                 	db	58	;':'
   140  000631  20                 	db	32
   141  000632  20                 	db	32
   142  000633  00                 	db	0
   143  000634                     STR_2:
   144  000634  25                 	db	37
   145  000635  30                 	db	48	;'0'
   146  000636  32                 	db	50	;'2'
   147  000637  64                 	db	100	;'d'
   148  000638  00                 	db	0
   149  000639  00                 	db	0	; dummy byte at the end
   150  0000                     
   151                           ; #config settings
   152                           
   153                           	psect	cinit
   154  00174A                     __pcinit:
   155                           	callstack 0
   156  00174A                     start_initialization:
   157                           	callstack 0
   158  00174A                     __initialization:
   159                           	callstack 0
   160                           
   161                           ; Clear objects allocated to BANK0 (48 bytes)
   162  00174A  EE00  F080         	lfsr	0,__pbssBANK0
   163  00174E  0E30               	movlw	48
   164  001750                     clear_0:
   165  001750  6AEE               	clrf	postinc0,c
   166  001752  06E8               	decf	wreg,f,c
   167  001754  E1FD               	bnz	clear_0
   168                           
   169                           ; Clear objects allocated to COMRAM (10 bytes)
   170  001756  EE00  F071         	lfsr	0,__pbssCOMRAM
   171  00175A  0E0A               	movlw	10
   172  00175C                     clear_1:
   173  00175C  6AEE               	clrf	postinc0,c
   174  00175E  06E8               	decf	wreg,f,c
   175  001760  E1FD               	bnz	clear_1
   176  001762                     end_of_initialization:
   177                           	callstack 0
   178  001762                     __end_of__initialization:
   179                           	callstack 0
   180  001762  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181  001764  6EF8               	movwf	tblptru,c
   182  001766  0100               	movlb	0
   183  001768  EFC6  F008         	goto	_main	;jump to C main() function
   184                           
   185                           	psect	bssCOMRAM
   186  000071                     __pbssCOMRAM:
   187                           	callstack 0
   188  000071                     _nout:
   189                           	callstack 0
   190  000071                     	ds	2
   191  000073                     _width:
   192                           	callstack 0
   193  000073                     	ds	2
   194  000075                     _prec:
   195                           	callstack 0
   196  000075                     	ds	2
   197  000077                     _flags:
   198                           	callstack 0
   199  000077                     	ds	2
   200  000079                     _counter:
   201                           	callstack 0
   202  000079                     	ds	2
   203                           
   204                           	psect	bssBANK0
   205  000080                     __pbssBANK0:
   206                           	callstack 0
   207  000080                     _dbuf:
   208                           	callstack 0
   209  000080                     	ds	32
   210  0000A0                     _bufferLCD:
   211                           	callstack 0
   212  0000A0                     	ds	16
   213                           
   214                           	psect	cstackCOMRAM
   215  000001                     __pcstackCOMRAM:
   216                           	callstack 0
   217  000001                     ?_strlen:
   218                           	callstack 0
   219  000001                     ?_isdigit:
   220                           	callstack 0
   221  000001                     ?_isspace:
   222                           	callstack 0
   223  000001                     ?___wmul:
   224                           	callstack 0
   225  000001                     ?___aodiv:
   226                           	callstack 0
   227  000001                     ?___aomod:
   228                           	callstack 0
   229  000001                     set_bit@comp:
   230                           	callstack 0
   231  000001                     ___wmul@multiplier:
   232                           	callstack 0
   233  000001                     isdigit@c:
   234                           	callstack 0
   235  000001                     isspace@c:
   236                           	callstack 0
   237  000001                     fputc@c:
   238                           	callstack 0
   239  000001                     strlen@s:
   240                           	callstack 0
   241  000001                     ___aodiv@dividend:
   242                           	callstack 0
   243  000001                     ___aomod@dividend:
   244                           	callstack 0
   245                           
   246                           ; 8 bytes @ 0x0
   247  000001                     	ds	1
   248  000002                     set_bit@cmd:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x1
   252  000002                     	ds	1
   253  000003                     ??_lcd_cmd:
   254  000003                     ??_isdigit:
   255  000003                     ??_isspace:
   256  000003                     ___wmul@multiplicand:
   257                           	callstack 0
   258  000003                     fputc@fp:
   259                           	callstack 0
   260  000003                     strlen@a:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x2
   264  000003                     	ds	1
   265  000004                     lcd_cmd@cmd:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x3
   269  000004                     	ds	1
   270  000005                     ??_lcd_init:
   271  000005                     ??_fputc:
   272  000005                     lcd_send_byte@data:
   273                           	callstack 0
   274  000005                     ___wmul@product:
   275                           	callstack 0
   276                           
   277                           ; 2 bytes @ 0x4
   278  000005                     	ds	1
   279  000006                     lcd_init@i:
   280                           	callstack 0
   281  000006                     lcd_send_byte@level:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0x5
   285  000006                     	ds	1
   286  000007                     lcd_write@col:
   287                           	callstack 0
   288  000007                     _isspace$954:
   289                           	callstack 0
   290                           
   291                           ; 1 bytes @ 0x6
   292  000007                     	ds	1
   293  000008                     ?_atoi:
   294                           	callstack 0
   295  000008                     lcd_write@str:
   296                           	callstack 0
   297  000008                     atoi@s:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0x7
   301  000008                     	ds	1
   302  000009                     ___aodiv@divisor:
   303                           	callstack 0
   304  000009                     ___aomod@divisor:
   305                           	callstack 0
   306                           
   307                           ; 8 bytes @ 0x8
   308  000009                     	ds	1
   309  00000A                     ??_atoi:
   310  00000A                     lcd_write@end:
   311                           	callstack 0
   312  00000A                     fputs@s:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0x9
   316  00000A                     	ds	1
   317  00000B                     lcd_write@lin:
   318                           	callstack 0
   319                           
   320                           ; 1 bytes @ 0xA
   321  00000B                     	ds	1
   322  00000C                     fputs@fp:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0xB
   326  00000C                     	ds	2
   327  00000E                     fputs@c:
   328                           	callstack 0
   329  00000E                     atoi@neg:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0xD
   333  00000E                     	ds	1
   334  00000F                     fputs@i:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0xE
   338  00000F                     	ds	1
   339  000010                     atoi@n:
   340                           	callstack 0
   341                           
   342                           ; 2 bytes @ 0xF
   343  000010                     	ds	1
   344  000011                     ?_pad:
   345                           	callstack 0
   346  000011                     ___aodiv@counter:
   347                           	callstack 0
   348  000011                     ___aomod@counter:
   349                           	callstack 0
   350  000011                     pad@fp:
   351                           	callstack 0
   352                           
   353                           ; 2 bytes @ 0x10
   354  000011                     	ds	1
   355  000012                     ___aodiv@sign:
   356                           	callstack 0
   357  000012                     ___aomod@sign:
   358                           	callstack 0
   359                           
   360                           ; 1 bytes @ 0x11
   361  000012                     	ds	1
   362  000013                     ?_abs:
   363                           	callstack 0
   364  000013                     pad@buf:
   365                           	callstack 0
   366  000013                     abs@a:
   367                           	callstack 0
   368  000013                     ___aodiv@quotient:
   369                           	callstack 0
   370                           
   371                           ; 8 bytes @ 0x12
   372  000013                     	ds	2
   373  000015                     ??_abs:
   374  000015                     pad@p:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0x14
   378  000015                     	ds	2
   379  000017                     ??_pad:
   380                           
   381                           ; 1 bytes @ 0x16
   382  000017                     	ds	1
   383  000018                     pad@i:
   384                           	callstack 0
   385                           
   386                           ; 2 bytes @ 0x17
   387  000018                     	ds	2
   388  00001A                     pad@w:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0x19
   392  00001A                     	ds	2
   393  00001C                     ?_dtoa:
   394                           	callstack 0
   395  00001C                     dtoa@fp:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x1B
   399  00001C                     	ds	2
   400  00001E                     dtoa@d:
   401                           	callstack 0
   402                           
   403                           ; 8 bytes @ 0x1D
   404  00001E                     	ds	8
   405  000026                     ??_dtoa:
   406                           
   407                           ; 1 bytes @ 0x25
   408  000026                     	ds	8
   409  00002E                     _dtoa$905:
   410                           	callstack 0
   411                           
   412                           ; 2 bytes @ 0x2D
   413  00002E                     	ds	2
   414  000030                     dtoa@p:
   415                           	callstack 0
   416                           
   417                           ; 2 bytes @ 0x2F
   418  000030                     	ds	2
   419  000032                     dtoa@w:
   420                           	callstack 0
   421                           
   422                           ; 2 bytes @ 0x31
   423  000032                     	ds	2
   424  000034                     dtoa@s:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x33
   428  000034                     	ds	2
   429  000036                     dtoa@n:
   430                           	callstack 0
   431                           
   432                           ; 8 bytes @ 0x35
   433  000036                     	ds	8
   434  00003E                     dtoa@i:
   435                           	callstack 0
   436                           
   437                           ; 2 bytes @ 0x3D
   438  00003E                     	ds	2
   439  000040                     ?_vfpfcnvrt:
   440                           	callstack 0
   441  000040                     vfpfcnvrt@fp:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x3F
   445  000040                     	ds	2
   446  000042                     vfpfcnvrt@fmt:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x41
   450  000042                     	ds	2
   451  000044                     vfpfcnvrt@ap:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x43
   455  000044                     	ds	2
   456  000046                     ??_vfpfcnvrt:
   457                           
   458                           ; 1 bytes @ 0x45
   459  000046                     	ds	4
   460  00004A                     vfpfcnvrt@ll:
   461                           	callstack 0
   462                           
   463                           ; 8 bytes @ 0x49
   464  00004A                     	ds	8
   465  000052                     vfpfcnvrt@done:
   466                           	callstack 0
   467                           
   468                           ; 2 bytes @ 0x51
   469  000052                     	ds	2
   470  000054                     ?_vfprintf:
   471                           	callstack 0
   472  000054                     vfprintf@fp:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x53
   476  000054                     	ds	2
   477  000056                     vfprintf@fmt:
   478                           	callstack 0
   479                           
   480                           ; 2 bytes @ 0x55
   481  000056                     	ds	2
   482  000058                     vfprintf@ap:
   483                           	callstack 0
   484                           
   485                           ; 2 bytes @ 0x57
   486  000058                     	ds	2
   487  00005A                     vfprintf@cfmt:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x59
   491  00005A                     	ds	2
   492  00005C                     ?_sprintf:
   493                           	callstack 0
   494  00005C                     sprintf@s:
   495                           	callstack 0
   496                           
   497                           ; 2 bytes @ 0x5B
   498  00005C                     	ds	2
   499  00005E                     sprintf@fmt:
   500                           	callstack 0
   501                           
   502                           ; 2 bytes @ 0x5D
   503  00005E                     	ds	4
   504  000062                     sprintf@ap:
   505                           	callstack 0
   506                           
   507                           ; 2 bytes @ 0x61
   508  000062                     	ds	2
   509  000064                     sprintf@f:
   510                           	callstack 0
   511                           
   512                           ; 11 bytes @ 0x63
   513  000064                     	ds	11
   514  00006F                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x6E
   517  00006F                     	ds	2
   518                           
   519 ;;
   520 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   521 ;;
   522 ;; *************** function _main *****************
   523 ;; Defined at:
   524 ;;		line 82 in file "Main_counter.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;		None
   527 ;; Auto vars:     Size  Location     Type
   528 ;;		None
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      void 
   531 ;; Registers used:
   532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   538 ;;      Params:         0       0       0       0       0       0       0
   539 ;;      Locals:         0       0       0       0       0       0       0
   540 ;;      Temps:          2       0       0       0       0       0       0
   541 ;;      Totals:         2       0       0       0       0       0       0
   542 ;;Total ram usage:        2 bytes
   543 ;; Hardware stack levels required when called: 8
   544 ;; This function calls:
   545 ;;		_config_FOSC
   546 ;;		_config_IO
   547 ;;		_lcd_init
   548 ;;		_lcd_write
   549 ;;		_sprintf
   550 ;; This function is called by:
   551 ;;		Startup code after reset
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text0
   556  00118C                     __ptext0:
   557                           	callstack 0
   558  00118C                     _main:
   559                           	callstack 23
   560  00118C                     
   561                           ;Main_counter.c: 84:     config_FOSC();
   562  00118C  ECDA  F00B         	call	_config_FOSC	;wreg free
   563                           
   564                           ;Main_counter.c: 85:     config_IO();
   565  001190  ECD5  F00B         	call	_config_IO	;wreg free
   566  001194                     
   567                           ;Main_counter.c: 86:     lcd_init();
   568  001194  EC4B  F00A         	call	_lcd_init	;wreg free
   569  001198                     l1925:
   570                           
   571                           ;Main_counter.c: 88:     {;Main_counter.c: 89:         if(PORTBbits.RB0 == 1)
   572  001198  A081               	btfss	129,0,c	;volatile
   573  00119A  EFD1  F008         	goto	u1331
   574  00119E  EFD3  F008         	goto	u1330
   575  0011A2                     u1331:
   576  0011A2  EF14  F009         	goto	l1941
   577  0011A6                     u1330:
   578  0011A6                     
   579                           ;Main_counter.c: 90:         {;Main_counter.c: 91:             lcd_write(1,2,"    COUNTE
      +                          R:    ");
   580  0011A6  0E02               	movlw	2
   581  0011A8  6E07               	movwf	lcd_write@col^0,c
   582  0011AA  0E12               	movlw	low STR_1
   583  0011AC  6E08               	movwf	lcd_write@str^0,c
   584  0011AE  0E06               	movlw	high STR_1
   585  0011B0  6E09               	movwf	(lcd_write@str+1)^0,c
   586  0011B2  0E01               	movlw	1
   587  0011B4  ECFB  F009         	call	_lcd_write
   588  0011B8                     
   589                           ;Main_counter.c: 92:             sprintf(bufferLCD,
   590  0011B8  0EA0               	movlw	low _bufferLCD
   591  0011BA  6E5C               	movwf	sprintf@s^0,c
   592  0011BC  0E00               	movlw	high _bufferLCD
   593  0011BE  6E5D               	movwf	(sprintf@s+1)^0,c
   594  0011C0  0E34               	movlw	low STR_2
   595  0011C2  6E5E               	movwf	sprintf@fmt^0,c
   596  0011C4  0E06               	movlw	high STR_2
   597  0011C6  6E5F               	movwf	(sprintf@fmt+1)^0,c
   598  0011C8  C079  F060         	movff	_counter,?_sprintf+4
   599  0011CC  C07A  F061         	movff	_counter+1,?_sprintf+5
   600  0011D0  ECF2  F00A         	call	_sprintf	;wreg free
   601  0011D4                     
   602                           ;Main_counter.c: 95:             lcd_write(2,8,bufferLCD);
   603  0011D4  0E08               	movlw	8
   604  0011D6  6E07               	movwf	lcd_write@col^0,c
   605  0011D8  0EA0               	movlw	low _bufferLCD
   606  0011DA  6E08               	movwf	lcd_write@str^0,c
   607  0011DC  0E00               	movlw	high _bufferLCD
   608  0011DE  6E09               	movwf	(lcd_write@str+1)^0,c
   609  0011E0  0E02               	movlw	2
   610  0011E2  ECFB  F009         	call	_lcd_write
   611  0011E6                     
   612                           ;Main_counter.c: 96:             counter++;
   613  0011E6  4A79               	infsnz	_counter^0,f,c
   614  0011E8  2A7A               	incf	(_counter+1)^0,f,c
   615  0011EA                     
   616                           ;Main_counter.c: 98:             if(counter > 15) counter = 0;
   617  0011EA  BE7A               	btfsc	(_counter+1)^0,7,c
   618  0011EC  EF01  F009         	goto	u1341
   619  0011F0  507A               	movf	(_counter+1)^0,w,c
   620  0011F2  E109               	bnz	u1340
   621  0011F4  0E10               	movlw	16
   622  0011F6  5C79               	subwf	_counter^0,w,c
   623  0011F8  A0D8               	btfss	status,0,c
   624  0011FA  EF01  F009         	goto	u1341
   625  0011FE  EF03  F009         	goto	u1340
   626  001202                     u1341:
   627  001202  EF07  F009         	goto	l1939
   628  001206                     u1340:
   629  001206  0E00               	movlw	0
   630  001208  6E7A               	movwf	(_counter+1)^0,c
   631  00120A  0E00               	movlw	0
   632  00120C  6E79               	movwf	_counter^0,c
   633  00120E                     l1939:
   634                           
   635                           ;Main_counter.c: 99:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   636  00120E  0E0B               	movlw	11
   637  001210  6E70               	movwf	(??_main+1)^0,c
   638  001212  0E26               	movlw	38
   639  001214  6E6F               	movwf	??_main^0,c
   640  001216  0E5E               	movlw	94
   641  001218                     u1357:
   642  001218  2EE8               	decfsz	wreg,f,c
   643  00121A  D7FE               	bra	u1357
   644  00121C  2E6F               	decfsz	??_main^0,f,c
   645  00121E  D7FC               	bra	u1357
   646  001220  2E70               	decfsz	(??_main+1)^0,f,c
   647  001222  D7FA               	bra	u1357
   648                           
   649                           ;Main_counter.c: 100:         }
   650  001224  EFCC  F008         	goto	l1925
   651  001228                     l1941:
   652                           
   653                           ;Main_counter.c: 102:         {;Main_counter.c: 103:             counter = 0;
   654  001228  0E00               	movlw	0
   655  00122A  6E7A               	movwf	(_counter+1)^0,c
   656  00122C  0E00               	movlw	0
   657  00122E  6E79               	movwf	_counter^0,c
   658  001230                     
   659                           ;Main_counter.c: 104:             lcd_write(1,2," AULA 1 - LCD:  ");
   660  001230  0E02               	movlw	2
   661  001232  6E07               	movwf	lcd_write@col^0,c
   662  001234  0E23               	movlw	low STR_3
   663  001236  6E08               	movwf	lcd_write@str^0,c
   664  001238  0E06               	movlw	high STR_3
   665  00123A  6E09               	movwf	(lcd_write@str+1)^0,c
   666  00123C  0E01               	movlw	1
   667  00123E  ECFB  F009         	call	_lcd_write
   668  001242                     
   669                           ;Main_counter.c: 105:             lcd_write(2,1,"                ");
   670  001242  0E01               	movlw	1
   671  001244  6E07               	movwf	lcd_write@col^0,c
   672  001246  0E01               	movlw	low STR_4
   673  001248  6E08               	movwf	lcd_write@str^0,c
   674  00124A  0E06               	movlw	high STR_4
   675  00124C  6E09               	movwf	(lcd_write@str+1)^0,c
   676  00124E  0E02               	movlw	2
   677  001250  ECFB  F009         	call	_lcd_write
   678  001254                     
   679                           ;Main_counter.c: 106:             _delay((unsigned long)((20)*(8000000/4000.0)));
   680  001254  0E34               	movlw	52
   681  001256  6E6F               	movwf	??_main^0,c
   682  001258  0EF2               	movlw	242
   683  00125A                     u1367:
   684  00125A  2EE8               	decfsz	wreg,f,c
   685  00125C  D7FE               	bra	u1367
   686  00125E  2E6F               	decfsz	??_main^0,f,c
   687  001260  D7FC               	bra	u1367
   688  001262  EFCC  F008         	goto	l1925
   689  001266  EF00  F000         	goto	start
   690  00126A                     __end_of_main:
   691                           	callstack 0
   692                           
   693 ;; *************** function _sprintf *****************
   694 ;; Defined at:
   695 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_sprintf.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  s               2   91[COMRAM] PTR unsigned char 
   698 ;;		 -> bufferLCD(16), 
   699 ;;  fmt             2   93[COMRAM] PTR const unsigned char 
   700 ;;		 -> STR_2(5), 
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  f              11   99[COMRAM] struct _IO_FILE
   703 ;;  ap              2   97[COMRAM] PTR void [1]
   704 ;;		 -> ?_sprintf(2), 
   705 ;;  ret             2    0        int 
   706 ;; Return value:  Size  Location     Type
   707 ;;                  2   91[COMRAM] int 
   708 ;; Registers used:
   709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   715 ;;      Params:         6       0       0       0       0       0       0
   716 ;;      Locals:        13       0       0       0       0       0       0
   717 ;;      Temps:          0       0       0       0       0       0       0
   718 ;;      Totals:        19       0       0       0       0       0       0
   719 ;;Total ram usage:       19 bytes
   720 ;; Hardware stack levels used: 1
   721 ;; Hardware stack levels required when called: 7
   722 ;; This function calls:
   723 ;;		_vfprintf
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text1
   730  0015E4                     __ptext1:
   731                           	callstack 0
   732  0015E4                     _sprintf:
   733                           	callstack 23
   734  0015E4  0E60               	movlw	low (?_sprintf+4)
   735  0015E6  6E62               	movwf	sprintf@ap^0,c
   736  0015E8  0E00               	movlw	high (?_sprintf+4)
   737  0015EA  6E63               	movwf	(sprintf@ap+1)^0,c
   738  0015EC  C05C  F064         	movff	sprintf@s,sprintf@f
   739  0015F0  C05D  F065         	movff	sprintf@s+1,sprintf@f+1
   740  0015F4  0E00               	movlw	0
   741  0015F6  6E68               	movwf	(sprintf@f+4)^0,c
   742  0015F8  0E00               	movlw	0
   743  0015FA  6E67               	movwf	(sprintf@f+3)^0,c
   744  0015FC  0E00               	movlw	0
   745  0015FE  6E6E               	movwf	(sprintf@f+10)^0,c
   746  001600  0E00               	movlw	0
   747  001602  6E6D               	movwf	(sprintf@f+9)^0,c
   748  001604  0E64               	movlw	low sprintf@f
   749  001606  6E54               	movwf	vfprintf@fp^0,c
   750  001608  0E00               	movlw	high sprintf@f
   751  00160A  6E55               	movwf	(vfprintf@fp+1)^0,c
   752  00160C  C05E  F056         	movff	sprintf@fmt,vfprintf@fmt
   753  001610  C05F  F057         	movff	sprintf@fmt+1,vfprintf@fmt+1
   754  001614  0E62               	movlw	low sprintf@ap
   755  001616  6E58               	movwf	vfprintf@ap^0,c
   756  001618  0E00               	movlw	high sprintf@ap
   757  00161A  6E59               	movwf	(vfprintf@ap+1)^0,c
   758  00161C  EC9A  F00A         	call	_vfprintf	;wreg free
   759  001620  5067               	movf	(sprintf@f+3)^0,w,c
   760  001622  245C               	addwf	sprintf@s^0,w,c
   761  001624  6ED9               	movwf	fsr2l,c
   762  001626  5068               	movf	(sprintf@f+4)^0,w,c
   763  001628  205D               	addwfc	(sprintf@s+1)^0,w,c
   764  00162A  6EDA               	movwf	fsr2h,c
   765  00162C  0E00               	movlw	0
   766  00162E  6EDF               	movwf	indf2,c
   767  001630  0012               	return		;funcret
   768  001632                     __end_of_sprintf:
   769                           	callstack 0
   770                           
   771 ;; *************** function _vfprintf *****************
   772 ;; Defined at:
   773 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
   774 ;; Parameters:    Size  Location     Type
   775 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
   776 ;;		 -> sprintf@f(11), 
   777 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
   778 ;;		 -> STR_2(5), 
   779 ;;  ap              2   87[COMRAM] PTR PTR void 
   780 ;;		 -> sprintf@ap(2), 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
   783 ;;		 -> STR_2(5), 
   784 ;; Return value:  Size  Location     Type
   785 ;;                  2   83[COMRAM] int 
   786 ;; Registers used:
   787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   793 ;;      Params:         6       0       0       0       0       0       0
   794 ;;      Locals:         2       0       0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0
   796 ;;      Totals:         8       0       0       0       0       0       0
   797 ;;Total ram usage:        8 bytes
   798 ;; Hardware stack levels used: 1
   799 ;; Hardware stack levels required when called: 6
   800 ;; This function calls:
   801 ;;		_vfpfcnvrt
   802 ;; This function is called by:
   803 ;;		_sprintf
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           	psect	text2
   808  001534                     __ptext2:
   809                           	callstack 0
   810  001534                     _vfprintf:
   811                           	callstack 23
   812  001534                     
   813                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   814  001534  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
   815  001538  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   816  00153C                     
   817                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   818  00153C  0E00               	movlw	0
   819  00153E  6E72               	movwf	(_nout+1)^0,c
   820  001540  0E00               	movlw	0
   821  001542  6E71               	movwf	_nout^0,c
   822                           
   823                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   824  001544  EFB6  F00A         	goto	l1843
   825  001548                     l1841:
   826                           
   827                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   828  001548  C054  F040         	movff	vfprintf@fp,vfpfcnvrt@fp
   829  00154C  C055  F041         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   830  001550  0E5A               	movlw	low vfprintf@cfmt
   831  001552  6E42               	movwf	vfpfcnvrt@fmt^0,c
   832  001554  0E00               	movlw	high vfprintf@cfmt
   833  001556  6E43               	movwf	(vfpfcnvrt@fmt+1)^0,c
   834  001558  C058  F044         	movff	vfprintf@ap,vfpfcnvrt@ap
   835  00155C  C059  F045         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   836  001560  EC1D  F003         	call	_vfpfcnvrt	;wreg free
   837  001564  5040               	movf	?_vfpfcnvrt^0,w,c
   838  001566  2671               	addwf	_nout^0,f,c
   839  001568  5041               	movf	(?_vfpfcnvrt+1)^0,w,c
   840  00156A  2272               	addwfc	(_nout+1)^0,f,c
   841  00156C                     l1843:
   842                           
   843                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   844  00156C  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
   845  001570  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   846  001574                     	if	0	;tblptru may be non-zero
   847  001574                     	endif
   848  001574                     	if	0	;tblptru may be non-zero
   849  001574                     	endif
   850  001574  0008               	tblrd		*
   851  001576  50F5               	movf	tablat,w,c
   852  001578  0900               	iorlw	0
   853  00157A  A4D8               	btfss	status,2,c
   854  00157C  EFC2  F00A         	goto	u1261
   855  001580  EFC4  F00A         	goto	u1260
   856  001584                     u1261:
   857  001584  EFA4  F00A         	goto	l1841
   858  001588                     u1260:
   859  001588                     
   860                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   861  001588  C071  F054         	movff	_nout,?_vfprintf
   862  00158C  C072  F055         	movff	_nout+1,?_vfprintf+1
   863  001590  0012               	return		;funcret
   864  001592                     __end_of_vfprintf:
   865                           	callstack 0
   866                           
   867 ;; *************** function _vfpfcnvrt *****************
   868 ;; Defined at:
   869 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  fp              2   63[COMRAM] PTR struct _IO_FILE
   872 ;;		 -> sprintf@f(11), 
   873 ;;  fmt             2   65[COMRAM] PTR PTR unsigned char 
   874 ;;		 -> vfprintf@cfmt(2), 
   875 ;;  ap              2   67[COMRAM] PTR PTR void 
   876 ;;		 -> sprintf@ap(2), 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  ll              8   73[COMRAM] long long 
   879 ;;  llu             8    0        unsigned long long 
   880 ;;  f               4    0        unsigned long long 
   881 ;;  vp              3    0        PTR void 
   882 ;;  ct              3    0        unsigned char [3]
   883 ;;  cp              3    0        PTR unsigned char 
   884 ;;  done            2   81[COMRAM] int 
   885 ;;  i               2    0        int 
   886 ;;  c               1    0        unsigned char 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  2   63[COMRAM] int 
   889 ;; Registers used:
   890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   896 ;;      Params:         6       0       0       0       0       0       0
   897 ;;      Locals:        10       0       0       0       0       0       0
   898 ;;      Temps:          4       0       0       0       0       0       0
   899 ;;      Totals:        20       0       0       0       0       0       0
   900 ;;Total ram usage:       20 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; Hardware stack levels required when called: 5
   903 ;; This function calls:
   904 ;;		_atoi
   905 ;;		_dtoa
   906 ;;		_fputc
   907 ;;		_isdigit
   908 ;; This function is called by:
   909 ;;		_vfprintf
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text3
   914  00063A                     __ptext3:
   915                           	callstack 0
   916  00063A                     _vfpfcnvrt:
   917                           	callstack 23
   918  00063A                     
   919                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.36\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          6\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   920  00063A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   921  00063E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   922  000642  CFDE FFF6          	movff	postinc2,tblptrl
   923  000646  CFDD FFF7          	movff	postdec2,tblptrh
   924  00064A                     	if	0	;tblptru may be non-zero
   925  00064A                     	endif
   926  00064A                     	if	0	;tblptru may be non-zero
   927  00064A                     	endif
   928  00064A  0008               	tblrd		*
   929  00064C  50F5               	movf	tablat,w,c
   930  00064E  0A25               	xorlw	37
   931  000650  A4D8               	btfss	status,2,c
   932  000652  EF2D  F003         	goto	u1161
   933  000656  EF2F  F003         	goto	u1160
   934  00065A                     u1161:
   935  00065A  EFA8  F004         	goto	l1817
   936  00065E                     u1160:
   937  00065E                     
   938                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   939  00065E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   940  000662  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   941  000666  2ADE               	incf	postinc2,f,c
   942  000668  0E00               	movlw	0
   943  00066A  22DD               	addwfc	postdec2,f,c
   944  00066C                     
   945                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   946  00066C  0E00               	movlw	0
   947  00066E  6E74               	movwf	(_width+1)^0,c
   948  000670  0E00               	movlw	0
   949  000672  6E73               	movwf	_width^0,c
   950  000674  C073  F077         	movff	_width,_flags
   951  000678  C074  F078         	movff	_width+1,_flags+1
   952  00067C                     
   953                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   954  00067C  6875               	setf	_prec^0,c
   955  00067E  6876               	setf	(_prec+1)^0,c
   956  000680                     
   957                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
   958  000680  0E00               	movlw	0
   959  000682  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
   960  000684  0E00               	movlw	0
   961  000686  6E52               	movwf	vfpfcnvrt@done^0,c
   962                           
   963                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
   964  000688  EF8C  F003         	goto	l1771
   965  00068C                     l1745:
   966                           
   967                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
   968  00068C  8077               	bsf	_flags^0,0,c
   969  00068E                     l1747:
   970                           
   971                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
   972  00068E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   973  000692  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   974  000696  2ADE               	incf	postinc2,f,c
   975  000698  0E00               	movlw	0
   976  00069A  22DD               	addwfc	postdec2,f,c
   977                           
   978                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
   979  00069C  EF8C  F003         	goto	l1771
   980  0006A0                     l1749:
   981                           
   982                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
   983  0006A0  8277               	bsf	_flags^0,1,c
   984  0006A2  EF47  F003         	goto	l1747
   985  0006A6                     l1753:
   986                           
   987                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
   988  0006A6  8477               	bsf	_flags^0,2,c
   989  0006A8  EF47  F003         	goto	l1747
   990  0006AC                     l1757:
   991                           
   992                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
   993  0006AC  8677               	bsf	_flags^0,3,c
   994  0006AE  EF47  F003         	goto	l1747
   995  0006B2                     l1761:
   996                           
   997                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
   998  0006B2  8877               	bsf	_flags^0,4,c
   999  0006B4  EF47  F003         	goto	l1747
  1000  0006B8                     l1765:
  1001                           
  1002                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
  1003  0006B8  0E00               	movlw	0
  1004  0006BA  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
  1005  0006BC  0E01               	movlw	1
  1006  0006BE  6E52               	movwf	vfpfcnvrt@done^0,c
  1007                           
  1008                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
  1009  0006C0  EF8C  F003         	goto	l1771
  1010  0006C4                     l1769:
  1011  0006C4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1012  0006C8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1013  0006CC  CFDE FFF6          	movff	postinc2,tblptrl
  1014  0006D0  CFDD FFF7          	movff	postdec2,tblptrh
  1015  0006D4                     	if	0	;tblptru may be non-zero
  1016  0006D4                     	endif
  1017  0006D4                     	if	0	;tblptru may be non-zero
  1018  0006D4                     	endif
  1019  0006D4  0008               	tblrd		*
  1020  0006D6  50F5               	movf	tablat,w,c
  1021  0006D8  6E46               	movwf	??_vfpfcnvrt^0,c
  1022  0006DA  6A47               	clrf	(??_vfpfcnvrt+1)^0,c
  1023                           
  1024                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1025                           ; Switch size 1, requested type "simple"
  1026                           ; Number of cases is 1, Range of values is 0 to 0
  1027                           ; switch strategies available:
  1028                           ; Name         Instructions Cycles
  1029                           ; simple_byte            4     3 (average)
  1030                           ;	Chosen strategy is simple_byte
  1031  0006DC  5047               	movf	(??_vfpfcnvrt+1)^0,w,c
  1032  0006DE  0A00               	xorlw	0	; case 0
  1033  0006E0  B4D8               	btfsc	status,2,c
  1034  0006E2  EF75  F003         	goto	l1995
  1035  0006E6  EF5C  F003         	goto	l1765
  1036  0006EA                     l1995:
  1037                           
  1038                           ; Switch size 1, requested type "simple"
  1039                           ; Number of cases is 5, Range of values is 32 to 48
  1040                           ; switch strategies available:
  1041                           ; Name         Instructions Cycles
  1042                           ; simple_byte           16     9 (average)
  1043                           ;	Chosen strategy is simple_byte
  1044  0006EA  5046               	movf	??_vfpfcnvrt^0,w,c
  1045  0006EC  0A20               	xorlw	32	; case 32
  1046  0006EE  B4D8               	btfsc	status,2,c
  1047  0006F0  EF56  F003         	goto	l1757
  1048  0006F4  0A03               	xorlw	3	; case 35
  1049  0006F6  B4D8               	btfsc	status,2,c
  1050  0006F8  EF59  F003         	goto	l1761
  1051  0006FC  0A08               	xorlw	8	; case 43
  1052  0006FE  B4D8               	btfsc	status,2,c
  1053  000700  EF53  F003         	goto	l1753
  1054  000704  0A06               	xorlw	6	; case 45
  1055  000706  B4D8               	btfsc	status,2,c
  1056  000708  EF46  F003         	goto	l1745
  1057  00070C  0A1D               	xorlw	29	; case 48
  1058  00070E  B4D8               	btfsc	status,2,c
  1059  000710  EF50  F003         	goto	l1749
  1060  000714  EF5C  F003         	goto	l1765
  1061  000718                     l1771:
  1062                           
  1063                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  1064  000718  5052               	movf	vfpfcnvrt@done^0,w,c
  1065  00071A  1053               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1066  00071C  B4D8               	btfsc	status,2,c
  1067  00071E  EF93  F003         	goto	u1171
  1068  000722  EF95  F003         	goto	u1170
  1069  000726                     u1171:
  1070  000726  EF62  F003         	goto	l1769
  1071  00072A                     u1170:
  1072  00072A                     
  1073                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
  1074  00072A  A077               	btfss	_flags^0,0,c
  1075  00072C  EF9A  F003         	goto	u1181
  1076  000730  EF9C  F003         	goto	u1180
  1077  000734                     u1181:
  1078  000734  EF9D  F003         	goto	l1775
  1079  000738                     u1180:
  1080  000738                     
  1081                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  1082  000738  9277               	bcf	_flags^0,1,c
  1083  00073A                     l1775:
  1084                           
  1085                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  1086  00073A  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1087  00073E  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1088  000742  CFDE FFF6          	movff	postinc2,tblptrl
  1089  000746  CFDD FFF7          	movff	postdec2,tblptrh
  1090  00074A                     	if	0	;tblptru may be non-zero
  1091  00074A                     	endif
  1092  00074A                     	if	0	;tblptru may be non-zero
  1093  00074A                     	endif
  1094  00074A  0008               	tblrd		*
  1095  00074C  50F5               	movf	tablat,w,c
  1096  00074E  0A2A               	xorlw	42
  1097  000750  A4D8               	btfss	status,2,c
  1098  000752  EFAD  F003         	goto	u1191
  1099  000756  EFAF  F003         	goto	u1190
  1100  00075A                     u1191:
  1101  00075A  EFD8  F003         	goto	l1783
  1102  00075E                     u1190:
  1103  00075E                     
  1104                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  1105  00075E  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1106  000762  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1107  000766  2ADE               	incf	postinc2,f,c
  1108  000768  0E00               	movlw	0
  1109  00076A  22DD               	addwfc	postdec2,f,c
  1110                           
  1111                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1112  00076C  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1113  000770  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1114  000774  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1115  000778  0E02               	movlw	2
  1116  00077A  26DE               	addwf	postinc2,f,c
  1117  00077C  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1118  000780  0E00               	movlw	0
  1119  000782  22DD               	addwfc	postdec2,f,c
  1120  000784  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1121  000788  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1122  00078C  CFDE F073          	movff	postinc2,_width
  1123  000790  CFDD F074          	movff	postdec2,_width+1
  1124  000794                     
  1125                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  1126  000794  BE74               	btfsc	(_width+1)^0,7,c
  1127  000796  EFD1  F003         	goto	u1200
  1128  00079A  EFCF  F003         	goto	u1201
  1129  00079E                     u1201:
  1130  00079E  EF0E  F004         	goto	l1791
  1131  0007A2                     u1200:
  1132  0007A2                     
  1133                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  1134  0007A2  8077               	bsf	_flags^0,0,c
  1135                           
  1136                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  1137  0007A4  6C73               	negf	_width^0,c
  1138  0007A6  1E74               	comf	(_width+1)^0,f,c
  1139  0007A8  B0D8               	btfsc	status,0,c
  1140  0007AA  2A74               	incf	(_width+1)^0,f,c
  1141  0007AC  EF0E  F004         	goto	l1791
  1142  0007B0                     l1783:
  1143                           
  1144                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  1145  0007B0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1146  0007B4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1147  0007B8  CFDE F008          	movff	postinc2,atoi@s
  1148  0007BC  CFDD F009          	movff	postdec2,atoi@s+1
  1149  0007C0  ECA9  F007         	call	_atoi	;wreg free
  1150  0007C4  C008  F073         	movff	?_atoi,_width
  1151  0007C8  C009  F074         	movff	?_atoi+1,_width+1
  1152                           
  1153                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1154  0007CC  EFEF  F003         	goto	l1789
  1155  0007D0                     l1785:
  1156                           
  1157                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  1158  0007D0  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1159  0007D4  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1160  0007D8  2ADE               	incf	postinc2,f,c
  1161  0007DA  0E00               	movlw	0
  1162  0007DC  22DD               	addwfc	postdec2,f,c
  1163  0007DE                     l1789:
  1164  0007DE  0ED0               	movlw	208
  1165  0007E0  6E46               	movwf	??_vfpfcnvrt^0,c
  1166  0007E2  0EFF               	movlw	255
  1167  0007E4  6E47               	movwf	(??_vfpfcnvrt+1)^0,c
  1168  0007E6  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1169  0007EA  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1170  0007EE  CFDE FFF6          	movff	postinc2,tblptrl
  1171  0007F2  CFDD FFF7          	movff	postdec2,tblptrh
  1172  0007F6                     	if	0	;tblptru may be non-zero
  1173  0007F6                     	endif
  1174  0007F6                     	if	0	;tblptru may be non-zero
  1175  0007F6                     	endif
  1176  0007F6  0008               	tblrd		*
  1177  0007F8  50F5               	movf	tablat,w,c
  1178  0007FA  6E48               	movwf	(??_vfpfcnvrt+2)^0,c
  1179  0007FC  6A49               	clrf	(??_vfpfcnvrt+3)^0,c
  1180  0007FE  5046               	movf	??_vfpfcnvrt^0,w,c
  1181  000800  2648               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1182  000802  5047               	movf	(??_vfpfcnvrt+1)^0,w,c
  1183  000804  2249               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1184  000806  5049               	movf	(??_vfpfcnvrt+3)^0,w,c
  1185  000808  E109               	bnz	u1210
  1186  00080A  0E0A               	movlw	10
  1187  00080C  5C48               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1188  00080E  A0D8               	btfss	status,0,c
  1189  000810  EF0C  F004         	goto	u1211
  1190  000814  EF0E  F004         	goto	u1210
  1191  000818                     u1211:
  1192  000818  EFE8  F003         	goto	l1785
  1193  00081C                     u1210:
  1194  00081C                     l1791:
  1195                           
  1196                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1197  00081C  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1198  000820  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1199  000824  CFDE FFF6          	movff	postinc2,tblptrl
  1200  000828  CFDD FFF7          	movff	postdec2,tblptrh
  1201  00082C                     	if	0	;tblptru may be non-zero
  1202  00082C                     	endif
  1203  00082C                     	if	0	;tblptru may be non-zero
  1204  00082C                     	endif
  1205  00082C  0008               	tblrd		*
  1206  00082E  50F5               	movf	tablat,w,c
  1207  000830  0A64               	xorlw	100
  1208  000832  B4D8               	btfsc	status,2,c
  1209  000834  EF1E  F004         	goto	u1221
  1210  000838  EF20  F004         	goto	u1220
  1211  00083C                     u1221:
  1212  00083C  EF32  F004         	goto	l1795
  1213  000840                     u1220:
  1214  000840  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1215  000844  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1216  000848  CFDE FFF6          	movff	postinc2,tblptrl
  1217  00084C  CFDD FFF7          	movff	postdec2,tblptrh
  1218  000850                     	if	0	;tblptru may be non-zero
  1219  000850                     	endif
  1220  000850                     	if	0	;tblptru may be non-zero
  1221  000850                     	endif
  1222  000850  0008               	tblrd		*
  1223  000852  50F5               	movf	tablat,w,c
  1224  000854  0A69               	xorlw	105
  1225  000856  A4D8               	btfss	status,2,c
  1226  000858  EF30  F004         	goto	u1231
  1227  00085C  EF32  F004         	goto	u1230
  1228  000860                     u1231:
  1229  000860  EF72  F004         	goto	l1801
  1230  000864                     u1230:
  1231  000864                     l1795:
  1232                           
  1233                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1234  000864  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1235  000868  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1236  00086C  2ADE               	incf	postinc2,f,c
  1237  00086E  0E00               	movlw	0
  1238  000870  22DD               	addwfc	postdec2,f,c
  1239                           
  1240                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1241  000872  C044  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1242  000876  C045  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1243  00087A  CFDF F046          	movff	indf2,??_vfpfcnvrt
  1244  00087E  0E02               	movlw	2
  1245  000880  26DE               	addwf	postinc2,f,c
  1246  000882  CFDF F047          	movff	indf2,??_vfpfcnvrt+1
  1247  000886  0E00               	movlw	0
  1248  000888  22DD               	addwfc	postdec2,f,c
  1249  00088A  C046  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1250  00088E  C047  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1251  000892  CFDE F04A          	movff	postinc2,vfpfcnvrt@ll
  1252  000896  CFDD F04B          	movff	postdec2,vfpfcnvrt@ll+1
  1253  00089A  0E00               	movlw	0
  1254  00089C  BE4B               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1255  00089E  0EFF               	movlw	-1
  1256  0008A0  6E4C               	movwf	(vfpfcnvrt@ll+2)^0,c
  1257  0008A2  6E4D               	movwf	(vfpfcnvrt@ll+3)^0,c
  1258  0008A4  6E4E               	movwf	(vfpfcnvrt@ll+4)^0,c
  1259  0008A6  6E4F               	movwf	(vfpfcnvrt@ll+5)^0,c
  1260  0008A8  6E50               	movwf	(vfpfcnvrt@ll+6)^0,c
  1261  0008AA  6E51               	movwf	(vfpfcnvrt@ll+7)^0,c
  1262  0008AC                     
  1263                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1264  0008AC  C040  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1265  0008B0  C041  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1266  0008B4  C04A  F01E         	movff	vfpfcnvrt@ll,dtoa@d
  1267  0008B8  C04B  F01F         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1268  0008BC  C04C  F020         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1269  0008C0  C04D  F021         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1270  0008C4  C04E  F022         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1271  0008C8  C04F  F023         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1272  0008CC  C050  F024         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1273  0008D0  C051  F025         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1274  0008D4  ECC4  F004         	call	_dtoa	;wreg free
  1275  0008D8  C01C  F040         	movff	?_dtoa,?_vfpfcnvrt
  1276  0008DC  C01D  F041         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1277  0008E0  EFC3  F004         	goto	l851
  1278  0008E4                     l1801:
  1279                           
  1280                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1281  0008E4  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1282  0008E8  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1283  0008EC  CFDE FFF6          	movff	postinc2,tblptrl
  1284  0008F0  CFDD FFF7          	movff	postdec2,tblptrh
  1285  0008F4                     	if	0	;tblptru may be non-zero
  1286  0008F4                     	endif
  1287  0008F4                     	if	0	;tblptru may be non-zero
  1288  0008F4                     	endif
  1289  0008F4  0008               	tblrd		*
  1290  0008F6  50F5               	movf	tablat,w,c
  1291  0008F8  0A25               	xorlw	37
  1292  0008FA  A4D8               	btfss	status,2,c
  1293  0008FC  EF82  F004         	goto	u1241
  1294  000900  EF84  F004         	goto	u1240
  1295  000904                     u1241:
  1296  000904  EF9B  F004         	goto	l1811
  1297  000908                     u1240:
  1298  000908                     
  1299                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1300  000908  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1301  00090C  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1302  000910  2ADE               	incf	postinc2,f,c
  1303  000912  0E00               	movlw	0
  1304  000914  22DD               	addwfc	postdec2,f,c
  1305  000916                     
  1306                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1307  000916  0E00               	movlw	0
  1308  000918  6E02               	movwf	(fputc@c+1)^0,c
  1309  00091A  0E25               	movlw	37
  1310  00091C  6E01               	movwf	fputc@c^0,c
  1311  00091E  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1312  000922  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1313  000926  EC35  F009         	call	_fputc	;wreg free
  1314  00092A                     l1807:
  1315                           
  1316                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1317  00092A  0E00               	movlw	0
  1318  00092C  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1319  00092E  0E01               	movlw	1
  1320  000930  6E40               	movwf	?_vfpfcnvrt^0,c
  1321  000932  EFC3  F004         	goto	l851
  1322  000936                     l1811:
  1323                           
  1324                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1325  000936  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1326  00093A  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1327  00093E  2ADE               	incf	postinc2,f,c
  1328  000940  0E00               	movlw	0
  1329  000942  22DD               	addwfc	postdec2,f,c
  1330  000944                     
  1331                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1332  000944  0E00               	movlw	0
  1333  000946  6E41               	movwf	(?_vfpfcnvrt+1)^0,c
  1334  000948  0E00               	movlw	0
  1335  00094A  6E40               	movwf	?_vfpfcnvrt^0,c
  1336  00094C  EFC3  F004         	goto	l851
  1337  000950                     l1817:
  1338                           
  1339                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1340  000950  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1341  000954  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1342  000958  CFDE FFF6          	movff	postinc2,tblptrl
  1343  00095C  CFDD FFF7          	movff	postdec2,tblptrh
  1344  000960                     	if	0	;tblptru may be non-zero
  1345  000960                     	endif
  1346  000960                     	if	0	;tblptru may be non-zero
  1347  000960                     	endif
  1348  000960  0008               	tblrd		*
  1349  000962  50F5               	movf	tablat,w,c
  1350  000964  6E01               	movwf	fputc@c^0,c
  1351  000966  6A02               	clrf	(fputc@c+1)^0,c
  1352  000968  C040  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1353  00096C  C041  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1354  000970  EC35  F009         	call	_fputc	;wreg free
  1355  000974                     
  1356                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1357  000974  C042  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1358  000978  C043  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1359  00097C  2ADE               	incf	postinc2,f,c
  1360  00097E  0E00               	movlw	0
  1361  000980  22DD               	addwfc	postdec2,f,c
  1362  000982  EF95  F004         	goto	l1807
  1363  000986                     l851:
  1364  000986  0012               	return		;funcret
  1365  000988                     __end_of_vfpfcnvrt:
  1366                           	callstack 0
  1367                           
  1368 ;; *************** function _dtoa *****************
  1369 ;; Defined at:
  1370 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1373 ;;		 -> sprintf@f(11), 
  1374 ;;  d               8   29[COMRAM] long long 
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  n               8   53[COMRAM] long long 
  1377 ;;  i               2   61[COMRAM] int 
  1378 ;;  s               2   51[COMRAM] int 
  1379 ;;  w               2   49[COMRAM] int 
  1380 ;;  p               2   47[COMRAM] int 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  2   27[COMRAM] int 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1390 ;;      Params:        10       0       0       0       0       0       0
  1391 ;;      Locals:        18       0       0       0       0       0       0
  1392 ;;      Temps:          8       0       0       0       0       0       0
  1393 ;;      Totals:        36       0       0       0       0       0       0
  1394 ;;Total ram usage:       36 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; Hardware stack levels required when called: 4
  1397 ;; This function calls:
  1398 ;;		___aodiv
  1399 ;;		___aomod
  1400 ;;		_abs
  1401 ;;		_pad
  1402 ;; This function is called by:
  1403 ;;		_vfpfcnvrt
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text4
  1408  000988                     __ptext4:
  1409                           	callstack 0
  1410  000988                     _dtoa:
  1411                           	callstack 23
  1412  000988                     
  1413                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1414  000988  C01E  F036         	movff	dtoa@d,dtoa@n
  1415  00098C  C01F  F037         	movff	dtoa@d+1,dtoa@n+1
  1416  000990  C020  F038         	movff	dtoa@d+2,dtoa@n+2
  1417  000994  C021  F039         	movff	dtoa@d+3,dtoa@n+3
  1418  000998  C022  F03A         	movff	dtoa@d+4,dtoa@n+4
  1419  00099C  C023  F03B         	movff	dtoa@d+5,dtoa@n+5
  1420  0009A0  C024  F03C         	movff	dtoa@d+6,dtoa@n+6
  1421  0009A4  C025  F03D         	movff	dtoa@d+7,dtoa@n+7
  1422  0009A8                     
  1423                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1424  0009A8  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1425  0009AA  EFD9  F004         	goto	u971
  1426  0009AE  EFDC  F004         	goto	u970
  1427  0009B2                     u971:
  1428  0009B2  0E01               	movlw	1
  1429  0009B4  EFDD  F004         	goto	u980
  1430  0009B8                     u970:
  1431  0009B8  0E00               	movlw	0
  1432  0009BA                     u980:
  1433  0009BA  6E34               	movwf	dtoa@s^0,c
  1434  0009BC  6A35               	clrf	(dtoa@s+1)^0,c
  1435                           
  1436                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1437  0009BE  5034               	movf	dtoa@s^0,w,c
  1438  0009C0  1035               	iorwf	(dtoa@s+1)^0,w,c
  1439  0009C2  B4D8               	btfsc	status,2,c
  1440  0009C4  EFE6  F004         	goto	u991
  1441  0009C8  EFE8  F004         	goto	u990
  1442  0009CC                     u991:
  1443  0009CC  EFF8  F004         	goto	l1627
  1444  0009D0                     u990:
  1445  0009D0                     
  1446                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1447  0009D0  1E3D               	comf	(dtoa@n+7)^0,f,c
  1448  0009D2  1E3C               	comf	(dtoa@n+6)^0,f,c
  1449  0009D4  1E3B               	comf	(dtoa@n+5)^0,f,c
  1450  0009D6  1E3A               	comf	(dtoa@n+4)^0,f,c
  1451  0009D8  1E39               	comf	(dtoa@n+3)^0,f,c
  1452  0009DA  1E38               	comf	(dtoa@n+2)^0,f,c
  1453  0009DC  1E37               	comf	(dtoa@n+1)^0,f,c
  1454  0009DE  6C36               	negf	dtoa@n^0,c
  1455  0009E0  0E00               	movlw	0
  1456  0009E2  2237               	addwfc	(dtoa@n+1)^0,f,c
  1457  0009E4  2238               	addwfc	(dtoa@n+2)^0,f,c
  1458  0009E6  2239               	addwfc	(dtoa@n+3)^0,f,c
  1459  0009E8  223A               	addwfc	(dtoa@n+4)^0,f,c
  1460  0009EA  223B               	addwfc	(dtoa@n+5)^0,f,c
  1461  0009EC  223C               	addwfc	(dtoa@n+6)^0,f,c
  1462  0009EE  223D               	addwfc	(dtoa@n+7)^0,f,c
  1463  0009F0                     l1627:
  1464                           
  1465                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1466  0009F0  BE76               	btfsc	(_prec+1)^0,7,c
  1467  0009F2  EFFD  F004         	goto	u1001
  1468  0009F6  EFFF  F004         	goto	u1000
  1469  0009FA                     u1001:
  1470  0009FA  EF00  F005         	goto	l1631
  1471  0009FE                     u1000:
  1472  0009FE                     
  1473                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1474  0009FE  9277               	bcf	_flags^0,1,c
  1475  000A00                     l1631:
  1476                           
  1477                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1478  000A00  BE76               	btfsc	(_prec+1)^0,7,c
  1479  000A02  EF0D  F005         	goto	u1010
  1480  000A06  5076               	movf	(_prec+1)^0,w,c
  1481  000A08  E106               	bnz	u1011
  1482  000A0A  0475               	decf	_prec^0,w,c
  1483  000A0C  B0D8               	btfsc	status,0,c
  1484  000A0E  EF0B  F005         	goto	u1011
  1485  000A12  EF0D  F005         	goto	u1010
  1486  000A16                     u1011:
  1487  000A16  EF13  F005         	goto	l804
  1488  000A1A                     u1010:
  1489  000A1A  0E00               	movlw	0
  1490  000A1C  6E31               	movwf	(dtoa@p+1)^0,c
  1491  000A1E  0E01               	movlw	1
  1492  000A20  6E30               	movwf	dtoa@p^0,c
  1493  000A22  EF17  F005         	goto	l806
  1494  000A26                     l804:
  1495  000A26  C075  F030         	movff	_prec,dtoa@p
  1496  000A2A  C076  F031         	movff	_prec+1,dtoa@p+1
  1497  000A2E                     l806:
  1498                           
  1499                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1500  000A2E  C073  F032         	movff	_width,dtoa@w
  1501  000A32  C074  F033         	movff	_width+1,dtoa@w+1
  1502  000A36                     
  1503                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1504  000A36  5034               	movf	dtoa@s^0,w,c
  1505  000A38  1035               	iorwf	(dtoa@s+1)^0,w,c
  1506  000A3A  A4D8               	btfss	status,2,c
  1507  000A3C  EF22  F005         	goto	u1021
  1508  000A40  EF24  F005         	goto	u1020
  1509  000A44                     u1021:
  1510  000A44  EF2B  F005         	goto	l1639
  1511  000A48                     u1020:
  1512  000A48  A477               	btfss	_flags^0,2,c
  1513  000A4A  EF29  F005         	goto	u1031
  1514  000A4E  EF2B  F005         	goto	u1030
  1515  000A52                     u1031:
  1516  000A52  EF2E  F005         	goto	l1641
  1517  000A56                     u1030:
  1518  000A56                     l1639:
  1519                           
  1520                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 306:         --w;
  1521  000A56  0632               	decf	dtoa@w^0,f,c
  1522  000A58  A0D8               	btfss	status,0,c
  1523  000A5A  0633               	decf	(dtoa@w+1)^0,f,c
  1524  000A5C                     l1641:
  1525                           
  1526                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1527  000A5C  0E00               	movlw	0
  1528  000A5E  6E3F               	movwf	(dtoa@i+1)^0,c
  1529  000A60  0E1F               	movlw	31
  1530  000A62  6E3E               	movwf	dtoa@i^0,c
  1531  000A64                     
  1532                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1533  000A64  0E00               	movlw	0
  1534  000A66  0100               	movlb	0	; () banked
  1535  000A68  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1536                           
  1537                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1538  000A6A  EFB3  F005         	goto	l1655
  1539  000A6E                     l1645:
  1540                           
  1541                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 313:         --i;
  1542  000A6E  063E               	decf	dtoa@i^0,f,c
  1543  000A70  A0D8               	btfss	status,0,c
  1544  000A72  063F               	decf	(dtoa@i+1)^0,f,c
  1545  000A74                     
  1546                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1547  000A74  0E80               	movlw	low _dbuf
  1548  000A76  243E               	addwf	dtoa@i^0,w,c
  1549  000A78  6ED9               	movwf	fsr2l,c
  1550  000A7A  0E00               	movlw	high _dbuf
  1551  000A7C  203F               	addwfc	(dtoa@i+1)^0,w,c
  1552  000A7E  6EDA               	movwf	fsr2h,c
  1553  000A80  C036  F001         	movff	dtoa@n,___aomod@dividend
  1554  000A84  C037  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1555  000A88  C038  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1556  000A8C  C039  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1557  000A90  C03A  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1558  000A94  C03B  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1559  000A98  C03C  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1560  000A9C  C03D  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1561  000AA0  0E0A               	movlw	10
  1562  000AA2  6E09               	movwf	___aomod@divisor^0,c
  1563  000AA4  0E00               	movlw	0
  1564  000AA6  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1565  000AA8  0E00               	movlw	0
  1566  000AAA  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1567  000AAC  0E00               	movlw	0
  1568  000AAE  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1569  000AB0  0E00               	movlw	0
  1570  000AB2  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1571  000AB4  0E00               	movlw	0
  1572  000AB6  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1573  000AB8  0E00               	movlw	0
  1574  000ABA  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1575  000ABC  0E00               	movlw	0
  1576  000ABE  6E10               	movwf	(___aomod@divisor+7)^0,c
  1577  000AC0  ECF7  F006         	call	___aomod	;wreg free
  1578  000AC4  C001  F026         	movff	?___aomod,??_dtoa
  1579  000AC8  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1580  000ACC  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1581  000AD0  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1582  000AD4  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1583  000AD8  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1584  000ADC  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1585  000AE0  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1586  000AE4  C026  F013         	movff	??_dtoa,abs@a
  1587  000AE8  C028  F014         	movff	??_dtoa+2,abs@a+1
  1588  000AEC  EC3B  F00B         	call	_abs	;wreg free
  1589  000AF0  5013               	movf	?_abs^0,w,c
  1590  000AF2  0F30               	addlw	48
  1591  000AF4  6EDF               	movwf	indf2,c
  1592  000AF6                     
  1593                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 315:         --p;
  1594  000AF6  0630               	decf	dtoa@p^0,f,c
  1595  000AF8  A0D8               	btfss	status,0,c
  1596  000AFA  0631               	decf	(dtoa@p+1)^0,f,c
  1597  000AFC                     
  1598                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 316:         --w;
  1599  000AFC  0632               	decf	dtoa@w^0,f,c
  1600  000AFE  A0D8               	btfss	status,0,c
  1601  000B00  0633               	decf	(dtoa@w+1)^0,f,c
  1602  000B02                     
  1603                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1604  000B02  C036  F001         	movff	dtoa@n,___aodiv@dividend
  1605  000B06  C037  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1606  000B0A  C038  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1607  000B0E  C039  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1608  000B12  C03A  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1609  000B16  C03B  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1610  000B1A  C03C  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1611  000B1E  C03D  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1612  000B22  0E0A               	movlw	10
  1613  000B24  6E09               	movwf	___aodiv@divisor^0,c
  1614  000B26  0E00               	movlw	0
  1615  000B28  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1616  000B2A  0E00               	movlw	0
  1617  000B2C  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1618  000B2E  0E00               	movlw	0
  1619  000B30  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1620  000B32  0E00               	movlw	0
  1621  000B34  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1622  000B36  0E00               	movlw	0
  1623  000B38  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1624  000B3A  0E00               	movlw	0
  1625  000B3C  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1626  000B3E  0E00               	movlw	0
  1627  000B40  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1628  000B42  EC33  F006         	call	___aodiv	;wreg free
  1629  000B46  C001  F036         	movff	?___aodiv,dtoa@n
  1630  000B4A  C002  F037         	movff	?___aodiv+1,dtoa@n+1
  1631  000B4E  C003  F038         	movff	?___aodiv+2,dtoa@n+2
  1632  000B52  C004  F039         	movff	?___aodiv+3,dtoa@n+3
  1633  000B56  C005  F03A         	movff	?___aodiv+4,dtoa@n+4
  1634  000B5A  C006  F03B         	movff	?___aodiv+5,dtoa@n+5
  1635  000B5E  C007  F03C         	movff	?___aodiv+6,dtoa@n+6
  1636  000B62  C008  F03D         	movff	?___aodiv+7,dtoa@n+7
  1637  000B66                     l1655:
  1638                           
  1639                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1640  000B66  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1641  000B68  EFBE  F005         	goto	u1041
  1642  000B6C  503F               	movf	(dtoa@i+1)^0,w,c
  1643  000B6E  E108               	bnz	u1040
  1644  000B70  043E               	decf	dtoa@i^0,w,c
  1645  000B72  A0D8               	btfss	status,0,c
  1646  000B74  EFBE  F005         	goto	u1041
  1647  000B78  EFC0  F005         	goto	u1040
  1648  000B7C                     u1041:
  1649  000B7C  EFF0  F005         	goto	l1665
  1650  000B80                     u1040:
  1651  000B80  5036               	movf	dtoa@n^0,w,c
  1652  000B82  1037               	iorwf	(dtoa@n+1)^0,w,c
  1653  000B84  1038               	iorwf	(dtoa@n+2)^0,w,c
  1654  000B86  1039               	iorwf	(dtoa@n+3)^0,w,c
  1655  000B88  103A               	iorwf	(dtoa@n+4)^0,w,c
  1656  000B8A  103B               	iorwf	(dtoa@n+5)^0,w,c
  1657  000B8C  103C               	iorwf	(dtoa@n+6)^0,w,c
  1658  000B8E  103D               	iorwf	(dtoa@n+7)^0,w,c
  1659  000B90  A4D8               	btfss	status,2,c
  1660  000B92  EFCD  F005         	goto	u1051
  1661  000B96  EFCF  F005         	goto	u1050
  1662  000B9A                     u1051:
  1663  000B9A  EF37  F005         	goto	l1645
  1664  000B9E                     u1050:
  1665  000B9E  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1666  000BA0  EFDC  F005         	goto	u1060
  1667  000BA4  5031               	movf	(dtoa@p+1)^0,w,c
  1668  000BA6  E106               	bnz	u1061
  1669  000BA8  0430               	decf	dtoa@p^0,w,c
  1670  000BAA  B0D8               	btfsc	status,0,c
  1671  000BAC  EFDA  F005         	goto	u1061
  1672  000BB0  EFDC  F005         	goto	u1060
  1673  000BB4                     u1061:
  1674  000BB4  EF37  F005         	goto	l1645
  1675  000BB8                     u1060:
  1676  000BB8  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1677  000BBA  EFE7  F005         	goto	u1071
  1678  000BBE  5033               	movf	(dtoa@w+1)^0,w,c
  1679  000BC0  E108               	bnz	u1070
  1680  000BC2  0432               	decf	dtoa@w^0,w,c
  1681  000BC4  A0D8               	btfss	status,0,c
  1682  000BC6  EFE7  F005         	goto	u1071
  1683  000BCA  EFE9  F005         	goto	u1070
  1684  000BCE                     u1071:
  1685  000BCE  EFF0  F005         	goto	l1665
  1686  000BD2                     u1070:
  1687  000BD2  B277               	btfsc	_flags^0,1,c
  1688  000BD4  EFEE  F005         	goto	u1081
  1689  000BD8  EFF0  F005         	goto	u1080
  1690  000BDC                     u1081:
  1691  000BDC  EF37  F005         	goto	l1645
  1692  000BE0                     u1080:
  1693  000BE0                     l1665:
  1694                           
  1695                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1696  000BE0  5034               	movf	dtoa@s^0,w,c
  1697  000BE2  1035               	iorwf	(dtoa@s+1)^0,w,c
  1698  000BE4  A4D8               	btfss	status,2,c
  1699  000BE6  EFF7  F005         	goto	u1091
  1700  000BEA  EFF9  F005         	goto	u1090
  1701  000BEE                     u1091:
  1702  000BEE  EF00  F006         	goto	l1669
  1703  000BF2                     u1090:
  1704  000BF2  A477               	btfss	_flags^0,2,c
  1705  000BF4  EFFE  F005         	goto	u1101
  1706  000BF8  EF00  F006         	goto	u1100
  1707  000BFC                     u1101:
  1708  000BFC  EF1E  F006         	goto	l1679
  1709  000C00                     u1100:
  1710  000C00                     l1669:
  1711                           
  1712                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 322:         --i;
  1713  000C00  063E               	decf	dtoa@i^0,f,c
  1714  000C02  A0D8               	btfss	status,0,c
  1715  000C04  063F               	decf	(dtoa@i+1)^0,f,c
  1716  000C06                     
  1717                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1718  000C06  5034               	movf	dtoa@s^0,w,c
  1719  000C08  1035               	iorwf	(dtoa@s+1)^0,w,c
  1720  000C0A  A4D8               	btfss	status,2,c
  1721  000C0C  EF0A  F006         	goto	u1111
  1722  000C10  EF0C  F006         	goto	u1110
  1723  000C14                     u1111:
  1724  000C14  EF12  F006         	goto	l1675
  1725  000C18                     u1110:
  1726  000C18  0E00               	movlw	0
  1727  000C1A  6E2F               	movwf	(_dtoa$905+1)^0,c
  1728  000C1C  0E2B               	movlw	43
  1729  000C1E  6E2E               	movwf	_dtoa$905^0,c
  1730  000C20  EF16  F006         	goto	l1677
  1731  000C24                     l1675:
  1732  000C24  0E00               	movlw	0
  1733  000C26  6E2F               	movwf	(_dtoa$905+1)^0,c
  1734  000C28  0E2D               	movlw	45
  1735  000C2A  6E2E               	movwf	_dtoa$905^0,c
  1736  000C2C                     l1677:
  1737  000C2C  0E80               	movlw	low _dbuf
  1738  000C2E  243E               	addwf	dtoa@i^0,w,c
  1739  000C30  6ED9               	movwf	fsr2l,c
  1740  000C32  0E00               	movlw	high _dbuf
  1741  000C34  203F               	addwfc	(dtoa@i+1)^0,w,c
  1742  000C36  6EDA               	movwf	fsr2h,c
  1743  000C38  C02E  FFDF         	movff	_dtoa$905,indf2
  1744  000C3C                     l1679:
  1745                           
  1746                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1747  000C3C  C01C  F011         	movff	dtoa@fp,pad@fp
  1748  000C40  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1749  000C44  0E80               	movlw	low _dbuf
  1750  000C46  243E               	addwf	dtoa@i^0,w,c
  1751  000C48  6E13               	movwf	pad@buf^0,c
  1752  000C4A  0E00               	movlw	high _dbuf
  1753  000C4C  203F               	addwfc	(dtoa@i+1)^0,w,c
  1754  000C4E  6E14               	movwf	(pad@buf+1)^0,c
  1755  000C50  C032  F015         	movff	dtoa@w,pad@p
  1756  000C54  C033  F016         	movff	dtoa@w+1,pad@p+1
  1757  000C58  EC9A  F009         	call	_pad	;wreg free
  1758  000C5C  C011  F01C         	movff	?_pad,?_dtoa
  1759  000C60  C012  F01D         	movff	?_pad+1,?_dtoa+1
  1760  000C64  0012               	return		;funcret
  1761  000C66                     __end_of_dtoa:
  1762                           	callstack 0
  1763                           
  1764 ;; *************** function _pad *****************
  1765 ;; Defined at:
  1766 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1769 ;;		 -> sprintf@f(11), 
  1770 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1771 ;;		 -> dbuf(32), 
  1772 ;;  p               2   20[COMRAM] int 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  w               2   25[COMRAM] int 
  1775 ;;  i               2   23[COMRAM] int 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  2   16[COMRAM] int 
  1778 ;; Registers used:
  1779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1785 ;;      Params:         6       0       0       0       0       0       0
  1786 ;;      Locals:         4       0       0       0       0       0       0
  1787 ;;      Temps:          1       0       0       0       0       0       0
  1788 ;;      Totals:        11       0       0       0       0       0       0
  1789 ;;Total ram usage:       11 bytes
  1790 ;; Hardware stack levels used: 1
  1791 ;; Hardware stack levels required when called: 3
  1792 ;; This function calls:
  1793 ;;		_fputc
  1794 ;;		_fputs
  1795 ;;		_strlen
  1796 ;; This function is called by:
  1797 ;;		_dtoa
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text5
  1802  001334                     __ptext5:
  1803                           	callstack 0
  1804  001334                     _pad:
  1805                           	callstack 23
  1806  001334                     
  1807                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1808  001334  A077               	btfss	_flags^0,0,c
  1809  001336  EF9F  F009         	goto	u871
  1810  00133A  EFA1  F009         	goto	u870
  1811  00133E                     u871:
  1812  00133E  EFAB  F009         	goto	l1571
  1813  001342                     u870:
  1814  001342                     
  1815                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1816  001342  C013  F00A         	movff	pad@buf,fputs@s
  1817  001346  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1818  00134A  C011  F00C         	movff	pad@fp,fputs@fp
  1819  00134E  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1820  001352  EC19  F00B         	call	_fputs	;wreg free
  1821  001356                     l1571:
  1822                           
  1823                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1824  001356  BE16               	btfsc	(pad@p+1)^0,7,c
  1825  001358  EFB0  F009         	goto	u881
  1826  00135C  EFB2  F009         	goto	u880
  1827  001360                     u881:
  1828  001360  EFB8  F009         	goto	l1575
  1829  001364                     u880:
  1830  001364  C015  F01A         	movff	pad@p,pad@w
  1831  001368  C016  F01B         	movff	pad@p+1,pad@w+1
  1832  00136C  EFBC  F009         	goto	l793
  1833  001370                     l1575:
  1834  001370  0E00               	movlw	0
  1835  001372  6E1B               	movwf	(pad@w+1)^0,c
  1836  001374  0E00               	movlw	0
  1837  001376  6E1A               	movwf	pad@w^0,c
  1838  001378                     l793:
  1839                           
  1840                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1841  001378  0E00               	movlw	0
  1842  00137A  6E19               	movwf	(pad@i+1)^0,c
  1843  00137C  0E00               	movlw	0
  1844  00137E  6E18               	movwf	pad@i^0,c
  1845                           
  1846                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1847  001380  EFCE  F009         	goto	l1581
  1848  001384                     l1577:
  1849                           
  1850                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1851  001384  0E00               	movlw	0
  1852  001386  6E02               	movwf	(fputc@c+1)^0,c
  1853  001388  0E20               	movlw	32
  1854  00138A  6E01               	movwf	fputc@c^0,c
  1855  00138C  C011  F003         	movff	pad@fp,fputc@fp
  1856  001390  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1857  001394  EC35  F009         	call	_fputc	;wreg free
  1858  001398                     
  1859                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1860  001398  4A18               	infsnz	pad@i^0,f,c
  1861  00139A  2A19               	incf	(pad@i+1)^0,f,c
  1862  00139C                     l1581:
  1863                           
  1864                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1865  00139C  501A               	movf	pad@w^0,w,c
  1866  00139E  5C18               	subwf	pad@i^0,w,c
  1867  0013A0  5019               	movf	(pad@i+1)^0,w,c
  1868  0013A2  0A80               	xorlw	128
  1869  0013A4  6E17               	movwf	??_pad^0,c
  1870  0013A6  501B               	movf	(pad@w+1)^0,w,c
  1871  0013A8  0A80               	xorlw	128
  1872  0013AA  5817               	subwfb	??_pad^0,w,c
  1873  0013AC  A0D8               	btfss	status,0,c
  1874  0013AE  EFDB  F009         	goto	u891
  1875  0013B2  EFDD  F009         	goto	u890
  1876  0013B6                     u891:
  1877  0013B6  EFC2  F009         	goto	l1577
  1878  0013BA                     u890:
  1879  0013BA                     
  1880                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1881  0013BA  B077               	btfsc	_flags^0,0,c
  1882  0013BC  EFE2  F009         	goto	u901
  1883  0013C0  EFE4  F009         	goto	u900
  1884  0013C4                     u901:
  1885  0013C4  EFEE  F009         	goto	l1585
  1886  0013C8                     u900:
  1887  0013C8                     
  1888                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1889  0013C8  C013  F00A         	movff	pad@buf,fputs@s
  1890  0013CC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1891  0013D0  C011  F00C         	movff	pad@fp,fputs@fp
  1892  0013D4  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1893  0013D8  EC19  F00B         	call	_fputs	;wreg free
  1894  0013DC                     l1585:
  1895                           
  1896                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1897  0013DC  C013  F001         	movff	pad@buf,strlen@s
  1898  0013E0  C014  F002         	movff	pad@buf+1,strlen@s+1
  1899  0013E4  EC77  F00B         	call	_strlen	;wreg free
  1900  0013E8  501A               	movf	pad@w^0,w,c
  1901  0013EA  2401               	addwf	?_strlen^0,w,c
  1902  0013EC  6E11               	movwf	?_pad^0,c
  1903  0013EE  501B               	movf	(pad@w+1)^0,w,c
  1904  0013F0  2002               	addwfc	(?_strlen+1)^0,w,c
  1905  0013F2  6E12               	movwf	(?_pad+1)^0,c
  1906  0013F4  0012               	return		;funcret
  1907  0013F6                     __end_of_pad:
  1908                           	callstack 0
  1909                           
  1910 ;; *************** function _strlen *****************
  1911 ;; Defined at:
  1912 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1915 ;;		 -> dbuf(32), 
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1918 ;;		 -> dbuf(32), 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  2    0[COMRAM] unsigned int 
  1921 ;; Registers used:
  1922 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1928 ;;      Params:         2       0       0       0       0       0       0
  1929 ;;      Locals:         2       0       0       0       0       0       0
  1930 ;;      Temps:          0       0       0       0       0       0       0
  1931 ;;      Totals:         4       0       0       0       0       0       0
  1932 ;;Total ram usage:        4 bytes
  1933 ;; Hardware stack levels used: 1
  1934 ;; This function calls:
  1935 ;;		Nothing
  1936 ;; This function is called by:
  1937 ;;		_pad
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text6
  1942  0016EE                     __ptext6:
  1943                           	callstack 0
  1944  0016EE                     _strlen:
  1945                           	callstack 25
  1946  0016EE  C001  F003         	movff	strlen@s,strlen@a
  1947  0016F2  C002  F004         	movff	strlen@s+1,strlen@a+1
  1948  0016F6  EF7F  F00B         	goto	l1475
  1949  0016FA                     l1473:
  1950  0016FA  4A01               	infsnz	strlen@s^0,f,c
  1951  0016FC  2A02               	incf	(strlen@s+1)^0,f,c
  1952  0016FE                     l1475:
  1953  0016FE  C001  FFD9         	movff	strlen@s,fsr2l
  1954  001702  C002  FFDA         	movff	strlen@s+1,fsr2h
  1955  001706  50DF               	movf	indf2,w,c
  1956  001708  A4D8               	btfss	status,2,c
  1957  00170A  EF89  F00B         	goto	u731
  1958  00170E  EF8B  F00B         	goto	u730
  1959  001712                     u731:
  1960  001712  EF7D  F00B         	goto	l1473
  1961  001716                     u730:
  1962  001716  5003               	movf	strlen@a^0,w,c
  1963  001718  5C01               	subwf	strlen@s^0,w,c
  1964  00171A  6E01               	movwf	?_strlen^0,c
  1965  00171C  5004               	movf	(strlen@a+1)^0,w,c
  1966  00171E  5802               	subwfb	(strlen@s+1)^0,w,c
  1967  001720  6E02               	movwf	(?_strlen+1)^0,c
  1968  001722  0012               	return		;funcret
  1969  001724                     __end_of_strlen:
  1970                           	callstack 0
  1971                           
  1972 ;; *************** function _fputs *****************
  1973 ;; Defined at:
  1974 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputs.c"
  1975 ;; Parameters:    Size  Location     Type
  1976 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1977 ;;		 -> dbuf(32), 
  1978 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1979 ;;		 -> sprintf@f(11), 
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;  i               2   14[COMRAM] int 
  1982 ;;  c               1   13[COMRAM] unsigned char 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  2    9[COMRAM] int 
  1985 ;; Registers used:
  1986 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1992 ;;      Params:         4       0       0       0       0       0       0
  1993 ;;      Locals:         3       0       0       0       0       0       0
  1994 ;;      Temps:          0       0       0       0       0       0       0
  1995 ;;      Totals:         7       0       0       0       0       0       0
  1996 ;;Total ram usage:        7 bytes
  1997 ;; Hardware stack levels used: 1
  1998 ;; Hardware stack levels required when called: 2
  1999 ;; This function calls:
  2000 ;;		_fputc
  2001 ;; This function is called by:
  2002 ;;		_pad
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text7
  2007  001632                     __ptext7:
  2008                           	callstack 0
  2009  001632                     _fputs:
  2010                           	callstack 23
  2011  001632  0E00               	movlw	0
  2012  001634  6E10               	movwf	(fputs@i+1)^0,c
  2013  001636  0E00               	movlw	0
  2014  001638  6E0F               	movwf	fputs@i^0,c
  2015  00163A  EF2A  F00B         	goto	l1469
  2016  00163E                     l1465:
  2017  00163E  C00E  F001         	movff	fputs@c,fputc@c
  2018  001642  6A02               	clrf	(fputc@c+1)^0,c
  2019  001644  C00C  F003         	movff	fputs@fp,fputc@fp
  2020  001648  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  2021  00164C  EC35  F009         	call	_fputc	;wreg free
  2022  001650  4A0F               	infsnz	fputs@i^0,f,c
  2023  001652  2A10               	incf	(fputs@i+1)^0,f,c
  2024  001654                     l1469:
  2025  001654  500F               	movf	fputs@i^0,w,c
  2026  001656  240A               	addwf	fputs@s^0,w,c
  2027  001658  6ED9               	movwf	fsr2l,c
  2028  00165A  5010               	movf	(fputs@i+1)^0,w,c
  2029  00165C  200B               	addwfc	(fputs@s+1)^0,w,c
  2030  00165E  6EDA               	movwf	fsr2h,c
  2031  001660  50DF               	movf	indf2,w,c
  2032  001662  6E0E               	movwf	fputs@c^0,c
  2033  001664  500E               	movf	fputs@c^0,w,c
  2034  001666  A4D8               	btfss	status,2,c
  2035  001668  EF38  F00B         	goto	u721
  2036  00166C  EF3A  F00B         	goto	u720
  2037  001670                     u721:
  2038  001670  EF1F  F00B         	goto	l1465
  2039  001674                     u720:
  2040  001674  0012               	return		;funcret
  2041  001676                     __end_of_fputs:
  2042                           	callstack 0
  2043                           
  2044 ;; *************** function _fputc *****************
  2045 ;; Defined at:
  2046 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputc.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  c               2    0[COMRAM] int 
  2049 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  2050 ;;		 -> sprintf@f(11), 
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;		None
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  2    0[COMRAM] int 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2062 ;;      Params:         4       0       0       0       0       0       0
  2063 ;;      Locals:         0       0       0       0       0       0       0
  2064 ;;      Temps:          5       0       0       0       0       0       0
  2065 ;;      Totals:         9       0       0       0       0       0       0
  2066 ;;Total ram usage:        9 bytes
  2067 ;; Hardware stack levels used: 1
  2068 ;; Hardware stack levels required when called: 1
  2069 ;; This function calls:
  2070 ;;		_putch
  2071 ;; This function is called by:
  2072 ;;		_pad
  2073 ;;		_vfpfcnvrt
  2074 ;;		_fputs
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text8
  2079  00126A                     __ptext8:
  2080                           	callstack 0
  2081  00126A                     _fputc:
  2082                           	callstack 26
  2083  00126A  5003               	movf	fputc@fp^0,w,c
  2084  00126C  1004               	iorwf	(fputc@fp+1)^0,w,c
  2085  00126E  B4D8               	btfsc	status,2,c
  2086  001270  EF3C  F009         	goto	u681
  2087  001274  EF3E  F009         	goto	u680
  2088  001278                     u681:
  2089  001278  EF47  F009         	goto	l1453
  2090  00127C                     u680:
  2091  00127C  5003               	movf	fputc@fp^0,w,c
  2092  00127E  1004               	iorwf	(fputc@fp+1)^0,w,c
  2093  001280  A4D8               	btfss	status,2,c
  2094  001282  EF45  F009         	goto	u691
  2095  001286  EF47  F009         	goto	u690
  2096  00128A                     u691:
  2097  00128A  EF4C  F009         	goto	l1455
  2098  00128E                     u690:
  2099  00128E                     l1453:
  2100  00128E  5001               	movf	fputc@c^0,w,c
  2101  001290  ECDF  F00B         	call	_putch
  2102  001294  EF99  F009         	goto	l916
  2103  001298                     l1455:
  2104  001298  EE20 F009          	lfsr	2,9
  2105  00129C  5003               	movf	fputc@fp^0,w,c
  2106  00129E  26D9               	addwf	fsr2l,f,c
  2107  0012A0  5004               	movf	(fputc@fp+1)^0,w,c
  2108  0012A2  22DA               	addwfc	fsr2h,f,c
  2109  0012A4  50DE               	movf	postinc2,w,c
  2110  0012A6  10DE               	iorwf	postinc2,w,c
  2111  0012A8  B4D8               	btfsc	status,2,c
  2112  0012AA  EF59  F009         	goto	u701
  2113  0012AE  EF5B  F009         	goto	u700
  2114  0012B2                     u701:
  2115  0012B2  EF76  F009         	goto	l1459
  2116  0012B6                     u700:
  2117  0012B6  EE20 F009          	lfsr	2,9
  2118  0012BA  5003               	movf	fputc@fp^0,w,c
  2119  0012BC  26D9               	addwf	fsr2l,f,c
  2120  0012BE  5004               	movf	(fputc@fp+1)^0,w,c
  2121  0012C0  22DA               	addwfc	fsr2h,f,c
  2122  0012C2  EE10 F003          	lfsr	1,3
  2123  0012C6  5003               	movf	fputc@fp^0,w,c
  2124  0012C8  26E1               	addwf	fsr1l,f,c
  2125  0012CA  5004               	movf	(fputc@fp+1)^0,w,c
  2126  0012CC  22E2               	addwfc	fsr1h,f,c
  2127  0012CE  50DE               	movf	postinc2,w,c
  2128  0012D0  5CE6               	subwf	postinc1,w,c
  2129  0012D2  50E6               	movf	postinc1,w,c
  2130  0012D4  0A80               	xorlw	128
  2131  0012D6  6E09               	movwf	(??_fputc+4)^0,c
  2132  0012D8  50DE               	movf	postinc2,w,c
  2133  0012DA  0A80               	xorlw	128
  2134  0012DC  5809               	subwfb	(??_fputc+4)^0,w,c
  2135  0012DE  B0D8               	btfsc	status,0,c
  2136  0012E0  EF74  F009         	goto	u711
  2137  0012E4  EF76  F009         	goto	u710
  2138  0012E8                     u711:
  2139  0012E8  EF99  F009         	goto	l916
  2140  0012EC                     u710:
  2141  0012EC                     l1459:
  2142  0012EC  EE20 F003          	lfsr	2,3
  2143  0012F0  5003               	movf	fputc@fp^0,w,c
  2144  0012F2  26D9               	addwf	fsr2l,f,c
  2145  0012F4  5004               	movf	(fputc@fp+1)^0,w,c
  2146  0012F6  22DA               	addwfc	fsr2h,f,c
  2147  0012F8  CFDE F005          	movff	postinc2,??_fputc
  2148  0012FC  CFDD F006          	movff	postdec2,??_fputc+1
  2149  001300  C003  FFD9         	movff	fputc@fp,fsr2l
  2150  001304  C004  FFDA         	movff	fputc@fp+1,fsr2h
  2151  001308  CFDE F007          	movff	postinc2,??_fputc+2
  2152  00130C  CFDD F008          	movff	postdec2,??_fputc+3
  2153  001310  5005               	movf	??_fputc^0,w,c
  2154  001312  2407               	addwf	(??_fputc+2)^0,w,c
  2155  001314  6ED9               	movwf	fsr2l,c
  2156  001316  5006               	movf	(??_fputc+1)^0,w,c
  2157  001318  2008               	addwfc	(??_fputc+3)^0,w,c
  2158  00131A  6EDA               	movwf	fsr2h,c
  2159  00131C  C001  FFDF         	movff	fputc@c,indf2
  2160  001320  EE20 F003          	lfsr	2,3
  2161  001324  5003               	movf	fputc@fp^0,w,c
  2162  001326  26D9               	addwf	fsr2l,f,c
  2163  001328  5004               	movf	(fputc@fp+1)^0,w,c
  2164  00132A  22DA               	addwfc	fsr2h,f,c
  2165  00132C  2ADE               	incf	postinc2,f,c
  2166  00132E  0E00               	movlw	0
  2167  001330  22DD               	addwfc	postdec2,f,c
  2168  001332                     l916:
  2169  001332  0012               	return		;funcret
  2170  001334                     __end_of_fputc:
  2171                           	callstack 0
  2172                           
  2173 ;; *************** function _putch *****************
  2174 ;; Defined at:
  2175 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\putch.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  c               1    wreg     unsigned char 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  c               1    0[COMRAM] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2189 ;;      Params:         0       0       0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used: 1
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_fputc
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text9
  2203  0017BE                     __ptext9:
  2204                           	callstack 0
  2205  0017BE                     _putch:
  2206                           	callstack 26
  2207  0017BE  0012               	return		;funcret
  2208  0017C0                     __end_of_putch:
  2209                           	callstack 0
  2210                           
  2211 ;; *************** function _abs *****************
  2212 ;; Defined at:
  2213 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  a               2   18[COMRAM] int 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  2   18[COMRAM] int 
  2220 ;; Registers used:
  2221 ;;		wreg, status,2, status,0
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2227 ;;      Params:         2       0       0       0       0       0       0
  2228 ;;      Locals:         0       0       0       0       0       0       0
  2229 ;;      Temps:          2       0       0       0       0       0       0
  2230 ;;      Totals:         4       0       0       0       0       0       0
  2231 ;;Total ram usage:        4 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_dtoa
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text10
  2241  001676                     __ptext10:
  2242                           	callstack 0
  2243  001676                     _abs:
  2244                           	callstack 26
  2245  001676  BE14               	btfsc	(abs@a+1)^0,7,c
  2246  001678  EF48  F00B         	goto	u910
  2247  00167C  5014               	movf	(abs@a+1)^0,w,c
  2248  00167E  E106               	bnz	u911
  2249  001680  0413               	decf	abs@a^0,w,c
  2250  001682  B0D8               	btfsc	status,0,c
  2251  001684  EF46  F00B         	goto	u911
  2252  001688  EF48  F00B         	goto	u910
  2253  00168C                     u911:
  2254  00168C  EF56  F00B         	goto	l862
  2255  001690                     u910:
  2256  001690  C013  F015         	movff	abs@a,??_abs
  2257  001694  C014  F016         	movff	abs@a+1,??_abs+1
  2258  001698  1E15               	comf	??_abs^0,f,c
  2259  00169A  1E16               	comf	(??_abs+1)^0,f,c
  2260  00169C  4A15               	infsnz	??_abs^0,f,c
  2261  00169E  2A16               	incf	(??_abs+1)^0,f,c
  2262  0016A0  C015  F013         	movff	??_abs,?_abs
  2263  0016A4  C016  F014         	movff	??_abs+1,?_abs+1
  2264  0016A8  EF5A  F00B         	goto	l865
  2265  0016AC                     l862:
  2266  0016AC  C013  F013         	movff	abs@a,?_abs
  2267  0016B0  C014  F014         	movff	abs@a+1,?_abs+1
  2268  0016B4                     l865:
  2269  0016B4  0012               	return		;funcret
  2270  0016B6                     __end_of_abs:
  2271                           	callstack 0
  2272                           
  2273 ;; *************** function ___aomod *****************
  2274 ;; Defined at:
  2275 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aomod.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  dividend        8    0[COMRAM] long long 
  2278 ;;  divisor         8    8[COMRAM] long long 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  sign            1   17[COMRAM] unsigned char 
  2281 ;;  counter         1   16[COMRAM] unsigned char 
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  8    0[COMRAM] long long 
  2284 ;; Registers used:
  2285 ;;		wreg, status,2, status,0
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2291 ;;      Params:        16       0       0       0       0       0       0
  2292 ;;      Locals:         2       0       0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0
  2294 ;;      Totals:        18       0       0       0       0       0       0
  2295 ;;Total ram usage:       18 bytes
  2296 ;; Hardware stack levels used: 1
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_dtoa
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text11
  2305  000DEE                     __ptext11:
  2306                           	callstack 0
  2307  000DEE                     ___aomod:
  2308                           	callstack 26
  2309  000DEE  0E00               	movlw	0
  2310  000DF0  6E12               	movwf	___aomod@sign^0,c
  2311  000DF2  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2312  000DF4  EF00  F007         	goto	u810
  2313  000DF8  EFFE  F006         	goto	u811
  2314  000DFC                     u811:
  2315  000DFC  EF12  F007         	goto	l1539
  2316  000E00                     u810:
  2317  000E00  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2318  000E02  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2319  000E04  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2320  000E06  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2321  000E08  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2322  000E0A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2323  000E0C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2324  000E0E  6C01               	negf	___aomod@dividend^0,c
  2325  000E10  0E00               	movlw	0
  2326  000E12  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2327  000E14  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2328  000E16  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2329  000E18  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2330  000E1A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2331  000E1C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2332  000E1E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2333  000E20  0E01               	movlw	1
  2334  000E22  6E12               	movwf	___aomod@sign^0,c
  2335  000E24                     l1539:
  2336  000E24  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2337  000E26  EF19  F007         	goto	u820
  2338  000E2A  EF17  F007         	goto	u821
  2339  000E2E                     u821:
  2340  000E2E  EF29  F007         	goto	l1543
  2341  000E32                     u820:
  2342  000E32  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2343  000E34  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2344  000E36  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2345  000E38  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2346  000E3A  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2347  000E3C  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2348  000E3E  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2349  000E40  6C09               	negf	___aomod@divisor^0,c
  2350  000E42  0E00               	movlw	0
  2351  000E44  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2352  000E46  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2353  000E48  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2354  000E4A  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2355  000E4C  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2356  000E4E  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2357  000E50  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2358  000E52                     l1543:
  2359  000E52  5009               	movf	___aomod@divisor^0,w,c
  2360  000E54  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2361  000E56  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2362  000E58  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2363  000E5A  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2364  000E5C  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2365  000E5E  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2366  000E60  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2367  000E62  B4D8               	btfsc	status,2,c
  2368  000E64  EF36  F007         	goto	u831
  2369  000E68  EF38  F007         	goto	u830
  2370  000E6C                     u831:
  2371  000E6C  EF80  F007         	goto	l1559
  2372  000E70                     u830:
  2373  000E70  0E01               	movlw	1
  2374  000E72  6E11               	movwf	___aomod@counter^0,c
  2375  000E74  EF46  F007         	goto	l1549
  2376  000E78                     l1547:
  2377  000E78  90D8               	bcf	status,0,c
  2378  000E7A  3609               	rlcf	___aomod@divisor^0,f,c
  2379  000E7C  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2380  000E7E  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2381  000E80  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2382  000E82  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2383  000E84  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2384  000E86  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2385  000E88  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2386  000E8A  2A11               	incf	___aomod@counter^0,f,c
  2387  000E8C                     l1549:
  2388  000E8C  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2389  000E8E  EF4B  F007         	goto	u841
  2390  000E92  EF4D  F007         	goto	u840
  2391  000E96                     u841:
  2392  000E96  EF3C  F007         	goto	l1547
  2393  000E9A                     u840:
  2394  000E9A                     l1551:
  2395  000E9A  5009               	movf	___aomod@divisor^0,w,c
  2396  000E9C  5C01               	subwf	___aomod@dividend^0,w,c
  2397  000E9E  500A               	movf	(___aomod@divisor+1)^0,w,c
  2398  000EA0  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2399  000EA2  500B               	movf	(___aomod@divisor+2)^0,w,c
  2400  000EA4  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2401  000EA6  500C               	movf	(___aomod@divisor+3)^0,w,c
  2402  000EA8  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2403  000EAA  500D               	movf	(___aomod@divisor+4)^0,w,c
  2404  000EAC  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2405  000EAE  500E               	movf	(___aomod@divisor+5)^0,w,c
  2406  000EB0  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2407  000EB2  500F               	movf	(___aomod@divisor+6)^0,w,c
  2408  000EB4  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2409  000EB6  5010               	movf	(___aomod@divisor+7)^0,w,c
  2410  000EB8  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2411  000EBA  A0D8               	btfss	status,0,c
  2412  000EBC  EF62  F007         	goto	u851
  2413  000EC0  EF64  F007         	goto	u850
  2414  000EC4                     u851:
  2415  000EC4  EF74  F007         	goto	l1555
  2416  000EC8                     u850:
  2417  000EC8  5009               	movf	___aomod@divisor^0,w,c
  2418  000ECA  5E01               	subwf	___aomod@dividend^0,f,c
  2419  000ECC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2420  000ECE  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2421  000ED0  500B               	movf	(___aomod@divisor+2)^0,w,c
  2422  000ED2  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2423  000ED4  500C               	movf	(___aomod@divisor+3)^0,w,c
  2424  000ED6  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2425  000ED8  500D               	movf	(___aomod@divisor+4)^0,w,c
  2426  000EDA  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2427  000EDC  500E               	movf	(___aomod@divisor+5)^0,w,c
  2428  000EDE  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2429  000EE0  500F               	movf	(___aomod@divisor+6)^0,w,c
  2430  000EE2  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2431  000EE4  5010               	movf	(___aomod@divisor+7)^0,w,c
  2432  000EE6  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2433  000EE8                     l1555:
  2434  000EE8  90D8               	bcf	status,0,c
  2435  000EEA  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2436  000EEC  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2437  000EEE  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2438  000EF0  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2439  000EF2  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2440  000EF4  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2441  000EF6  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2442  000EF8  3209               	rrcf	___aomod@divisor^0,f,c
  2443  000EFA  2E11               	decfsz	___aomod@counter^0,f,c
  2444  000EFC  EF4D  F007         	goto	l1551
  2445  000F00                     l1559:
  2446  000F00  5012               	movf	___aomod@sign^0,w,c
  2447  000F02  B4D8               	btfsc	status,2,c
  2448  000F04  EF86  F007         	goto	u861
  2449  000F08  EF88  F007         	goto	u860
  2450  000F0C                     u861:
  2451  000F0C  EF98  F007         	goto	l1563
  2452  000F10                     u860:
  2453  000F10  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2454  000F12  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2455  000F14  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2456  000F16  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2457  000F18  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2458  000F1A  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2459  000F1C  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2460  000F1E  6C01               	negf	___aomod@dividend^0,c
  2461  000F20  0E00               	movlw	0
  2462  000F22  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2463  000F24  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2464  000F26  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2465  000F28  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2466  000F2A  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2467  000F2C  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2468  000F2E  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2469  000F30                     l1563:
  2470  000F30  C001  F001         	movff	___aomod@dividend,?___aomod
  2471  000F34  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2472  000F38  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2473  000F3C  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2474  000F40  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2475  000F44  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2476  000F48  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2477  000F4C  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2478  000F50  0012               	return		;funcret
  2479  000F52                     __end_of___aomod:
  2480                           	callstack 0
  2481                           
  2482 ;; *************** function ___aodiv *****************
  2483 ;; Defined at:
  2484 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aodiv.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  dividend        8    0[COMRAM] long long 
  2487 ;;  divisor         8    8[COMRAM] long long 
  2488 ;; Auto vars:     Size  Location     Type
  2489 ;;  quotient        8   18[COMRAM] long long 
  2490 ;;  sign            1   17[COMRAM] unsigned char 
  2491 ;;  counter         1   16[COMRAM] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  8    0[COMRAM] long long 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2501 ;;      Params:        16       0       0       0       0       0       0
  2502 ;;      Locals:        10       0       0       0       0       0       0
  2503 ;;      Temps:          0       0       0       0       0       0       0
  2504 ;;      Totals:        26       0       0       0       0       0       0
  2505 ;;Total ram usage:       26 bytes
  2506 ;; Hardware stack levels used: 1
  2507 ;; This function calls:
  2508 ;;		Nothing
  2509 ;; This function is called by:
  2510 ;;		_dtoa
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text12
  2515  000C66                     __ptext12:
  2516                           	callstack 0
  2517  000C66                     ___aodiv:
  2518                           	callstack 26
  2519  000C66  0E00               	movlw	0
  2520  000C68  6E12               	movwf	___aodiv@sign^0,c
  2521  000C6A  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2522  000C6C  EF3C  F006         	goto	u740
  2523  000C70  EF3A  F006         	goto	u741
  2524  000C74                     u741:
  2525  000C74  EF4E  F006         	goto	l1495
  2526  000C78                     u740:
  2527  000C78  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2528  000C7A  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2529  000C7C  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2530  000C7E  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2531  000C80  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2532  000C82  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2533  000C84  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2534  000C86  6C09               	negf	___aodiv@divisor^0,c
  2535  000C88  0E00               	movlw	0
  2536  000C8A  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2537  000C8C  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2538  000C8E  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2539  000C90  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2540  000C92  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2541  000C94  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2542  000C96  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2543  000C98  0E01               	movlw	1
  2544  000C9A  6E12               	movwf	___aodiv@sign^0,c
  2545  000C9C                     l1495:
  2546  000C9C  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2547  000C9E  EF55  F006         	goto	u750
  2548  000CA2  EF53  F006         	goto	u751
  2549  000CA6                     u751:
  2550  000CA6  EF67  F006         	goto	l1501
  2551  000CAA                     u750:
  2552  000CAA  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2553  000CAC  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2554  000CAE  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2555  000CB0  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2556  000CB2  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2557  000CB4  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2558  000CB6  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2559  000CB8  6C01               	negf	___aodiv@dividend^0,c
  2560  000CBA  0E00               	movlw	0
  2561  000CBC  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2562  000CBE  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2563  000CC0  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2564  000CC2  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2565  000CC4  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2566  000CC6  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2567  000CC8  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2568  000CCA  0E01               	movlw	1
  2569  000CCC  1A12               	xorwf	___aodiv@sign^0,f,c
  2570  000CCE                     l1501:
  2571  000CCE  EE20  F013         	lfsr	2,___aodiv@quotient
  2572  000CD2  0E07               	movlw	7
  2573  000CD4                     u761:
  2574  000CD4  6ADE               	clrf	postinc2,c
  2575  000CD6  06E8               	decf	wreg,f,c
  2576  000CD8  E2FD               	bc	u761
  2577  000CDA  5009               	movf	___aodiv@divisor^0,w,c
  2578  000CDC  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2579  000CDE  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2580  000CE0  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2581  000CE2  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2582  000CE4  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2583  000CE6  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2584  000CE8  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2585  000CEA  B4D8               	btfsc	status,2,c
  2586  000CEC  EF7A  F006         	goto	u771
  2587  000CF0  EF7C  F006         	goto	u770
  2588  000CF4                     u771:
  2589  000CF4  EFCE  F006         	goto	l1523
  2590  000CF8                     u770:
  2591  000CF8  0E01               	movlw	1
  2592  000CFA  6E11               	movwf	___aodiv@counter^0,c
  2593  000CFC  EF8A  F006         	goto	l1509
  2594  000D00                     l1507:
  2595  000D00  90D8               	bcf	status,0,c
  2596  000D02  3609               	rlcf	___aodiv@divisor^0,f,c
  2597  000D04  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2598  000D06  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2599  000D08  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2600  000D0A  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2601  000D0C  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2602  000D0E  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2603  000D10  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2604  000D12  2A11               	incf	___aodiv@counter^0,f,c
  2605  000D14                     l1509:
  2606  000D14  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2607  000D16  EF8F  F006         	goto	u781
  2608  000D1A  EF91  F006         	goto	u780
  2609  000D1E                     u781:
  2610  000D1E  EF80  F006         	goto	l1507
  2611  000D22                     u780:
  2612  000D22                     l1511:
  2613  000D22  90D8               	bcf	status,0,c
  2614  000D24  3613               	rlcf	___aodiv@quotient^0,f,c
  2615  000D26  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2616  000D28  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2617  000D2A  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2618  000D2C  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2619  000D2E  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2620  000D30  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2621  000D32  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2622  000D34  5009               	movf	___aodiv@divisor^0,w,c
  2623  000D36  5C01               	subwf	___aodiv@dividend^0,w,c
  2624  000D38  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2625  000D3A  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2626  000D3C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2627  000D3E  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2628  000D40  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2629  000D42  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2630  000D44  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2631  000D46  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2632  000D48  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2633  000D4A  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2634  000D4C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2635  000D4E  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2636  000D50  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2637  000D52  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2638  000D54  A0D8               	btfss	status,0,c
  2639  000D56  EFAF  F006         	goto	u791
  2640  000D5A  EFB1  F006         	goto	u790
  2641  000D5E                     u791:
  2642  000D5E  EFC2  F006         	goto	l1519
  2643  000D62                     u790:
  2644  000D62  5009               	movf	___aodiv@divisor^0,w,c
  2645  000D64  5E01               	subwf	___aodiv@dividend^0,f,c
  2646  000D66  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2647  000D68  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2648  000D6A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2649  000D6C  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2650  000D6E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2651  000D70  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2652  000D72  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2653  000D74  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2654  000D76  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2655  000D78  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2656  000D7A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2657  000D7C  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2658  000D7E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2659  000D80  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2660  000D82  8013               	bsf	___aodiv@quotient^0,0,c
  2661  000D84                     l1519:
  2662  000D84  90D8               	bcf	status,0,c
  2663  000D86  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2664  000D88  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2665  000D8A  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2666  000D8C  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2667  000D8E  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2668  000D90  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2669  000D92  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2670  000D94  3209               	rrcf	___aodiv@divisor^0,f,c
  2671  000D96  2E11               	decfsz	___aodiv@counter^0,f,c
  2672  000D98  EF91  F006         	goto	l1511
  2673  000D9C                     l1523:
  2674  000D9C  5012               	movf	___aodiv@sign^0,w,c
  2675  000D9E  B4D8               	btfsc	status,2,c
  2676  000DA0  EFD4  F006         	goto	u801
  2677  000DA4  EFD6  F006         	goto	u800
  2678  000DA8                     u801:
  2679  000DA8  EFE6  F006         	goto	l1527
  2680  000DAC                     u800:
  2681  000DAC  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2682  000DAE  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2683  000DB0  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2684  000DB2  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2685  000DB4  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2686  000DB6  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2687  000DB8  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2688  000DBA  6C13               	negf	___aodiv@quotient^0,c
  2689  000DBC  0E00               	movlw	0
  2690  000DBE  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2691  000DC0  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2692  000DC2  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2693  000DC4  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2694  000DC6  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2695  000DC8  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2696  000DCA  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2697  000DCC                     l1527:
  2698  000DCC  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2699  000DD0  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2700  000DD4  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2701  000DD8  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2702  000DDC  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2703  000DE0  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2704  000DE4  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2705  000DE8  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2706  000DEC  0012               	return		;funcret
  2707  000DEE                     __end_of___aodiv:
  2708                           	callstack 0
  2709                           
  2710 ;; *************** function _atoi *****************
  2711 ;; Defined at:
  2712 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\atoi.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;  s               2    7[COMRAM] PTR const unsigned char 
  2715 ;;		 -> STR_2(5), 
  2716 ;; Auto vars:     Size  Location     Type
  2717 ;;  n               2   15[COMRAM] int 
  2718 ;;  neg             2   13[COMRAM] int 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  2    7[COMRAM] int 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2728 ;;      Params:         2       0       0       0       0       0       0
  2729 ;;      Locals:         4       0       0       0       0       0       0
  2730 ;;      Temps:          4       0       0       0       0       0       0
  2731 ;;      Totals:        10       0       0       0       0       0       0
  2732 ;;Total ram usage:       10 bytes
  2733 ;; Hardware stack levels used: 1
  2734 ;; Hardware stack levels required when called: 1
  2735 ;; This function calls:
  2736 ;;		___wmul
  2737 ;;		_isdigit
  2738 ;;		_isspace
  2739 ;; This function is called by:
  2740 ;;		_vfpfcnvrt
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text13
  2745  000F52                     __ptext13:
  2746                           	callstack 0
  2747  000F52                     _atoi:
  2748                           	callstack 26
  2749  000F52  0E00               	movlw	0
  2750  000F54  6E11               	movwf	(atoi@n+1)^0,c
  2751  000F56  0E00               	movlw	0
  2752  000F58  6E10               	movwf	atoi@n^0,c
  2753  000F5A  0E00               	movlw	0
  2754  000F5C  6E0F               	movwf	(atoi@neg+1)^0,c
  2755  000F5E  0E00               	movlw	0
  2756  000F60  6E0E               	movwf	atoi@neg^0,c
  2757  000F62  EFB5  F007         	goto	l1689
  2758  000F66                     l1685:
  2759  000F66  4A08               	infsnz	atoi@s^0,f,c
  2760  000F68  2A09               	incf	(atoi@s+1)^0,f,c
  2761  000F6A                     l1689:
  2762  000F6A  C008  FFF6         	movff	atoi@s,tblptrl
  2763  000F6E  C009  FFF7         	movff	atoi@s+1,tblptrh
  2764  000F72                     	if	0	;tblptru may be non-zero
  2765  000F72                     	endif
  2766  000F72                     	if	0	;tblptru may be non-zero
  2767  000F72                     	endif
  2768  000F72  0008               	tblrd		*
  2769  000F74  50F5               	movf	tablat,w,c
  2770  000F76  0A20               	xorlw	32
  2771  000F78  B4D8               	btfsc	status,2,c
  2772  000F7A  EFC1  F007         	goto	u1121
  2773  000F7E  EFC3  F007         	goto	u1120
  2774  000F82                     u1121:
  2775  000F82  EFB3  F007         	goto	l1685
  2776  000F86                     u1120:
  2777  000F86  0EF7               	movlw	247
  2778  000F88  6E0A               	movwf	??_atoi^0,c
  2779  000F8A  0EFF               	movlw	255
  2780  000F8C  6E0B               	movwf	(??_atoi+1)^0,c
  2781  000F8E  C008  FFF6         	movff	atoi@s,tblptrl
  2782  000F92  C009  FFF7         	movff	atoi@s+1,tblptrh
  2783  000F96                     	if	0	;tblptru may be non-zero
  2784  000F96                     	endif
  2785  000F96                     	if	0	;tblptru may be non-zero
  2786  000F96                     	endif
  2787  000F96  0008               	tblrd		*
  2788  000F98  50F5               	movf	tablat,w,c
  2789  000F9A  6E0C               	movwf	(??_atoi+2)^0,c
  2790  000F9C  6A0D               	clrf	(??_atoi+3)^0,c
  2791  000F9E  500A               	movf	??_atoi^0,w,c
  2792  000FA0  260C               	addwf	(??_atoi+2)^0,f,c
  2793  000FA2  500B               	movf	(??_atoi+1)^0,w,c
  2794  000FA4  220D               	addwfc	(??_atoi+3)^0,f,c
  2795  000FA6  500D               	movf	(??_atoi+3)^0,w,c
  2796  000FA8  E109               	bnz	u1130
  2797  000FAA  0E05               	movlw	5
  2798  000FAC  5C0C               	subwf	(??_atoi+2)^0,w,c
  2799  000FAE  A0D8               	btfss	status,0,c
  2800  000FB0  EFDC  F007         	goto	u1131
  2801  000FB4  EFDE  F007         	goto	u1130
  2802  000FB8                     u1131:
  2803  000FB8  EFB3  F007         	goto	l1685
  2804  000FBC                     u1130:
  2805  000FBC  EFE8  F007         	goto	l1697
  2806  000FC0                     l1693:
  2807  000FC0  0E00               	movlw	0
  2808  000FC2  6E0F               	movwf	(atoi@neg+1)^0,c
  2809  000FC4  0E01               	movlw	1
  2810  000FC6  6E0E               	movwf	atoi@neg^0,c
  2811  000FC8                     l1695:
  2812  000FC8  4A08               	infsnz	atoi@s^0,f,c
  2813  000FCA  2A09               	incf	(atoi@s+1)^0,f,c
  2814  000FCC  EF1D  F008         	goto	l1705
  2815  000FD0                     l1697:
  2816  000FD0  C008  FFF6         	movff	atoi@s,tblptrl
  2817  000FD4  C009  FFF7         	movff	atoi@s+1,tblptrh
  2818  000FD8                     	if	0	;tblptru may be non-zero
  2819  000FD8                     	endif
  2820  000FD8                     	if	0	;tblptru may be non-zero
  2821  000FD8                     	endif
  2822  000FD8  0008               	tblrd		*
  2823  000FDA  50F5               	movf	tablat,w,c
  2824  000FDC  6E0A               	movwf	??_atoi^0,c
  2825  000FDE  6A0B               	clrf	(??_atoi+1)^0,c
  2826                           
  2827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2828                           ; Switch size 1, requested type "simple"
  2829                           ; Number of cases is 1, Range of values is 0 to 0
  2830                           ; switch strategies available:
  2831                           ; Name         Instructions Cycles
  2832                           ; simple_byte            4     3 (average)
  2833                           ;	Chosen strategy is simple_byte
  2834  000FE0  500B               	movf	(??_atoi+1)^0,w,c
  2835  000FE2  0A00               	xorlw	0	; case 0
  2836  000FE4  B4D8               	btfsc	status,2,c
  2837  000FE6  EFF7  F007         	goto	l1997
  2838  000FEA  EF1D  F008         	goto	l1705
  2839  000FEE                     l1997:
  2840                           
  2841                           ; Switch size 1, requested type "simple"
  2842                           ; Number of cases is 2, Range of values is 43 to 45
  2843                           ; switch strategies available:
  2844                           ; Name         Instructions Cycles
  2845                           ; simple_byte            7     4 (average)
  2846                           ;	Chosen strategy is simple_byte
  2847  000FEE  500A               	movf	??_atoi^0,w,c
  2848  000FF0  0A2B               	xorlw	43	; case 43
  2849  000FF2  B4D8               	btfsc	status,2,c
  2850  000FF4  EFE4  F007         	goto	l1695
  2851  000FF8  0A06               	xorlw	6	; case 45
  2852  000FFA  B4D8               	btfsc	status,2,c
  2853  000FFC  EFE0  F007         	goto	l1693
  2854  001000  EF1D  F008         	goto	l1705
  2855  001004                     l1699:
  2856  001004  C010  F001         	movff	atoi@n,___wmul@multiplier
  2857  001008  C011  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2858  00100C  0E00               	movlw	0
  2859  00100E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2860  001010  0E0A               	movlw	10
  2861  001012  6E03               	movwf	___wmul@multiplicand^0,c
  2862  001014  EC92  F00B         	call	___wmul	;wreg free
  2863  001018  C008  FFF6         	movff	atoi@s,tblptrl
  2864  00101C  C009  FFF7         	movff	atoi@s+1,tblptrh
  2865  001020                     	if	0	;tblptru may be non-zero
  2866  001020                     	endif
  2867  001020                     	if	0	;tblptru may be non-zero
  2868  001020                     	endif
  2869  001020  0008               	tblrd		*
  2870  001022  50F5               	movf	tablat,w,c
  2871  001024  5E01               	subwf	?___wmul^0,f,c
  2872  001026  0E00               	movlw	0
  2873  001028  5A02               	subwfb	(?___wmul+1)^0,f,c
  2874  00102A  0E30               	movlw	48
  2875  00102C  2401               	addwf	?___wmul^0,w,c
  2876  00102E  6E10               	movwf	atoi@n^0,c
  2877  001030  0E00               	movlw	0
  2878  001032  2002               	addwfc	(?___wmul+1)^0,w,c
  2879  001034  6E11               	movwf	(atoi@n+1)^0,c
  2880  001036  EFE4  F007         	goto	l1695
  2881  00103A                     l1705:
  2882  00103A  0ED0               	movlw	208
  2883  00103C  6E0A               	movwf	??_atoi^0,c
  2884  00103E  0EFF               	movlw	255
  2885  001040  6E0B               	movwf	(??_atoi+1)^0,c
  2886  001042  C008  FFF6         	movff	atoi@s,tblptrl
  2887  001046  C009  FFF7         	movff	atoi@s+1,tblptrh
  2888  00104A                     	if	0	;tblptru may be non-zero
  2889  00104A                     	endif
  2890  00104A                     	if	0	;tblptru may be non-zero
  2891  00104A                     	endif
  2892  00104A  0008               	tblrd		*
  2893  00104C  50F5               	movf	tablat,w,c
  2894  00104E  6E0C               	movwf	(??_atoi+2)^0,c
  2895  001050  6A0D               	clrf	(??_atoi+3)^0,c
  2896  001052  500A               	movf	??_atoi^0,w,c
  2897  001054  260C               	addwf	(??_atoi+2)^0,f,c
  2898  001056  500B               	movf	(??_atoi+1)^0,w,c
  2899  001058  220D               	addwfc	(??_atoi+3)^0,f,c
  2900  00105A  500D               	movf	(??_atoi+3)^0,w,c
  2901  00105C  E109               	bnz	u1140
  2902  00105E  0E0A               	movlw	10
  2903  001060  5C0C               	subwf	(??_atoi+2)^0,w,c
  2904  001062  A0D8               	btfss	status,0,c
  2905  001064  EF36  F008         	goto	u1141
  2906  001068  EF38  F008         	goto	u1140
  2907  00106C                     u1141:
  2908  00106C  EF02  F008         	goto	l1699
  2909  001070                     u1140:
  2910  001070  500E               	movf	atoi@neg^0,w,c
  2911  001072  100F               	iorwf	(atoi@neg+1)^0,w,c
  2912  001074  A4D8               	btfss	status,2,c
  2913  001076  EF3F  F008         	goto	u1151
  2914  00107A  EF41  F008         	goto	u1150
  2915  00107E                     u1151:
  2916  00107E  EF4F  F008         	goto	l887
  2917  001082                     u1150:
  2918  001082  C010  F00A         	movff	atoi@n,??_atoi
  2919  001086  C011  F00B         	movff	atoi@n+1,??_atoi+1
  2920  00108A  1E0A               	comf	??_atoi^0,f,c
  2921  00108C  1E0B               	comf	(??_atoi+1)^0,f,c
  2922  00108E  4A0A               	infsnz	??_atoi^0,f,c
  2923  001090  2A0B               	incf	(??_atoi+1)^0,f,c
  2924  001092  C00A  F008         	movff	??_atoi,?_atoi
  2925  001096  C00B  F009         	movff	??_atoi+1,?_atoi+1
  2926  00109A  EF53  F008         	goto	l890
  2927  00109E                     l887:
  2928  00109E  C010  F008         	movff	atoi@n,?_atoi
  2929  0010A2  C011  F009         	movff	atoi@n+1,?_atoi+1
  2930  0010A6                     l890:
  2931  0010A6  0012               	return		;funcret
  2932  0010A8                     __end_of_atoi:
  2933                           	callstack 0
  2934                           
  2935 ;; *************** function _isspace *****************
  2936 ;; Defined at:
  2937 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isspace.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  c               2    0[COMRAM] int 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  2    0[COMRAM] int 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2951 ;;      Params:         2       0       0       0       0       0       0
  2952 ;;      Locals:         1       0       0       0       0       0       0
  2953 ;;      Temps:          4       0       0       0       0       0       0
  2954 ;;      Totals:         7       0       0       0       0       0       0
  2955 ;;Total ram usage:        7 bytes
  2956 ;; Hardware stack levels used: 1
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_atoi
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text14
  2965  001592                     __ptext14:
  2966                           	callstack 0
  2967  001592                     _isspace:
  2968                           	callstack 26
  2969  001592  0E01               	movlw	1
  2970  001594  6E07               	movwf	_isspace$954^0,c
  2971  001596  0E20               	movlw	32
  2972  001598  1801               	xorwf	isspace@c^0,w,c
  2973  00159A  1002               	iorwf	(isspace@c+1)^0,w,c
  2974  00159C  B4D8               	btfsc	status,2,c
  2975  00159E  EFD3  F00A         	goto	u941
  2976  0015A2  EFD5  F00A         	goto	u940
  2977  0015A6                     u941:
  2978  0015A6  EFEE  F00A         	goto	l1605
  2979  0015AA                     u940:
  2980  0015AA  0EF7               	movlw	247
  2981  0015AC  6E03               	movwf	??_isspace^0,c
  2982  0015AE  0EFF               	movlw	255
  2983  0015B0  6E04               	movwf	(??_isspace+1)^0,c
  2984  0015B2  C001  F005         	movff	isspace@c,??_isspace+2
  2985  0015B6  C002  F006         	movff	isspace@c+1,??_isspace+3
  2986  0015BA  5003               	movf	??_isspace^0,w,c
  2987  0015BC  2605               	addwf	(??_isspace+2)^0,f,c
  2988  0015BE  5004               	movf	(??_isspace+1)^0,w,c
  2989  0015C0  2206               	addwfc	(??_isspace+3)^0,f,c
  2990  0015C2  5006               	movf	(??_isspace+3)^0,w,c
  2991  0015C4  E109               	bnz	u950
  2992  0015C6  0E05               	movlw	5
  2993  0015C8  5C05               	subwf	(??_isspace+2)^0,w,c
  2994  0015CA  A0D8               	btfss	status,0,c
  2995  0015CC  EFEA  F00A         	goto	u951
  2996  0015D0  EFEC  F00A         	goto	u950
  2997  0015D4                     u951:
  2998  0015D4  EFEE  F00A         	goto	l1605
  2999  0015D8                     u950:
  3000  0015D8  0E00               	movlw	0
  3001  0015DA  6E07               	movwf	_isspace$954^0,c
  3002  0015DC                     l1605:
  3003  0015DC  C007  F001         	movff	_isspace$954,?_isspace
  3004  0015E0  6A02               	clrf	(?_isspace+1)^0,c
  3005  0015E2  0012               	return		;funcret
  3006  0015E4                     __end_of_isspace:
  3007                           	callstack 0
  3008                           
  3009 ;; *************** function _isdigit *****************
  3010 ;; Defined at:
  3011 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isdigit.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  c               2    0[COMRAM] int 
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;		None
  3016 ;; Return value:  Size  Location     Type
  3017 ;;                  2    0[COMRAM] int 
  3018 ;; Registers used:
  3019 ;;		wreg, status,2, status,0
  3020 ;; Tracked objects:
  3021 ;;		On entry : 0/0
  3022 ;;		On exit  : 0/0
  3023 ;;		Unchanged: 0/0
  3024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3025 ;;      Params:         2       0       0       0       0       0       0
  3026 ;;      Locals:         0       0       0       0       0       0       0
  3027 ;;      Temps:          4       0       0       0       0       0       0
  3028 ;;      Totals:         6       0       0       0       0       0       0
  3029 ;;Total ram usage:        6 bytes
  3030 ;; Hardware stack levels used: 1
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_vfpfcnvrt
  3035 ;;		_atoi
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text15
  3040  0016B6                     __ptext15:
  3041                           	callstack 0
  3042  0016B6                     _isdigit:
  3043                           	callstack 27
  3044  0016B6  0ED0               	movlw	208
  3045  0016B8  6E03               	movwf	??_isdigit^0,c
  3046  0016BA  0EFF               	movlw	255
  3047  0016BC  6E04               	movwf	(??_isdigit+1)^0,c
  3048  0016BE  C001  F005         	movff	isdigit@c,??_isdigit+2
  3049  0016C2  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  3050  0016C6  5003               	movf	??_isdigit^0,w,c
  3051  0016C8  2605               	addwf	(??_isdigit+2)^0,f,c
  3052  0016CA  5004               	movf	(??_isdigit+1)^0,w,c
  3053  0016CC  2206               	addwfc	(??_isdigit+3)^0,f,c
  3054  0016CE  5006               	movf	(??_isdigit+3)^0,w,c
  3055  0016D0  E10A               	bnz	u920
  3056  0016D2  0E0A               	movlw	10
  3057  0016D4  5C05               	subwf	(??_isdigit+2)^0,w,c
  3058  0016D6  A0D8               	btfss	status,0,c
  3059  0016D8  EF70  F00B         	goto	u921
  3060  0016DC  EF73  F00B         	goto	u920
  3061  0016E0                     u921:
  3062  0016E0  0E01               	movlw	1
  3063  0016E2  EF74  F00B         	goto	u930
  3064  0016E6                     u920:
  3065  0016E6  0E00               	movlw	0
  3066  0016E8                     u930:
  3067  0016E8  6E01               	movwf	?_isdigit^0,c
  3068  0016EA  6A02               	clrf	(?_isdigit+1)^0,c
  3069  0016EC  0012               	return		;funcret
  3070  0016EE                     __end_of_isdigit:
  3071                           	callstack 0
  3072                           
  3073 ;; *************** function ___wmul *****************
  3074 ;; Defined at:
  3075 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  multiplier      2    0[COMRAM] unsigned int 
  3078 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3079 ;; Auto vars:     Size  Location     Type
  3080 ;;  product         2    4[COMRAM] unsigned int 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  2    0[COMRAM] unsigned int 
  3083 ;; Registers used:
  3084 ;;		wreg, status,2, status,0, prodl, prodh
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3090 ;;      Params:         4       0       0       0       0       0       0
  3091 ;;      Locals:         2       0       0       0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0
  3093 ;;      Totals:         6       0       0       0       0       0       0
  3094 ;;Total ram usage:        6 bytes
  3095 ;; Hardware stack levels used: 1
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_atoi
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text16
  3104  001724                     __ptext16:
  3105                           	callstack 0
  3106  001724                     ___wmul:
  3107                           	callstack 26
  3108  001724  5001               	movf	___wmul@multiplier^0,w,c
  3109  001726  0203               	mulwf	___wmul@multiplicand^0,c
  3110  001728  CFF3 F005          	movff	prodl,___wmul@product
  3111  00172C  CFF4 F006          	movff	prodh,___wmul@product+1
  3112  001730  5001               	movf	___wmul@multiplier^0,w,c
  3113  001732  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  3114  001734  50F3               	movf	243,w,c
  3115  001736  2606               	addwf	(___wmul@product+1)^0,f,c
  3116  001738  5002               	movf	(___wmul@multiplier+1)^0,w,c
  3117  00173A  0203               	mulwf	___wmul@multiplicand^0,c
  3118  00173C  50F3               	movf	243,w,c
  3119  00173E  2606               	addwf	(___wmul@product+1)^0,f,c
  3120  001740  C005  F001         	movff	___wmul@product,?___wmul
  3121  001744  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3122  001748  0012               	return		;funcret
  3123  00174A                     __end_of___wmul:
  3124                           	callstack 0
  3125                           
  3126 ;; *************** function _lcd_write *****************
  3127 ;; Defined at:
  3128 ;;		line 79 in file "LCD4b_EXSTO.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  lin             1    wreg     unsigned char 
  3131 ;;  col             1    6[COMRAM] unsigned char 
  3132 ;;  str             2    7[COMRAM] PTR unsigned char 
  3133 ;;		 -> STR_4(17), STR_3(17), bufferLCD(16), STR_1(17), 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  lin             1   10[COMRAM] unsigned char 
  3136 ;;  end             1    9[COMRAM] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3146 ;;      Params:         3       0       0       0       0       0       0
  3147 ;;      Locals:         2       0       0       0       0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0
  3149 ;;      Totals:         5       0       0       0       0       0       0
  3150 ;;Total ram usage:        5 bytes
  3151 ;; Hardware stack levels used: 1
  3152 ;; Hardware stack levels required when called: 3
  3153 ;; This function calls:
  3154 ;;		_lcd_send_byte
  3155 ;; This function is called by:
  3156 ;;		_main
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text17
  3161  0013F6                     __ptext17:
  3162                           	callstack 0
  3163  0013F6                     _lcd_write:
  3164                           	callstack 27
  3165                           
  3166                           ;incstack = 0
  3167                           ;lcd_write@lin stored from wreg
  3168  0013F6  6E0B               	movwf	lcd_write@lin^0,c
  3169  0013F8                     
  3170                           ;LCD4b_EXSTO.c: 79: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 80: {;L
      +                          CD4b_EXSTO.c: 81:     char end;;LCD4b_EXSTO.c: 83:     if(lin == 1)
  3171  0013F8  040B               	decf	lcd_write@lin^0,w,c
  3172  0013FA  A4D8               	btfss	status,2,c
  3173  0013FC  EF02  F00A         	goto	u1281
  3174  001400  EF04  F00A         	goto	u1280
  3175  001404                     u1281:
  3176  001404  EF09  F00A         	goto	l1897
  3177  001408                     u1280:
  3178  001408                     
  3179                           ;LCD4b_EXSTO.c: 84:     {;LCD4b_EXSTO.c: 85:         end = col + 0X80 - 1;
  3180  001408  5007               	movf	lcd_write@col^0,w,c
  3181  00140A  0F7F               	addlw	127
  3182  00140C  6E0A               	movwf	lcd_write@end^0,c
  3183                           
  3184                           ;LCD4b_EXSTO.c: 86:     }
  3185  00140E  EF15  F00A         	goto	l1901
  3186  001412                     l1897:
  3187  001412  0E02               	movlw	2
  3188  001414  180B               	xorwf	lcd_write@lin^0,w,c
  3189  001416  A4D8               	btfss	status,2,c
  3190  001418  EF10  F00A         	goto	u1291
  3191  00141C  EF12  F00A         	goto	u1290
  3192  001420                     u1291:
  3193  001420  EF15  F00A         	goto	l1901
  3194  001424                     u1290:
  3195  001424                     
  3196                           ;LCD4b_EXSTO.c: 88:     {;LCD4b_EXSTO.c: 89:         end = col + 0xC0 - 1;
  3197  001424  5007               	movf	lcd_write@col^0,w,c
  3198  001426  0FBF               	addlw	191
  3199  001428  6E0A               	movwf	lcd_write@end^0,c
  3200  00142A                     l1901:
  3201                           
  3202                           ;LCD4b_EXSTO.c: 91:     lcd_send_byte(0,end);
  3203  00142A  C00A  F005         	movff	lcd_write@end,lcd_send_byte@data
  3204  00142E  0E00               	movlw	0
  3205  001430  ECC6  F00B         	call	_lcd_send_byte
  3206                           
  3207                           ;LCD4b_EXSTO.c: 93:     while(*str)
  3208  001434  EF32  F00A         	goto	l1907
  3209  001438                     l1903:
  3210                           
  3211                           ;LCD4b_EXSTO.c: 94:     {;LCD4b_EXSTO.c: 95:         lcd_send_byte(1,*str);
  3212  001438  C008  FFF6         	movff	lcd_write@str,tblptrl
  3213  00143C  C009  FFF7         	movff	lcd_write@str+1,tblptrh
  3214  001440  6AF8               	clrf	tblptru,c
  3215  001442  0E05               	movlw	(high __ramtop+-1)
  3216  001444  64F7               	cpfsgt	tblptrh,c
  3217  001446  D003               	bra	u1307
  3218  001448  0008               	tblrd		*
  3219  00144A  50F5               	movf	tablat,w,c
  3220  00144C  D005               	bra	u1300
  3221  00144E                     u1307:
  3222  00144E  CFF6 FFE1          	movff	tblptrl,fsr1l
  3223  001452  CFF7 FFE2          	movff	tblptrh,fsr1h
  3224  001456  50E7               	movf	indf1,w,c
  3225  001458                     u1300:
  3226  001458  6E05               	movwf	lcd_send_byte@data^0,c
  3227  00145A  0E01               	movlw	1
  3228  00145C  ECC6  F00B         	call	_lcd_send_byte
  3229  001460                     
  3230                           ;LCD4b_EXSTO.c: 96:         str++;
  3231  001460  4A08               	infsnz	lcd_write@str^0,f,c
  3232  001462  2A09               	incf	(lcd_write@str+1)^0,f,c
  3233  001464                     l1907:
  3234                           
  3235                           ;LCD4b_EXSTO.c: 93:     while(*str)
  3236  001464  C008  FFF6         	movff	lcd_write@str,tblptrl
  3237  001468  C009  FFF7         	movff	lcd_write@str+1,tblptrh
  3238  00146C  6AF8               	clrf	tblptru,c
  3239  00146E  0E05               	movlw	(high __ramtop+-1)
  3240  001470  64F7               	cpfsgt	tblptrh,c
  3241  001472  D003               	bra	u1317
  3242  001474  0008               	tblrd		*
  3243  001476  50F5               	movf	tablat,w,c
  3244  001478  D005               	bra	u1310
  3245  00147A                     u1317:
  3246  00147A  CFF6 FFE1          	movff	tblptrl,fsr1l
  3247  00147E  CFF7 FFE2          	movff	tblptrh,fsr1h
  3248  001482  50E7               	movf	indf1,w,c
  3249  001484                     u1310:
  3250  001484  0900               	iorlw	0
  3251  001486  A4D8               	btfss	status,2,c
  3252  001488  EF48  F00A         	goto	u1321
  3253  00148C  EF4A  F00A         	goto	u1320
  3254  001490                     u1321:
  3255  001490  EF1C  F00A         	goto	l1903
  3256  001494                     u1320:
  3257  001494  0012               	return		;funcret
  3258  001496                     __end_of_lcd_write:
  3259                           	callstack 0
  3260                           
  3261 ;; *************** function _lcd_send_byte *****************
  3262 ;; Defined at:
  3263 ;;		line 63 in file "LCD4b_EXSTO.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  level           1    wreg     unsigned char 
  3266 ;;  data            1    4[COMRAM] unsigned char 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  level           1    5[COMRAM] unsigned char 
  3269 ;; Return value:  Size  Location     Type
  3270 ;;                  1    wreg      void 
  3271 ;; Registers used:
  3272 ;;		wreg, status,2, status,0, cstack
  3273 ;; Tracked objects:
  3274 ;;		On entry : 0/0
  3275 ;;		On exit  : 0/0
  3276 ;;		Unchanged: 0/0
  3277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3278 ;;      Params:         1       0       0       0       0       0       0
  3279 ;;      Locals:         1       0       0       0       0       0       0
  3280 ;;      Temps:          0       0       0       0       0       0       0
  3281 ;;      Totals:         2       0       0       0       0       0       0
  3282 ;;Total ram usage:        2 bytes
  3283 ;; Hardware stack levels used: 1
  3284 ;; Hardware stack levels required when called: 2
  3285 ;; This function calls:
  3286 ;;		_lcd_cmd
  3287 ;; This function is called by:
  3288 ;;		_lcd_write
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291                           
  3292                           	psect	text18
  3293  00178C                     __ptext18:
  3294                           	callstack 0
  3295  00178C                     _lcd_send_byte:
  3296                           	callstack 27
  3297                           
  3298                           ;incstack = 0
  3299                           ;lcd_send_byte@level stored from wreg
  3300  00178C  6E06               	movwf	lcd_send_byte@level^0,c
  3301  00178E                     
  3302                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  3303  00178E  B006               	btfsc	lcd_send_byte@level^0,0,c
  3304  001790  D002               	bra	u1255
  3305  001792  9084               	bcf	132,0,c	;volatile
  3306  001794  D001               	bra	u1256
  3307  001796                     u1255:
  3308  001796  8084               	bsf	132,0,c	;volatile
  3309  001798                     u1256:
  3310  001798                     
  3311                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3312  001798  0E42               	movlw	66
  3313  00179A                     u1377:
  3314  00179A  2EE8               	decfsz	wreg,f,c
  3315  00179C  D7FE               	bra	u1377
  3316  00179E  D000               	nop2	
  3317  0017A0                     
  3318                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  3319  0017A0  9484               	bcf	132,2,c	;volatile
  3320  0017A2                     
  3321                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  3322  0017A2  5005               	movf	lcd_send_byte@data^0,w,c
  3323  0017A4  EC54  F008         	call	_lcd_cmd
  3324  0017A8  0012               	return		;funcret
  3325  0017AA                     __end_of_lcd_send_byte:
  3326                           	callstack 0
  3327                           
  3328 ;; *************** function _lcd_init *****************
  3329 ;; Defined at:
  3330 ;;		line 3 in file "LCD4b_EXSTO.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  i               1    5[COMRAM] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2, status,0, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3344 ;;      Params:         0       0       0       0       0       0       0
  3345 ;;      Locals:         1       0       0       0       0       0       0
  3346 ;;      Temps:          1       0       0       0       0       0       0
  3347 ;;      Totals:         2       0       0       0       0       0       0
  3348 ;;Total ram usage:        2 bytes
  3349 ;; Hardware stack levels used: 1
  3350 ;; Hardware stack levels required when called: 2
  3351 ;; This function calls:
  3352 ;;		_lcd_cmd
  3353 ;; This function is called by:
  3354 ;;		_main
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text19
  3359  001496                     __ptext19:
  3360                           	callstack 0
  3361  001496                     _lcd_init:
  3362                           	callstack 28
  3363  001496                     
  3364                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  3365  001496  0E00               	movlw	0
  3366  001498  6E95               	movwf	149,c	;volatile
  3367  00149A                     
  3368                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  3369  00149A  9496               	bcf	150,2,c	;volatile
  3370  00149C                     
  3371                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  3372  00149C  9296               	bcf	150,1,c	;volatile
  3373  00149E                     
  3374                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  3375  00149E  9096               	bcf	150,0,c	;volatile
  3376                           
  3377                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  3378  0014A0  0E00               	movlw	0
  3379  0014A2  6E83               	movwf	131,c	;volatile
  3380  0014A4                     
  3381                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  3382  0014A4  9084               	bcf	132,0,c	;volatile
  3383  0014A6                     
  3384                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  3385  0014A6  9284               	bcf	132,1,c	;volatile
  3386  0014A8                     
  3387                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  3388  0014A8  9484               	bcf	132,2,c	;volatile
  3389  0014AA                     
  3390                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3391  0014AA  0E27               	movlw	39
  3392  0014AC  6E05               	movwf	??_lcd_init^0,c
  3393  0014AE  0EF5               	movlw	245
  3394  0014B0                     u1387:
  3395  0014B0  2EE8               	decfsz	wreg,f,c
  3396  0014B2  D7FE               	bra	u1387
  3397  0014B4  2E05               	decfsz	??_lcd_init^0,f,c
  3398  0014B6  D7FC               	bra	u1387
  3399  0014B8  F000               	nop	
  3400  0014BA                     
  3401                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  3402  0014BA  0E00               	movlw	0
  3403  0014BC  6E06               	movwf	lcd_init@i^0,c
  3404  0014BE                     l1871:
  3405                           
  3406                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  3407  0014BE  0E30               	movlw	48
  3408  0014C0  EC54  F008         	call	_lcd_cmd
  3409  0014C4                     
  3410                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3411  0014C4  0E0D               	movlw	13
  3412  0014C6  6E05               	movwf	??_lcd_init^0,c
  3413  0014C8  0EFC               	movlw	252
  3414  0014CA                     u1397:
  3415  0014CA  2EE8               	decfsz	wreg,f,c
  3416  0014CC  D7FE               	bra	u1397
  3417  0014CE  2E05               	decfsz	??_lcd_init^0,f,c
  3418  0014D0  D7FC               	bra	u1397
  3419  0014D2                     
  3420                           ;LCD4b_EXSTO.c: 22:     }
  3421  0014D2  2A06               	incf	lcd_init@i^0,f,c
  3422  0014D4  0E02               	movlw	2
  3423  0014D6  6406               	cpfsgt	lcd_init@i^0,c
  3424  0014D8  EF70  F00A         	goto	u1271
  3425  0014DC  EF72  F00A         	goto	u1270
  3426  0014E0                     u1271:
  3427  0014E0  EF5F  F00A         	goto	l1871
  3428  0014E4                     u1270:
  3429  0014E4                     
  3430                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  3431  0014E4  0E02               	movlw	2
  3432  0014E6  EC54  F008         	call	_lcd_cmd
  3433  0014EA                     
  3434                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3435  0014EA  0E1A               	movlw	26
  3436  0014EC                     u1407:
  3437  0014EC  2EE8               	decfsz	wreg,f,c
  3438  0014EE  D7FE               	bra	u1407
  3439  0014F0  D000               	nop2	
  3440  0014F2                     
  3441                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  3442  0014F2  0E28               	movlw	40
  3443  0014F4  EC54  F008         	call	_lcd_cmd
  3444                           
  3445                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3446  0014F8  0E1A               	movlw	26
  3447  0014FA                     u1417:
  3448  0014FA  2EE8               	decfsz	wreg,f,c
  3449  0014FC  D7FE               	bra	u1417
  3450  0014FE  D000               	nop2	
  3451  001500                     
  3452                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  3453  001500  0E01               	movlw	1
  3454  001502  EC54  F008         	call	_lcd_cmd
  3455  001506                     
  3456                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3457  001506  0E06               	movlw	6
  3458  001508  6E05               	movwf	??_lcd_init^0,c
  3459  00150A  0E30               	movlw	48
  3460  00150C                     u1427:
  3461  00150C  2EE8               	decfsz	wreg,f,c
  3462  00150E  D7FE               	bra	u1427
  3463  001510  2E05               	decfsz	??_lcd_init^0,f,c
  3464  001512  D7FC               	bra	u1427
  3465  001514  D000               	nop2	
  3466                           
  3467                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  3468  001516  0E0C               	movlw	12
  3469  001518  EC54  F008         	call	_lcd_cmd
  3470  00151C                     
  3471                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3472  00151C  0E1A               	movlw	26
  3473  00151E                     u1437:
  3474  00151E  2EE8               	decfsz	wreg,f,c
  3475  001520  D7FE               	bra	u1437
  3476  001522  D000               	nop2	
  3477  001524                     
  3478                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  3479  001524  0E06               	movlw	6
  3480  001526  EC54  F008         	call	_lcd_cmd
  3481                           
  3482                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3483  00152A  0E1A               	movlw	26
  3484  00152C                     u1447:
  3485  00152C  2EE8               	decfsz	wreg,f,c
  3486  00152E  D7FE               	bra	u1447
  3487  001530  D000               	nop2	
  3488  001532  0012               	return		;funcret
  3489  001534                     __end_of_lcd_init:
  3490                           	callstack 0
  3491                           
  3492 ;; *************** function _lcd_cmd *****************
  3493 ;; Defined at:
  3494 ;;		line 42 in file "LCD4b_EXSTO.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  cmd             1    wreg     unsigned char 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  cmd             1    3[COMRAM] unsigned char 
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3508 ;;      Params:         0       0       0       0       0       0       0
  3509 ;;      Locals:         1       0       0       0       0       0       0
  3510 ;;      Temps:          1       0       0       0       0       0       0
  3511 ;;      Totals:         2       0       0       0       0       0       0
  3512 ;;Total ram usage:        2 bytes
  3513 ;; Hardware stack levels used: 1
  3514 ;; Hardware stack levels required when called: 1
  3515 ;; This function calls:
  3516 ;;		_set_bit
  3517 ;; This function is called by:
  3518 ;;		_lcd_init
  3519 ;;		_lcd_send_byte
  3520 ;;		_lcd_clear
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text20
  3525  0010A8                     __ptext20:
  3526                           	callstack 0
  3527  0010A8                     _lcd_cmd:
  3528                           	callstack 27
  3529                           
  3530                           ;incstack = 0
  3531                           ;lcd_cmd@cmd stored from wreg
  3532  0010A8  6E04               	movwf	lcd_cmd@cmd^0,c
  3533  0010AA                     
  3534                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  3535  0010AA  0E10               	movlw	16
  3536  0010AC  6E01               	movwf	set_bit@comp^0,c
  3537  0010AE  5004               	movf	lcd_cmd@cmd^0,w,c
  3538  0010B0  ECB6  F00B         	call	_set_bit
  3539  0010B4  6E03               	movwf	??_lcd_cmd^0,c
  3540  0010B6  3A03               	swapf	??_lcd_cmd^0,f,c
  3541  0010B8  5083               	movf	131,w,c	;volatile
  3542  0010BA  1803               	xorwf	??_lcd_cmd^0,w,c
  3543  0010BC  0BEF               	andlw	-17
  3544  0010BE  1803               	xorwf	??_lcd_cmd^0,w,c
  3545  0010C0  6E83               	movwf	131,c	;volatile
  3546                           
  3547                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3548  0010C2  0E20               	movlw	32
  3549  0010C4  6E01               	movwf	set_bit@comp^0,c
  3550  0010C6  5004               	movf	lcd_cmd@cmd^0,w,c
  3551  0010C8  ECB6  F00B         	call	_set_bit
  3552  0010CC  6E03               	movwf	??_lcd_cmd^0,c
  3553  0010CE  3A03               	swapf	??_lcd_cmd^0,f,c
  3554  0010D0  4603               	rlncf	??_lcd_cmd^0,f,c
  3555  0010D2  5083               	movf	131,w,c	;volatile
  3556  0010D4  1803               	xorwf	??_lcd_cmd^0,w,c
  3557  0010D6  0BDF               	andlw	-33
  3558  0010D8  1803               	xorwf	??_lcd_cmd^0,w,c
  3559  0010DA  6E83               	movwf	131,c	;volatile
  3560                           
  3561                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3562  0010DC  0E40               	movlw	64
  3563  0010DE  6E01               	movwf	set_bit@comp^0,c
  3564  0010E0  5004               	movf	lcd_cmd@cmd^0,w,c
  3565  0010E2  ECB6  F00B         	call	_set_bit
  3566  0010E6  6E03               	movwf	??_lcd_cmd^0,c
  3567  0010E8  3A03               	swapf	??_lcd_cmd^0,f,c
  3568  0010EA  4603               	rlncf	??_lcd_cmd^0,f,c
  3569  0010EC  4603               	rlncf	??_lcd_cmd^0,f,c
  3570  0010EE  5083               	movf	131,w,c	;volatile
  3571  0010F0  1803               	xorwf	??_lcd_cmd^0,w,c
  3572  0010F2  0BBF               	andlw	-65
  3573  0010F4  1803               	xorwf	??_lcd_cmd^0,w,c
  3574  0010F6  6E83               	movwf	131,c	;volatile
  3575                           
  3576                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3577  0010F8  0E80               	movlw	128
  3578  0010FA  6E01               	movwf	set_bit@comp^0,c
  3579  0010FC  5004               	movf	lcd_cmd@cmd^0,w,c
  3580  0010FE  ECB6  F00B         	call	_set_bit
  3581  001102  6E03               	movwf	??_lcd_cmd^0,c
  3582  001104  3203               	rrcf	??_lcd_cmd^0,f,c
  3583  001106  3203               	rrcf	??_lcd_cmd^0,f,c
  3584  001108  5083               	movf	131,w,c	;volatile
  3585  00110A  1803               	xorwf	??_lcd_cmd^0,w,c
  3586  00110C  0B7F               	andlw	-129
  3587  00110E  1803               	xorwf	??_lcd_cmd^0,w,c
  3588  001110  6E83               	movwf	131,c	;volatile
  3589  001112                     
  3590                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  3591  001112  8484               	bsf	132,2,c	;volatile
  3592  001114                     
  3593                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  3594  001114  9484               	bcf	132,2,c	;volatile
  3595  001116                     
  3596                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3597  001116  0E42               	movlw	66
  3598  001118                     u1457:
  3599  001118  2EE8               	decfsz	wreg,f,c
  3600  00111A  D7FE               	bra	u1457
  3601  00111C  D000               	nop2	
  3602  00111E                     
  3603                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3604  00111E  0E01               	movlw	1
  3605  001120  6E01               	movwf	set_bit@comp^0,c
  3606  001122  5004               	movf	lcd_cmd@cmd^0,w,c
  3607  001124  ECB6  F00B         	call	_set_bit
  3608  001128  6E03               	movwf	??_lcd_cmd^0,c
  3609  00112A  3A03               	swapf	??_lcd_cmd^0,f,c
  3610  00112C  5083               	movf	131,w,c	;volatile
  3611  00112E  1803               	xorwf	??_lcd_cmd^0,w,c
  3612  001130  0BEF               	andlw	-17
  3613  001132  1803               	xorwf	??_lcd_cmd^0,w,c
  3614  001134  6E83               	movwf	131,c	;volatile
  3615  001136                     
  3616                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3617  001136  0E02               	movlw	2
  3618  001138  6E01               	movwf	set_bit@comp^0,c
  3619  00113A  5004               	movf	lcd_cmd@cmd^0,w,c
  3620  00113C  ECB6  F00B         	call	_set_bit
  3621  001140  6E03               	movwf	??_lcd_cmd^0,c
  3622  001142  3A03               	swapf	??_lcd_cmd^0,f,c
  3623  001144  4603               	rlncf	??_lcd_cmd^0,f,c
  3624  001146  5083               	movf	131,w,c	;volatile
  3625  001148  1803               	xorwf	??_lcd_cmd^0,w,c
  3626  00114A  0BDF               	andlw	-33
  3627  00114C  1803               	xorwf	??_lcd_cmd^0,w,c
  3628  00114E  6E83               	movwf	131,c	;volatile
  3629  001150                     
  3630                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3631  001150  0E04               	movlw	4
  3632  001152  6E01               	movwf	set_bit@comp^0,c
  3633  001154  5004               	movf	lcd_cmd@cmd^0,w,c
  3634  001156  ECB6  F00B         	call	_set_bit
  3635  00115A  6E03               	movwf	??_lcd_cmd^0,c
  3636  00115C  3A03               	swapf	??_lcd_cmd^0,f,c
  3637  00115E  4603               	rlncf	??_lcd_cmd^0,f,c
  3638  001160  4603               	rlncf	??_lcd_cmd^0,f,c
  3639  001162  5083               	movf	131,w,c	;volatile
  3640  001164  1803               	xorwf	??_lcd_cmd^0,w,c
  3641  001166  0BBF               	andlw	-65
  3642  001168  1803               	xorwf	??_lcd_cmd^0,w,c
  3643  00116A  6E83               	movwf	131,c	;volatile
  3644  00116C                     
  3645                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3646  00116C  0E08               	movlw	8
  3647  00116E  6E01               	movwf	set_bit@comp^0,c
  3648  001170  5004               	movf	lcd_cmd@cmd^0,w,c
  3649  001172  ECB6  F00B         	call	_set_bit
  3650  001176  6E03               	movwf	??_lcd_cmd^0,c
  3651  001178  3203               	rrcf	??_lcd_cmd^0,f,c
  3652  00117A  3203               	rrcf	??_lcd_cmd^0,f,c
  3653  00117C  5083               	movf	131,w,c	;volatile
  3654  00117E  1803               	xorwf	??_lcd_cmd^0,w,c
  3655  001180  0B7F               	andlw	-129
  3656  001182  1803               	xorwf	??_lcd_cmd^0,w,c
  3657  001184  6E83               	movwf	131,c	;volatile
  3658  001186                     
  3659                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  3660  001186  8484               	bsf	132,2,c	;volatile
  3661  001188                     
  3662                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  3663  001188  9484               	bcf	132,2,c	;volatile
  3664  00118A  0012               	return		;funcret
  3665  00118C                     __end_of_lcd_cmd:
  3666                           	callstack 0
  3667                           
  3668 ;; *************** function _set_bit *****************
  3669 ;; Defined at:
  3670 ;;		line 36 in file "LCD4b_EXSTO.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  cmd             1    wreg     unsigned char 
  3673 ;;  comp            1    0[COMRAM] unsigned char 
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  cmd             1    1[COMRAM] unsigned char 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      unsigned char 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3685 ;;      Params:         1       0       0       0       0       0       0
  3686 ;;      Locals:         1       0       0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0
  3688 ;;      Totals:         2       0       0       0       0       0       0
  3689 ;;Total ram usage:        2 bytes
  3690 ;; Hardware stack levels used: 1
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_lcd_cmd
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           	psect	text21
  3699  00176C                     __ptext21:
  3700                           	callstack 0
  3701  00176C                     _set_bit:
  3702                           	callstack 27
  3703                           
  3704                           ;incstack = 0
  3705                           ;set_bit@cmd stored from wreg
  3706  00176C  6E02               	movwf	set_bit@cmd^0,c
  3707  00176E                     
  3708                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  3709  00176E  5002               	movf	set_bit@cmd^0,w,c
  3710  001770  1401               	andwf	set_bit@comp^0,w,c
  3711  001772  0900               	iorlw	0
  3712  001774  B4D8               	btfsc	status,2,c
  3713  001776  EFBF  F00B         	goto	u961
  3714  00177A  EFC1  F00B         	goto	u960
  3715  00177E                     u961:
  3716  00177E  EFC4  F00B         	goto	l1617
  3717  001782                     u960:
  3718  001782  0E01               	movlw	1
  3719  001784  EFC5  F00B         	goto	l62
  3720  001788                     l1617:
  3721  001788  0E00               	movlw	0
  3722  00178A                     l62:
  3723  00178A  0012               	return		;funcret
  3724  00178C                     __end_of_set_bit:
  3725                           	callstack 0
  3726                           
  3727 ;; *************** function _config_IO *****************
  3728 ;; Defined at:
  3729 ;;		line 77 in file "Main_counter.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;		None
  3732 ;; Auto vars:     Size  Location     Type
  3733 ;;		None
  3734 ;; Return value:  Size  Location     Type
  3735 ;;                  1    wreg      void 
  3736 ;; Registers used:
  3737 ;;		wreg, status,2
  3738 ;; Tracked objects:
  3739 ;;		On entry : 0/0
  3740 ;;		On exit  : 0/0
  3741 ;;		Unchanged: 0/0
  3742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3743 ;;      Params:         0       0       0       0       0       0       0
  3744 ;;      Locals:         0       0       0       0       0       0       0
  3745 ;;      Temps:          0       0       0       0       0       0       0
  3746 ;;      Totals:         0       0       0       0       0       0       0
  3747 ;;Total ram usage:        0 bytes
  3748 ;; Hardware stack levels used: 1
  3749 ;; This function calls:
  3750 ;;		Nothing
  3751 ;; This function is called by:
  3752 ;;		_main
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           	psect	text22
  3757  0017AA                     __ptext22:
  3758                           	callstack 0
  3759  0017AA                     _config_IO:
  3760                           	callstack 30
  3761  0017AA                     
  3762                           ;Main_counter.c: 79:     TRISB = 0X01;
  3763  0017AA  0E01               	movlw	1
  3764  0017AC  6E93               	movwf	147,c	;volatile
  3765                           
  3766                           ;Main_counter.c: 80:     ADCON1 = 0X0F;
  3767  0017AE  0E0F               	movlw	15
  3768  0017B0  6EC1               	movwf	193,c	;volatile
  3769  0017B2  0012               	return		;funcret
  3770  0017B4                     __end_of_config_IO:
  3771                           	callstack 0
  3772                           
  3773 ;; *************** function _config_FOSC *****************
  3774 ;; Defined at:
  3775 ;;		line 72 in file "Main_counter.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;		None
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;		None
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      void 
  3782 ;; Registers used:
  3783 ;;		wreg, status,2
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3789 ;;      Params:         0       0       0       0       0       0       0
  3790 ;;      Locals:         0       0       0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0
  3792 ;;      Totals:         0       0       0       0       0       0       0
  3793 ;;Total ram usage:        0 bytes
  3794 ;; Hardware stack levels used: 1
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_main
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text23
  3803  0017B4                     __ptext23:
  3804                           	callstack 0
  3805  0017B4                     _config_FOSC:
  3806                           	callstack 30
  3807  0017B4                     
  3808                           ;Main_counter.c: 74:     OSCCON = 0X72;
  3809  0017B4  0E72               	movlw	114
  3810  0017B6  6ED3               	movwf	211,c	;volatile
  3811                           
  3812                           ;Main_counter.c: 75:     OSCTUNE = 0X00;
  3813  0017B8  0E00               	movlw	0
  3814  0017BA  6E9B               	movwf	155,c	;volatile
  3815  0017BC  0012               	return		;funcret
  3816  0017BE                     __end_of_config_FOSC:
  3817                           	callstack 0
  3818                           
  3819                           	psect	rparam
  3820  0000                     
  3821                           	psect	idloc
  3822                           
  3823                           ;Config register IDLOC0 @ 0x200000
  3824                           ;	unspecified, using default values
  3825  200000                     	org	2097152
  3826  200000  FF                 	db	255
  3827                           
  3828                           ;Config register IDLOC1 @ 0x200001
  3829                           ;	unspecified, using default values
  3830  200001                     	org	2097153
  3831  200001  FF                 	db	255
  3832                           
  3833                           ;Config register IDLOC2 @ 0x200002
  3834                           ;	unspecified, using default values
  3835  200002                     	org	2097154
  3836  200002  FF                 	db	255
  3837                           
  3838                           ;Config register IDLOC3 @ 0x200003
  3839                           ;	unspecified, using default values
  3840  200003                     	org	2097155
  3841  200003  FF                 	db	255
  3842                           
  3843                           ;Config register IDLOC4 @ 0x200004
  3844                           ;	unspecified, using default values
  3845  200004                     	org	2097156
  3846  200004  FF                 	db	255
  3847                           
  3848                           ;Config register IDLOC5 @ 0x200005
  3849                           ;	unspecified, using default values
  3850  200005                     	org	2097157
  3851  200005  FF                 	db	255
  3852                           
  3853                           ;Config register IDLOC6 @ 0x200006
  3854                           ;	unspecified, using default values
  3855  200006                     	org	2097158
  3856  200006  FF                 	db	255
  3857                           
  3858                           ;Config register IDLOC7 @ 0x200007
  3859                           ;	unspecified, using default values
  3860  200007                     	org	2097159
  3861  200007  FF                 	db	255
  3862                           
  3863                           	psect	config
  3864                           
  3865                           ; Padding undefined space
  3866  300000                     	org	3145728
  3867  300000  FF                 	db	255
  3868                           
  3869                           ;Config register CONFIG1H @ 0x300001
  3870                           ;	Oscillator Selection bits
  3871                           ;	OSC = HS, HS oscillator
  3872                           ;	Fail-Safe Clock Monitor Enable bit
  3873                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3874                           ;	Internal/External Oscillator Switchover bit
  3875                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3876  300001                     	org	3145729
  3877  300001  02                 	db	2
  3878                           
  3879                           ;Config register CONFIG2L @ 0x300002
  3880                           ;	Power-up Timer Enable bit
  3881                           ;	PWRT = OFF, PWRT disabled
  3882                           ;	Brown-out Reset Enable bits
  3883                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3884                           ;	Brown Out Reset Voltage bits
  3885                           ;	BORV = 3, Minimum setting
  3886  300002                     	org	3145730
  3887  300002  19                 	db	25
  3888                           
  3889                           ;Config register CONFIG2H @ 0x300003
  3890                           ;	Watchdog Timer Enable bit
  3891                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3892                           ;	Watchdog Timer Postscale Select bits
  3893                           ;	WDTPS = 32768, 1:32768
  3894  300003                     	org	3145731
  3895  300003  1E                 	db	30
  3896                           
  3897                           ; Padding undefined space
  3898  300004                     	org	3145732
  3899  300004  FF                 	db	255
  3900                           
  3901                           ;Config register CONFIG3H @ 0x300005
  3902                           ;	CCP2 MUX bit
  3903                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3904                           ;	PORTB A/D Enable bit
  3905                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3906                           ;	Low-Power Timer1 Oscillator Enable bit
  3907                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3908                           ;	MCLR Pin Enable bit
  3909                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3910  300005                     	org	3145733
  3911  300005  81                 	db	129
  3912                           
  3913                           ;Config register CONFIG4L @ 0x300006
  3914                           ;	Stack Full/Underflow Reset Enable bit
  3915                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3916                           ;	Single-Supply ICSP Enable bit
  3917                           ;	LVP = OFF, Single-Supply ICSP disabled
  3918                           ;	Extended Instruction Set Enable bit
  3919                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3920                           ;	Background Debugger Enable bit
  3921                           ;	DEBUG = 0x1, unprogrammed default
  3922  300006                     	org	3145734
  3923  300006  81                 	db	129
  3924                           
  3925                           ; Padding undefined space
  3926  300007                     	org	3145735
  3927  300007  FF                 	db	255
  3928                           
  3929                           ;Config register CONFIG5L @ 0x300008
  3930                           ;	Code Protection bit
  3931                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3932                           ;	Code Protection bit
  3933                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3934                           ;	Code Protection bit
  3935                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3936                           ;	Code Protection bit
  3937                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3938  300008                     	org	3145736
  3939  300008  0F                 	db	15
  3940                           
  3941                           ;Config register CONFIG5H @ 0x300009
  3942                           ;	Boot Block Code Protection bit
  3943                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3944                           ;	Data EEPROM Code Protection bit
  3945                           ;	CPD = OFF, Data EEPROM not code-protected
  3946  300009                     	org	3145737
  3947  300009  C0                 	db	192
  3948                           
  3949                           ;Config register CONFIG6L @ 0x30000A
  3950                           ;	Write Protection bit
  3951                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3952                           ;	Write Protection bit
  3953                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3954                           ;	Write Protection bit
  3955                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3956                           ;	Write Protection bit
  3957                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3958  30000A                     	org	3145738
  3959  30000A  0F                 	db	15
  3960                           
  3961                           ;Config register CONFIG6H @ 0x30000B
  3962                           ;	Configuration Register Write Protection bit
  3963                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3964                           ;	Boot Block Write Protection bit
  3965                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3966                           ;	Data EEPROM Write Protection bit
  3967                           ;	WRTD = OFF, Data EEPROM not write-protected
  3968  30000B                     	org	3145739
  3969  30000B  E0                 	db	224
  3970                           
  3971                           ;Config register CONFIG7L @ 0x30000C
  3972                           ;	Table Read Protection bit
  3973                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3974                           ;	Table Read Protection bit
  3975                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3976                           ;	Table Read Protection bit
  3977                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3978                           ;	Table Read Protection bit
  3979                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3980  30000C                     	org	3145740
  3981  30000C  0F                 	db	15
  3982                           
  3983                           ;Config register CONFIG7H @ 0x30000D
  3984                           ;	Boot Block Table Read Protection bit
  3985                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3986  30000D                     	org	3145741
  3987  30000D  40                 	db	64
  3988                           tosu	equ	0xFFF
  3989                           tosh	equ	0xFFE
  3990                           tosl	equ	0xFFD
  3991                           stkptr	equ	0xFFC
  3992                           pclatu	equ	0xFFB
  3993                           pclath	equ	0xFFA
  3994                           pcl	equ	0xFF9
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           indf0	equ	0xFEF
  4002                           postinc0	equ	0xFEE
  4003                           postdec0	equ	0xFED
  4004                           preinc0	equ	0xFEC
  4005                           plusw0	equ	0xFEB
  4006                           fsr0h	equ	0xFEA
  4007                           fsr0l	equ	0xFE9
  4008                           wreg	equ	0xFE8
  4009                           indf1	equ	0xFE7
  4010                           postinc1	equ	0xFE6
  4011                           postdec1	equ	0xFE5
  4012                           preinc1	equ	0xFE4
  4013                           plusw1	equ	0xFE3
  4014                           fsr1h	equ	0xFE2
  4015                           fsr1l	equ	0xFE1
  4016                           bsr	equ	0xFE0
  4017                           indf2	equ	0xFDF
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           preinc2	equ	0xFDC
  4021                           plusw2	equ	0xFDB
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8

Data Sizes:
    Strings     56
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    112     122
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S813$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S813$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[17]), bufferLCD(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10859
                                            110 COMRAM     2     2      0
                        _config_FOSC
                          _config_IO
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    8196
                                             91 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7843
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    7470
                                             63 COMRAM    20    14      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             27 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                10     8      2    1172
                                              7 COMRAM    10     8      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1789
                                              6 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_IO
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     70      7A       1       96.1%
BITBIGSFRh          2C      0       0      16        0.0%
BITBIGSFRlhl        25      0       0      18        0.0%
BITBIGSFRlhh        11      0       0      17        0.0%
BITBIGSFRlllhh       E      0       0      21        0.0%
BITBIGSFRllhh        4      0       0      19        0.0%
BITBIGSFRlllhl       1      0       0      22        0.0%
BITBIGSFRllhl        1      0       0      20        0.0%
BITBIGSFRllll        1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AA      24        0.0%
DATA                 0      0      AA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon May 02 21:14:27 2022

                     l25 17BC                       l28 17B2                       l62 178A  
                     l81 1494                       l66 118A                       l58 1532  
                     l84 1748                       l69 17A8           ?_lcd_send_byte 0005  
    ___wmul@multiplicand 0003                      l211 0F50                      l198 0DEC  
                    l804 0A26                      l901 15E2                      l806 0A2E  
                    l824 0C64                      l762 1630                      l851 0986  
                    l916 1332                      l924 1674                      l933 1722  
                    l862 16AC                      l838 072A                      l927 17BE  
                    l865 16B4                      l793 1378                      l857 1588  
                    l890 10A6                      l858 1590                      l796 13BA  
                    l893 16EC                      l798 13F4                      l887 109E  
                    u700 12B6                      u701 12B2                      u710 12EC  
                    u711 12E8                      u800 0DAC                      u720 1674  
                    u801 0DA8                      u721 1670                      u810 0E00  
                    u730 1716                      u811 0DFC                      u731 1712  
                    u740 0C78                      u820 0E32                      u900 13C8  
                    u741 0C74                      u821 0E2E                      u901 13C4  
                    u750 0CAA                      u830 0E70                      u910 1690  
                    u751 0CA6                      u831 0E6C                      u911 168C  
                    u920 16E6                      u840 0E9A                      u680 127C  
                    u921 16E0                      u761 0CD4                      u841 0E96  
                    u681 1278                      u930 16E8                      u770 0CF8  
                    u850 0EC8                      u690 128E                      u771 0CF4  
                    u851 0EC4                      u691 128A                      u940 15AA  
                    u780 0D22                      u860 0F10                      u941 15A6  
                    u781 0D1E                      u861 0F0C                      u950 15D8  
                    u790 0D62                      u870 1342                      u951 15D4  
                    u791 0D5E                      u871 133E                      u960 1782  
                    u880 1364                      u961 177E                      u881 1360  
                    u890 13BA                      u970 09B8                      u891 13B6  
                    u971 09B2                      u980 09BA                      u990 09D0  
                    u991 09CC                      _abs 1676                      _pad 1334  
                    wreg 000FE8                     ?_abs 0013                     l1501 0CCE  
                   l1511 0D22                     l1503 0CDA                     l1601 15AA  
                   l1521 0D96                     l1513 0D34                     l1505 0CF8  
                   l1611 1782                     l1603 15D8                     l1515 0D62  
                   l1507 0D00                     l1523 0D9C                     l1531 0DEE  
                   l1451 127C                     l1605 15DC                     l1525 0DAC  
                   l1517 0D82                     l1509 0D14                     l1541 0E32  
                   l1533 0DF2                     l1453 128E                     l1621 0988  
                   l1527 0DCC                     l1519 0D84                     l1551 0E9A  
                   l1543 0E52                     l1535 0E00                     l1455 1298  
                   l1463 1632                     l1471 16EE                     l1631 0A00  
                   l1623 09A8                     l1617 1788                     l1609 176E  
                   l1721 1116                     l1481 1724                     l1705 103A  
                   l1561 0F10                     l1553 0EC8                     l1545 0E70  
                   l1537 0E20                     l1457 12B6                     l1449 126A  
                   l1465 163E                     l1473 16FA                     l1641 0A5C  
                   l1633 0A1A                     l1625 09D0                     l1801 08E4  
                   l1731 1186                     l1723 111E                     l1715 10AA  
                   l1483 1740                     l1707 1070                     l1491 0C78  
                   l1563 0F30                     l1555 0EE8                     l1547 0E78  
                   l1539 0E24                     l1459 12EC                     l1467 1650  
                   l1475 16FE                     l1571 1356                     l1651 0AFC  
                   l1643 0A64                     l1635 0A36                     l1627 09F0  
                   l1803 0908                     l1811 0936                     l1733 1188  
                   l1725 1136                     l1717 1112                     l1901 142A  
                   l1709 1082                     l1493 0C98                     l1557 0EFA  
                   l1549 0E8C                     l1469 1654                     l1477 1716  
                   l1581 139C                     l1573 1364                     l1661 0BB8  
                   l1653 0B02                     l1645 0A6E                     l1637 0A48  
                   l1629 09FE                     l1813 0944                     l1805 0916  
                   l1741 067C                     l1727 1150                     l1719 1114  
                   l1831 1798                     l1903 1438                     l1495 0C9C  
                   l1487 0C66                     l1559 0F00                     l1591 1690  
                   l1583 13C8                     l1575 1370                     l1567 1334  
                   l1671 0C06                     l1663 0BD2                     l1647 0A74  
                   l1655 0B66                     l1639 0A56                     l1807 092A  
                   l1743 0680                     l1735 063A                     l1911 15F4  
                   l1729 116C                     l1833 17A0                     l1905 1460  
                   l1593 16B6                     l1497 0CAA                     l1489 0C6A  
                   l1585 13DC                     l1577 1384                     l1569 1342  
                   l1673 0C18                     l1657 0B80                     l1665 0BE0  
                   l1649 0AF6                     l1761 06B2                     l1753 06A6  
                   l1745 068C                     l1737 065E                     l1817 0950  
                   l1841 1548                     l1913 15FC                     l1921 118C  
                   l1851 149A                     l1835 17A2                     l1907 1464  
                   l1691 0F86                     l1683 0F52                     l1499 0CCA  
                   l1579 1398                     l1675 0C24                     l1667 0BF2  
                   l1659 0B9E                     l1819 0974                     l1747 068E  
                   l1771 0718                     l1739 066C                     l1843 156C  
                   l1915 1604                     l1931 11D4                     l1923 1194  
                   l1845 17B4                     l1861 14A8                     l1853 149C  
                   l1829 178E                     l1597 1592                     l1693 0FC0  
                   l1685 0F66                     l1589 1676                     l1677 0C2C  
                   l1669 0C00                     l1781 07A2                     l1773 0738  
                   l1765 06B8                     l1757 06AC                     l1749 06A0  
                   l1837 1534                     l1917 1620                     l1909 15E4  
                   l1933 11E6                     l1941 1228                     l1925 1198  
                   l1847 17AA                     l1871 14BE                     l1863 14AA  
                   l1855 149E                     l1599 1596                     l1695 0FC8  
                   l1679 0C3C                     l1791 081C                     l1783 07B0  
                   l1775 073A                     l1839 153C                     l1943 1230  
                   l1935 11EA                     l1927 11A6                     l1881 14EA  
                   l1873 14C4                     l1865 14BA                     l1857 14A4  
                   l1849 1496                     l1697 0FD0                     l1689 0F6A  
                   l1793 0840                     l1785 07D0                     l1777 075E  
                   l1769 06C4                     l1945 1242                     l1937 1206  
                   l1929 11B8                     l1891 1524                     l1883 14F2  
                   l1875 14D2                     l1859 14A6                     l1699 1004  
                   l1795 0864                     l1779 0794                     l1947 1254  
                   l1939 120E                     l1885 1500                     l1877 14D4  
                   l1893 13F8                     l1797 08AC                     l1789 07DE  
                   ?_pad 0011                     l1887 1506                     l1879 14E4  
                   l1895 1408                     l1889 151C                     l1897 1412  
                   l1899 1424                     l1995 06EA                     l1997 0FEE  
                   STR_1 0612                     STR_2 0634                     STR_3 0623  
                   STR_4 0601                     u1000 09FE                     u1001 09FA  
                   u1010 0A1A                     u1011 0A16                     u1100 0C00  
                   u1020 0A48                     u1101 0BFC                     u1021 0A44  
                   u1110 0C18                     u1030 0A56                     u1111 0C14  
                   u1031 0A52                     u1120 0F86                     u1040 0B80  
                   u1200 07A2                     u1121 0F82                     u1041 0B7C  
                   u1201 079E                     u1130 0FBC                     u1050 0B9E  
                   u1210 081C                     u1131 0FB8                     u1051 0B9A  
                   u1211 0818                     u1300 1458                     u1140 1070  
                   u1060 0BB8                     u1220 0840                     u1141 106C  
                   u1061 0BB4                     u1221 083C                     u1310 1484  
                   u1150 1082                     u1070 0BD2                     u1230 0864  
                   u1151 107E                     u1071 0BCE                     u1231 0860  
                   u1320 1494                     u1080 0BE0                     u1240 0908  
                   u1160 065E                     u1321 1490                     u1081 0BDC  
                   u1241 0904                     u1161 065A                     u1090 0BF2  
                   u1170 072A                     u1330 11A6                     u1307 144E  
                   u1091 0BEE                     u1171 0726                     u1331 11A2  
                   u1180 0738                     u1260 1588                     u1340 1206  
                   u1317 147A                     u1181 0734                     u1261 1584  
                   u1341 1202                     u1270 14E4                     u1190 075E  
                   u1407 14EC                     u1271 14E0                     u1255 1796  
                   u1191 075A                     u1256 1798                     u1280 1408  
                   u1417 14FA                     u1281 1404                     u1290 1424  
                   u1427 150C                     u1291 1420                     u1437 151E  
                   u1357 1218                     u1447 152C                     u1367 125A  
                   u1457 1118                     u1377 179A                     u1387 14B0  
                   u1397 14CA                     abs@a 0013                     _dbuf 0080  
                   _atoi 0F52                     _main 118C                     _dtoa 0988  
                   _prec 0075                     _nout 0071                     pad@i 0018  
                   pad@p 0015                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001A                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3                     start 0000             ___param_bank 000000  
                  ??_abs 0015                    ??_pad 0017          __end_of___aodiv 0DEE  
                  ?_atoi 0008                    ?_main 0001                    ?_dtoa 001C  
        __end_of___aomod 0F52             vfpfcnvrt@fmt 0042                    _PORTD 000F83  
                  _TRISB 000F93                    _TRISD 000F95          __end_of_lcd_cmd 118C  
                  _flags 0077                    _fputc 126A                    _fputs 1632  
        __end_of_isdigit 16EE                    atoi@n 0010                    pad@fp 0011  
                  atoi@s 0008                    _width 0073                    _putch 17BE  
                  dtoa@d 001E                    dtoa@i 003E                    dtoa@n 0036  
                  dtoa@p 0030                    dtoa@s 0034                    dtoa@w 0032  
        __end_of_isspace 15E4          __end_of_set_bit 178C                    tablat 000FF5  
                  status 000FD8          __end_of_sprintf 1632             lcd_write@end 000A  
           lcd_write@col 0007             lcd_write@lin 000B             lcd_write@str 0008  
        __initialization 174A             __end_of_atoi 10A8             __end_of_main 126A  
           __end_of_dtoa 0C66          ??_lcd_send_byte 0006                   ??_atoi 000A  
                 ??_main 006F                   ??_dtoa 0026            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_fputc 0001                   ?_fputs 000A  
                 ?_putch 0001                   _OSCCON 000FD3            vfpfcnvrt@done 0052  
           vfprintf@cfmt 005A         __end_of_lcd_init 1534                ??___aodiv 0011  
              ??___aomod 0011                   ___wmul 1724                   clear_0 1750  
                 clear_1 175C                   isa$std 000001                   pad@buf 0013  
              ??_lcd_cmd 0003                   dtoa@fp 001C                   _strlen 16EE  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A                ??_isdigit 0003             __mediumconst 0000  
              ??_isspace 0003                ??_set_bit 0002                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 1592                ??_sprintf 0062               __accesstop 0080  
__end_of__initialization 1762            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1334            __end_of_fputs 1676            __end_of_putch 17C0  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0080                  ?___wmul 0001                  ?_strlen 0001  
     lcd_send_byte@level 0006                  _OSCTUNE 000F9B                ?_lcd_init 0001  
                __Hparam 0000                  __Lparam 0000        __end_of_config_IO 17B4  
                ___aodiv 0C66                  ___aomod 0DEE        __end_of_lcd_write 1496  
              ?_vfprintf 0054              set_bit@comp 0001             __psmallconst 0600  
                __pcinit 174A                  __ramtop 0600                  __ptext0 118C  
                __ptext1 15E4                  __ptext2 1534                  __ptext3 063A  
                __ptext4 0988                  __ptext5 1334                  __ptext6 16EE  
                __ptext7 1632                  __ptext8 126A                  __ptext9 17BE  
                _lcd_cmd 10A8                  _counter 0079                  _isdigit 16B6  
                _isspace 1592                  _set_bit 176C                  atoi@neg 000E  
                _sprintf 15E4               ??_lcd_init 0005     end_of_initialization 1762  
                fputc@fp 0003            __Lmediumconst 0000                  fputs@fp 000C  
      __end_of_vfpfcnvrt 0988                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 005A  
  __end_of_lcd_send_byte 17AA                  strlen@a 0003                  strlen@s 0001  
              _PORTBbits 000F81                _PORTDbits 000F83                _PORTEbits 000F84  
              _TRISEbits 000F96               lcd_cmd@cmd 0004            ??_config_FOSC 0001  
            vfpfcnvrt@ap 0044              vfpfcnvrt@fp 0040              vfpfcnvrt@ll 004A  
         __end_of___wmul 174A           __end_of_strlen 1724      start_initialization 174A  
            __end_of_abs 16B6              __end_of_pad 13F6              vfprintf@fmt 0056  
    __end_of_config_FOSC 17BE                 ??___wmul 0005                 ??_strlen 0003  
            __pbssCOMRAM 0071         ___aodiv@dividend 0001                 ?___aodiv 0001  
               ?___aomod 0001         ___aodiv@quotient 0013                _bufferLCD 00A0  
              _config_IO 17AA        lcd_send_byte@data 0005                 ?_lcd_cmd 0001  
              _lcd_write 13F6              __smallconst 0600                 ?_isdigit 0001  
               ?_isspace 0001                 ?_set_bit 0001               set_bit@cmd 0002  
               ?_sprintf 005C           ___wmul@product 0005              _config_FOSC 17B4  
              _vfpfcnvrt 063A               ?_config_IO 0001               ?_lcd_write 0007  
      ___wmul@multiplier 0001                lcd_init@i 0006                 __Hrparam 0000  
             vfprintf@ap 0058                 __Lrparam 0000               vfprintf@fp 0054  
             ?_vfpfcnvrt 0040          ___aodiv@divisor 0009          ___aodiv@counter 0011  
             sprintf@fmt 005E                 _dtoa$905 002E                 __ptext10 1676  
               __ptext11 0DEE                 __ptext20 10A8                 __ptext12 0C66  
               __ptext21 176C                 __ptext13 0F52                 __ptext22 17AA  
               __ptext14 1592                 __ptext23 17B4                 __ptext15 16B6  
               __ptext16 1724                 __ptext17 13F6                 __ptext18 178C  
               __ptext19 1496                 _lcd_init 1496                 isa$xinst 000000  
               _vfprintf 1534              ??_config_IO 0001              _isspace$954 0007  
            ??_lcd_write 000A         ___aomod@dividend 0001                 isdigit@c 0001  
              sprintf@ap 0062                 isspace@c 0001          ___aomod@divisor 0009  
            ??_vfpfcnvrt 0046          ___aomod@counter 0011            _lcd_send_byte 178C  
               sprintf@f 0064                 sprintf@s 005C             ___aodiv@sign 0012  
           ?_config_FOSC 0001             ___aomod@sign 0012  
