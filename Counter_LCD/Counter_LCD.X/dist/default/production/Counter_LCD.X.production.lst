

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon May 22 14:27:05 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    37   000000                     
    38                           ; Version 2.40
    39                           ; Generated 17/11/2021 GMT
    40                           ; 
    41                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73   000000                     _PORTDbits	set	3971
    74   000000                     _PORTBbits	set	3969
    75   000000                     _TRISB	set	3987
    76   000000                     _OSCTUNE	set	3995
    77   000000                     _OSCCON	set	4051
    78   000000                     _ADCON1	set	4033
    79   000000                     _TRISD	set	3989
    80   000000                     _PORTD	set	3971
    81   000000                     _TRISEbits	set	3990
    82   000000                     _PORTEbits	set	3972
    83                           
    84                           	psect	smallconst
    85   000600                     __psmallconst:
    86                           	callstack 0
    87   000600  00                 	db	0
    88   000601                     STR_4:
    89   000601  20                 	db	32
    90   000602  20                 	db	32
    91   000603  20                 	db	32
    92   000604  20                 	db	32
    93   000605  20                 	db	32
    94   000606  20                 	db	32
    95   000607  20                 	db	32
    96   000608  20                 	db	32
    97   000609  20                 	db	32
    98   00060A  20                 	db	32
    99   00060B  20                 	db	32
   100   00060C  20                 	db	32
   101   00060D  20                 	db	32
   102   00060E  20                 	db	32
   103   00060F  20                 	db	32
   104   000610  20                 	db	32
   105   000611  00                 	db	0
   106   000612                     STR_1:
   107   000612  20                 	db	32
   108   000613  20                 	db	32
   109   000614  20                 	db	32
   110   000615  20                 	db	32
   111   000616  43                 	db	67	;'C'
   112   000617  4F                 	db	79	;'O'
   113   000618  55                 	db	85	;'U'
   114   000619  4E                 	db	78	;'N'
   115   00061A  54                 	db	84	;'T'
   116   00061B  45                 	db	69	;'E'
   117   00061C  52                 	db	82	;'R'
   118   00061D  3A                 	db	58	;':'
   119   00061E  20                 	db	32
   120   00061F  20                 	db	32
   121   000620  20                 	db	32
   122   000621  20                 	db	32
   123   000622  00                 	db	0
   124   000623                     STR_3:
   125   000623  41                 	db	65	;'A'
   126   000624  55                 	db	85	;'U'
   127   000625  4C                 	db	76	;'L'
   128   000626  41                 	db	65	;'A'
   129   000627  20                 	db	32
   130   000628  31                 	db	49	;'1'
   131   000629  20                 	db	32
   132   00062A  2D                 	db	45
   133   00062B  20                 	db	32
   134   00062C  4C                 	db	76	;'L'
   135   00062D  43                 	db	67	;'C'
   136   00062E  44                 	db	68	;'D'
   137   00062F  3A                 	db	58	;':'
   138   000630  20                 	db	32
   139   000631  20                 	db	32
   140   000632  00                 	db	0
   141   000633                     STR_2:
   142   000633  25                 	db	37
   143   000634  30                 	db	48	;'0'
   144   000635  32                 	db	50	;'2'
   145   000636  64                 	db	100	;'d'
   146   000637  00                 	db	0
   147   000638  00                 	db	0	; dummy byte at the end
   148   000000                     
   149                           ; #config settings
   150                           
   151                           	psect	cinit
   152   0015EA                     __pcinit:
   153                           	callstack 0
   154   0015EA                     start_initialization:
   155                           	callstack 0
   156   0015EA                     __initialization:
   157                           	callstack 0
   158                           
   159                           ; Clear objects allocated to BANK0 (48 bytes)
   160   0015EA  EE00  F080         	lfsr	0,__pbssBANK0
   161   0015EE  0E30               	movlw	48
   162   0015F0                     clear_0:
   163   0015F0  6AEE               	clrf	postinc0,c
   164   0015F2  06E8               	decf	wreg,f,c
   165   0015F4  E1FD               	bnz	clear_0
   166                           
   167                           ; Clear objects allocated to COMRAM (7 bytes)
   168   0015F6  EE00  F071         	lfsr	0,__pbssCOMRAM
   169   0015FA  0E07               	movlw	7
   170   0015FC                     clear_1:
   171   0015FC  6AEE               	clrf	postinc0,c
   172   0015FE  06E8               	decf	wreg,f,c
   173   001600  E1FD               	bnz	clear_1
   174   001602                     end_of_initialization:
   175                           	callstack 0
   176   001602                     __end_of__initialization:
   177                           	callstack 0
   178   001602  0E00               	movlw	low (__Lmediumconst shr (0+16))
   179   001604  6EF8               	movwf	tblptru,c
   180   001606  0100               	movlb	0
   181   001608  EF51  F008         	goto	_main	;jump to C main() function
   182                           
   183                           	psect	bssCOMRAM
   184   000071                     __pbssCOMRAM:
   185                           	callstack 0
   186   000071                     _width:
   187                           	callstack 0
   188   000071                     	ds	2
   189   000073                     _prec:
   190                           	callstack 0
   191   000073                     	ds	2
   192   000075                     _counter:
   193                           	callstack 0
   194   000075                     	ds	2
   195   000077                     _flags:
   196                           	callstack 0
   197   000077                     	ds	1
   198                           
   199                           	psect	bssBANK0
   200   000080                     __pbssBANK0:
   201                           	callstack 0
   202   000080                     _dbuf:
   203                           	callstack 0
   204   000080                     	ds	32
   205   0000A0                     _bufferLCD:
   206                           	callstack 0
   207   0000A0                     	ds	16
   208                           
   209                           	psect	cstackCOMRAM
   210   000001                     __pcstackCOMRAM:
   211                           	callstack 0
   212   000001                     ?_isdigit:
   213                           	callstack 0
   214   000001                     ?_isspace:
   215                           	callstack 0
   216   000001                     ?___wmul:
   217                           	callstack 0
   218   000001                     ?___aodiv:
   219                           	callstack 0
   220   000001                     ?___aomod:
   221                           	callstack 0
   222   000001                     set_bit@comp:
   223                           	callstack 0
   224   000001                     ___wmul@multiplier:
   225                           	callstack 0
   226   000001                     isdigit@c:
   227                           	callstack 0
   228   000001                     isspace@c:
   229                           	callstack 0
   230   000001                     fputc@c:
   231                           	callstack 0
   232   000001                     ___aodiv@dividend:
   233                           	callstack 0
   234   000001                     ___aomod@dividend:
   235                           	callstack 0
   236                           
   237                           ; 8 bytes @ 0x0
   238   000001                     	ds	1
   239   000002                     set_bit@cmd:
   240                           	callstack 0
   241                           
   242                           ; 1 bytes @ 0x1
   243   000002                     	ds	1
   244   000003                     ??_lcd_cmd:
   245   000003                     ??_isdigit:
   246   000003                     ??_isspace:
   247   000003                     ___wmul@multiplicand:
   248                           	callstack 0
   249   000003                     fputc@fp:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0x2
   253   000003                     	ds	1
   254   000004                     lcd_cmd@cmd:
   255                           	callstack 0
   256                           
   257                           ; 1 bytes @ 0x3
   258   000004                     	ds	1
   259   000005                     ??_lcd_init:
   260   000005                     ??_fputc:
   261   000005                     lcd_send_byte@data:
   262                           	callstack 0
   263   000005                     _isspace$953:
   264                           	callstack 0
   265   000005                     ___wmul@product:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x4
   269   000005                     	ds	1
   270   000006                     lcd_init@i:
   271                           	callstack 0
   272   000006                     lcd_send_byte@level:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x5
   276   000006                     	ds	1
   277   000007                     ?_atoi:
   278                           	callstack 0
   279   000007                     lcd_write@col:
   280                           	callstack 0
   281   000007                     atoi@s:
   282                           	callstack 0
   283                           
   284                           ; 2 bytes @ 0x6
   285   000007                     	ds	1
   286   000008                     lcd_write@str:
   287                           	callstack 0
   288                           
   289                           ; 2 bytes @ 0x7
   290   000008                     	ds	1
   291   000009                     ??_atoi:
   292   000009                     ___aodiv@divisor:
   293                           	callstack 0
   294   000009                     ___aomod@divisor:
   295                           	callstack 0
   296                           
   297                           ; 8 bytes @ 0x8
   298   000009                     	ds	1
   299   00000A                     lcd_write@end:
   300                           	callstack 0
   301   00000A                     fputs@s:
   302                           	callstack 0
   303                           
   304                           ; 2 bytes @ 0x9
   305   00000A                     	ds	1
   306   00000B                     lcd_write@lin:
   307                           	callstack 0
   308                           
   309                           ; 1 bytes @ 0xA
   310   00000B                     	ds	1
   311   00000C                     atoi@neg:
   312                           	callstack 0
   313   00000C                     fputs@fp:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0xB
   317   00000C                     	ds	2
   318   00000E                     fputs@c:
   319                           	callstack 0
   320   00000E                     atoi@n:
   321                           	callstack 0
   322                           
   323                           ; 2 bytes @ 0xD
   324   00000E                     	ds	1
   325   00000F                     fputs@i:
   326                           	callstack 0
   327                           
   328                           ; 2 bytes @ 0xE
   329   00000F                     	ds	2
   330   000011                     ___aodiv@counter:
   331                           	callstack 0
   332   000011                     ___aomod@counter:
   333                           	callstack 0
   334   000011                     pad@fp:
   335                           	callstack 0
   336                           
   337                           ; 2 bytes @ 0x10
   338   000011                     	ds	1
   339   000012                     ___aodiv@sign:
   340                           	callstack 0
   341   000012                     ___aomod@sign:
   342                           	callstack 0
   343                           
   344                           ; 1 bytes @ 0x11
   345   000012                     	ds	1
   346   000013                     ?_abs:
   347                           	callstack 0
   348   000013                     pad@buf:
   349                           	callstack 0
   350   000013                     abs@a:
   351                           	callstack 0
   352   000013                     ___aodiv@quotient:
   353                           	callstack 0
   354                           
   355                           ; 8 bytes @ 0x12
   356   000013                     	ds	2
   357   000015                     ??_abs:
   358   000015                     pad@p:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x14
   362   000015                     	ds	2
   363   000017                     ??_pad:
   364                           
   365                           ; 1 bytes @ 0x16
   366   000017                     	ds	1
   367   000018                     pad@i:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x17
   371   000018                     	ds	2
   372   00001A                     pad@w:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x19
   376   00001A                     	ds	2
   377   00001C                     dtoa@fp:
   378                           	callstack 0
   379                           
   380                           ; 2 bytes @ 0x1B
   381   00001C                     	ds	2
   382   00001E                     dtoa@d:
   383                           	callstack 0
   384                           
   385                           ; 8 bytes @ 0x1D
   386   00001E                     	ds	8
   387   000026                     ??_dtoa:
   388                           
   389                           ; 1 bytes @ 0x25
   390   000026                     	ds	8
   391   00002E                     _dtoa$904:
   392                           	callstack 0
   393                           
   394                           ; 2 bytes @ 0x2D
   395   00002E                     	ds	2
   396   000030                     dtoa@p:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x2F
   400   000030                     	ds	2
   401   000032                     dtoa@w:
   402                           	callstack 0
   403                           
   404                           ; 2 bytes @ 0x31
   405   000032                     	ds	2
   406   000034                     dtoa@n:
   407                           	callstack 0
   408                           
   409                           ; 8 bytes @ 0x33
   410   000034                     	ds	8
   411   00003C                     dtoa@i:
   412                           	callstack 0
   413                           
   414                           ; 2 bytes @ 0x3B
   415   00003C                     	ds	2
   416   00003E                     dtoa@s:
   417                           	callstack 0
   418                           
   419                           ; 1 bytes @ 0x3D
   420   00003E                     	ds	1
   421   00003F                     vfpfcnvrt@fp:
   422                           	callstack 0
   423                           
   424                           ; 2 bytes @ 0x3E
   425   00003F                     	ds	2
   426   000041                     vfpfcnvrt@fmt:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x40
   430   000041                     	ds	2
   431   000043                     vfpfcnvrt@ap:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x42
   435   000043                     	ds	2
   436   000045                     ??_vfpfcnvrt:
   437                           
   438                           ; 1 bytes @ 0x44
   439   000045                     	ds	3
   440   000048                     vfpfcnvrt@convarg:
   441                           	callstack 0
   442                           
   443                           ; 8 bytes @ 0x47
   444   000048                     	ds	8
   445   000050                     vfpfcnvrt@done:
   446                           	callstack 0
   447                           
   448                           ; 2 bytes @ 0x4F
   449   000050                     	ds	2
   450   000052                     vfpfcnvrt@cp:
   451                           	callstack 0
   452                           
   453                           ; 2 bytes @ 0x51
   454   000052                     	ds	2
   455   000054                     ?_vfprintf:
   456                           	callstack 0
   457   000054                     vfprintf@fp:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x53
   461   000054                     	ds	2
   462   000056                     vfprintf@fmt:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x55
   466   000056                     	ds	2
   467   000058                     vfprintf@ap:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x57
   471   000058                     	ds	2
   472   00005A                     vfprintf@cfmt:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x59
   476   00005A                     	ds	2
   477   00005C                     ?_sprintf:
   478                           	callstack 0
   479   00005C                     sprintf@s:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x5B
   483   00005C                     	ds	2
   484   00005E                     sprintf@fmt:
   485                           	callstack 0
   486                           
   487                           ; 2 bytes @ 0x5D
   488   00005E                     	ds	4
   489   000062                     sprintf@ap:
   490                           	callstack 0
   491                           
   492                           ; 2 bytes @ 0x61
   493   000062                     	ds	2
   494   000064                     sprintf@f:
   495                           	callstack 0
   496                           
   497                           ; 11 bytes @ 0x63
   498   000064                     	ds	11
   499   00006F                     ??_main:
   500                           
   501                           ; 1 bytes @ 0x6E
   502   00006F                     	ds	2
   503                           
   504 ;;
   505 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   506 ;;
   507 ;; *************** function _main *****************
   508 ;; Defined at:
   509 ;;		line 82 in file "Main_counter.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;		None
   512 ;; Auto vars:     Size  Location     Type
   513 ;;		None
   514 ;; Return value:  Size  Location     Type
   515 ;;                  1    wreg      void 
   516 ;; Registers used:
   517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   518 ;; Tracked objects:
   519 ;;		On entry : 0/0
   520 ;;		On exit  : 0/0
   521 ;;		Unchanged: 0/0
   522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   523 ;;      Params:         0       0       0       0       0       0       0
   524 ;;      Locals:         0       0       0       0       0       0       0
   525 ;;      Temps:          2       0       0       0       0       0       0
   526 ;;      Totals:         2       0       0       0       0       0       0
   527 ;;Total ram usage:        2 bytes
   528 ;; Hardware stack levels required when called: 8
   529 ;; This function calls:
   530 ;;		_config_FOSC
   531 ;;		_config_IO
   532 ;;		_lcd_init
   533 ;;		_lcd_write
   534 ;;		_sprintf
   535 ;; This function is called by:
   536 ;;		Startup code after reset
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           	psect	text0
   541   0010A2                     __ptext0:
   542                           	callstack 0
   543   0010A2                     _main:
   544                           	callstack 23
   545   0010A2                     
   546                           ;Main_counter.c: 84:     config_FOSC();
   547   0010A2  EC2A  F00B         	call	_config_FOSC	;wreg free
   548                           
   549                           ;Main_counter.c: 85:     config_IO();
   550   0010A6  EC25  F00B         	call	_config_IO	;wreg free
   551   0010AA                     
   552                           ;Main_counter.c: 86:     lcd_init();
   553   0010AA  ECCA  F009         	call	_lcd_init	;wreg free
   554   0010AE                     l1817:
   555                           
   556                           ;Main_counter.c: 88:     {;Main_counter.c: 89:         if(PORTBbits.RB0 == 1)
   557   0010AE  A081               	btfss	129,0,c	;volatile
   558   0010B0  EF5C  F008         	goto	u1231
   559   0010B4  EF5E  F008         	goto	u1230
   560   0010B8                     u1231:
   561   0010B8  EF9F  F008         	goto	l1833
   562   0010BC                     u1230:
   563   0010BC                     
   564                           ;Main_counter.c: 90:         {;Main_counter.c: 91:             counter++;
   565   0010BC  4A75               	infsnz	_counter^0,f,c
   566   0010BE  2A76               	incf	(_counter+1)^0,f,c
   567   0010C0                     
   568                           ;Main_counter.c: 92:             lcd_write(1,2,"    COUNTER:    ");
   569   0010C0  0E02               	movlw	2
   570   0010C2  6E07               	movwf	lcd_write@col^0,c
   571   0010C4  0E12               	movlw	low STR_1
   572   0010C6  6E08               	movwf	lcd_write@str^0,c
   573   0010C8  0E06               	movlw	high STR_1
   574   0010CA  6E09               	movwf	(lcd_write@str+1)^0,c
   575   0010CC  0E01               	movlw	1
   576   0010CE  EC7A  F009         	call	_lcd_write
   577   0010D2                     
   578                           ;Main_counter.c: 93:             sprintf(bufferLCD,
   579   0010D2  0EA0               	movlw	low _bufferLCD
   580   0010D4  6E5C               	movwf	sprintf@s^0,c
   581   0010D6  0E00               	movlw	high _bufferLCD
   582   0010D8  6E5D               	movwf	(sprintf@s+1)^0,c
   583   0010DA  0E33               	movlw	low STR_2
   584   0010DC  6E5E               	movwf	sprintf@fmt^0,c
   585   0010DE  0E06               	movlw	high STR_2
   586   0010E0  6E5F               	movwf	(sprintf@fmt+1)^0,c
   587   0010E2  C075  F060         	movff	_counter,?_sprintf+4
   588   0010E6  C076  F061         	movff	_counter+1,?_sprintf+5
   589   0010EA  EC19  F00A         	call	_sprintf	;wreg free
   590   0010EE                     
   591                           ;Main_counter.c: 96:             lcd_write(2,8,bufferLCD);
   592   0010EE  0E08               	movlw	8
   593   0010F0  6E07               	movwf	lcd_write@col^0,c
   594   0010F2  0EA0               	movlw	low _bufferLCD
   595   0010F4  6E08               	movwf	lcd_write@str^0,c
   596   0010F6  0E00               	movlw	high _bufferLCD
   597   0010F8  6E09               	movwf	(lcd_write@str+1)^0,c
   598   0010FA  0E02               	movlw	2
   599   0010FC  EC7A  F009         	call	_lcd_write
   600   001100                     
   601                           ;Main_counter.c: 98:             if(counter >= 15) counter = 0;
   602   001100  BE76               	btfsc	(_counter+1)^0,7,c
   603   001102  EF8C  F008         	goto	u1241
   604   001106  5076               	movf	(_counter+1)^0,w,c
   605   001108  E109               	bnz	u1240
   606   00110A  0E0F               	movlw	15
   607   00110C  5C75               	subwf	_counter^0,w,c
   608   00110E  A0D8               	btfss	status,0,c
   609   001110  EF8C  F008         	goto	u1241
   610   001114  EF8E  F008         	goto	u1240
   611   001118                     u1241:
   612   001118  EF92  F008         	goto	l1831
   613   00111C                     u1240:
   614   00111C  0E00               	movlw	0
   615   00111E  6E76               	movwf	(_counter+1)^0,c
   616   001120  0E00               	movlw	0
   617   001122  6E75               	movwf	_counter^0,c
   618   001124                     l1831:
   619                           
   620                           ;Main_counter.c: 99:             _delay((unsigned long)((1000)*(8000000/4000.0)));
   621   001124  0E0B               	movlw	11
   622   001126  6E70               	movwf	(??_main+1)^0,c
   623   001128  0E26               	movlw	38
   624   00112A  6E6F               	movwf	??_main^0,c
   625   00112C  0E5E               	movlw	94
   626   00112E                     u1257:
   627   00112E  2EE8               	decfsz	wreg,f,c
   628   001130  D7FE               	bra	u1257
   629   001132  2E6F               	decfsz	??_main^0,f,c
   630   001134  D7FC               	bra	u1257
   631   001136  2E70               	decfsz	(??_main+1)^0,f,c
   632   001138  D7FA               	bra	u1257
   633                           
   634                           ;Main_counter.c: 100:         }
   635   00113A  EF57  F008         	goto	l1817
   636   00113E                     l1833:
   637                           
   638                           ;Main_counter.c: 102:         {;Main_counter.c: 103:             counter = 0;
   639   00113E  0E00               	movlw	0
   640   001140  6E76               	movwf	(_counter+1)^0,c
   641   001142  0E00               	movlw	0
   642   001144  6E75               	movwf	_counter^0,c
   643   001146                     
   644                           ;Main_counter.c: 104:             lcd_write(1,3,"AULA 1 - LCD:  ");
   645   001146  0E03               	movlw	3
   646   001148  6E07               	movwf	lcd_write@col^0,c
   647   00114A  0E23               	movlw	low STR_3
   648   00114C  6E08               	movwf	lcd_write@str^0,c
   649   00114E  0E06               	movlw	high STR_3
   650   001150  6E09               	movwf	(lcd_write@str+1)^0,c
   651   001152  0E01               	movlw	1
   652   001154  EC7A  F009         	call	_lcd_write
   653   001158                     
   654                           ;Main_counter.c: 105:             lcd_write(2,1,"                ");
   655   001158  0E01               	movlw	1
   656   00115A  6E07               	movwf	lcd_write@col^0,c
   657   00115C  0E01               	movlw	low STR_4
   658   00115E  6E08               	movwf	lcd_write@str^0,c
   659   001160  0E06               	movlw	high STR_4
   660   001162  6E09               	movwf	(lcd_write@str+1)^0,c
   661   001164  0E02               	movlw	2
   662   001166  EC7A  F009         	call	_lcd_write
   663   00116A                     
   664                           ;Main_counter.c: 106:             _delay((unsigned long)((20)*(8000000/4000.0)));
   665   00116A  0E34               	movlw	52
   666   00116C  6E6F               	movwf	??_main^0,c
   667   00116E  0EF2               	movlw	242
   668   001170                     u1267:
   669   001170  2EE8               	decfsz	wreg,f,c
   670   001172  D7FE               	bra	u1267
   671   001174  2E6F               	decfsz	??_main^0,f,c
   672   001176  D7FC               	bra	u1267
   673   001178  EF57  F008         	goto	l1817
   674   00117C  EF00  F000         	goto	start
   675   001180                     __end_of_main:
   676                           	callstack 0
   677                           
   678 ;; *************** function _sprintf *****************
   679 ;; Defined at:
   680 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;  s               2   91[COMRAM] PTR unsigned char 
   683 ;;		 -> bufferLCD(16), 
   684 ;;  fmt             2   93[COMRAM] PTR const unsigned char 
   685 ;;		 -> STR_2(5), 
   686 ;; Auto vars:     Size  Location     Type
   687 ;;  f              11   99[COMRAM] struct _IO_FILE
   688 ;;  ap              2   97[COMRAM] PTR void [1]
   689 ;;		 -> ?_sprintf(2), 
   690 ;;  ret             2    0        int 
   691 ;; Return value:  Size  Location     Type
   692 ;;                  2   91[COMRAM] int 
   693 ;; Registers used:
   694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : 0/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   700 ;;      Params:         6       0       0       0       0       0       0
   701 ;;      Locals:        13       0       0       0       0       0       0
   702 ;;      Temps:          0       0       0       0       0       0       0
   703 ;;      Totals:        19       0       0       0       0       0       0
   704 ;;Total ram usage:       19 bytes
   705 ;; Hardware stack levels used: 1
   706 ;; Hardware stack levels required when called: 7
   707 ;; This function calls:
   708 ;;		_vfprintf
   709 ;; This function is called by:
   710 ;;		_main
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text1
   715   001432                     __ptext1:
   716                           	callstack 0
   717   001432                     _sprintf:
   718                           	callstack 23
   719   001432  0E60               	movlw	low (?_sprintf+4)
   720   001434  6E62               	movwf	sprintf@ap^0,c
   721   001436  0E00               	movlw	high (?_sprintf+4)
   722   001438  6E63               	movwf	(sprintf@ap+1)^0,c
   723   00143A  C05C  F064         	movff	sprintf@s,sprintf@f
   724   00143E  C05D  F065         	movff	sprintf@s+1,sprintf@f+1
   725   001442  0E00               	movlw	0
   726   001444  6E68               	movwf	(sprintf@f+4)^0,c
   727   001446  0E00               	movlw	0
   728   001448  6E67               	movwf	(sprintf@f+3)^0,c
   729   00144A  0E00               	movlw	0
   730   00144C  6E6E               	movwf	(sprintf@f+10)^0,c
   731   00144E  0E00               	movlw	0
   732   001450  6E6D               	movwf	(sprintf@f+9)^0,c
   733   001452  0E64               	movlw	low sprintf@f
   734   001454  6E54               	movwf	vfprintf@fp^0,c
   735   001456  0E00               	movlw	high sprintf@f
   736   001458  6E55               	movwf	(vfprintf@fp+1)^0,c
   737   00145A  C05E  F056         	movff	sprintf@fmt,vfprintf@fmt
   738   00145E  C05F  F057         	movff	sprintf@fmt+1,vfprintf@fmt+1
   739   001462  0E62               	movlw	low sprintf@ap
   740   001464  6E58               	movwf	vfprintf@ap^0,c
   741   001466  0E00               	movlw	high sprintf@ap
   742   001468  6E59               	movwf	(vfprintf@ap+1)^0,c
   743   00146A  EC40  F00A         	call	_vfprintf	;wreg free
   744   00146E  5067               	movf	(sprintf@f+3)^0,w,c
   745   001470  245C               	addwf	sprintf@s^0,w,c
   746   001472  6ED9               	movwf	fsr2l,c
   747   001474  5068               	movf	(sprintf@f+4)^0,w,c
   748   001476  205D               	addwfc	(sprintf@s+1)^0,w,c
   749   001478  6EDA               	movwf	fsr2h,c
   750   00147A  0E00               	movlw	0
   751   00147C  6EDF               	movwf	indf2,c
   752   00147E  0012               	return		;funcret
   753   001480                     __end_of_sprintf:
   754                           	callstack 0
   755                           
   756 ;; *************** function _vfprintf *****************
   757 ;; Defined at:
   758 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  fp              2   83[COMRAM] PTR struct _IO_FILE
   761 ;;		 -> sprintf@f(11), 
   762 ;;  fmt             2   85[COMRAM] PTR const unsigned char 
   763 ;;		 -> STR_2(5), 
   764 ;;  ap              2   87[COMRAM] PTR PTR void 
   765 ;;		 -> sprintf@ap(2), 
   766 ;; Auto vars:     Size  Location     Type
   767 ;;  cfmt            2   89[COMRAM] PTR unsigned char 
   768 ;;		 -> STR_2(5), 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  2   83[COMRAM] int 
   771 ;; Registers used:
   772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   778 ;;      Params:         6       0       0       0       0       0       0
   779 ;;      Locals:         2       0       0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0       0       0
   781 ;;      Totals:         8       0       0       0       0       0       0
   782 ;;Total ram usage:        8 bytes
   783 ;; Hardware stack levels used: 1
   784 ;; Hardware stack levels required when called: 6
   785 ;; This function calls:
   786 ;;		_vfpfcnvrt
   787 ;; This function is called by:
   788 ;;		_sprintf
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text2
   793   001480                     __ptext2:
   794                           	callstack 0
   795   001480                     _vfprintf:
   796                           	callstack 23
   797   001480                     
   798                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   799   001480  C056  F05A         	movff	vfprintf@fmt,vfprintf@cfmt
   800   001484  C057  F05B         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   801                           
   802                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   803   001488  EF54  F00A         	goto	l1731
   804   00148C                     l1729:
   805                           
   806                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   807   00148C  C054  F03F         	movff	vfprintf@fp,vfpfcnvrt@fp
   808   001490  C055  F040         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   809   001494  0E5A               	movlw	low vfprintf@cfmt
   810   001496  6E41               	movwf	vfpfcnvrt@fmt^0,c
   811   001498  0E00               	movlw	high vfprintf@cfmt
   812   00149A  6E42               	movwf	(vfpfcnvrt@fmt+1)^0,c
   813   00149C  C058  F043         	movff	vfprintf@ap,vfpfcnvrt@ap
   814   0014A0  C059  F044         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   815   0014A4  EC77  F004         	call	_vfpfcnvrt	;wreg free
   816   0014A8                     l1731:
   817                           
   818                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   819   0014A8  C05A  FFF6         	movff	vfprintf@cfmt,tblptrl
   820   0014AC  C05B  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   821   0014B0                     	if	0	;tblptru may be non-zero
   822   0014B0                     	endif
   823   0014B0                     	if	0	;tblptru may be non-zero
   824   0014B0                     	endif
   825   0014B0  0008               	tblrd		*
   826   0014B2  50F5               	movf	tablat,w,c
   827   0014B4  0900               	iorlw	0
   828   0014B6  A4D8               	btfss	status,2,c
   829   0014B8  EF60  F00A         	goto	u1161
   830   0014BC  EF62  F00A         	goto	u1160
   831   0014C0                     u1161:
   832   0014C0  EF46  F00A         	goto	l1729
   833   0014C4                     u1160:
   834   0014C4                     
   835                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   836   0014C4  0E00               	movlw	0
   837   0014C6  6E55               	movwf	(?_vfprintf+1)^0,c
   838   0014C8  0E00               	movlw	0
   839   0014CA  6E54               	movwf	?_vfprintf^0,c
   840   0014CC  0012               	return		;funcret
   841   0014CE                     __end_of_vfprintf:
   842                           	callstack 0
   843                           
   844 ;; *************** function _vfpfcnvrt *****************
   845 ;; Defined at:
   846 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  fp              2   62[COMRAM] PTR struct _IO_FILE
   849 ;;		 -> sprintf@f(11), 
   850 ;;  fmt             2   64[COMRAM] PTR PTR unsigned char 
   851 ;;		 -> vfprintf@cfmt(2), 
   852 ;;  ap              2   66[COMRAM] PTR PTR void 
   853 ;;		 -> sprintf@ap(2), 
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  convarg         8   71[COMRAM] struct .
   856 ;;  cp              2   81[COMRAM] PTR unsigned char 
   857 ;;		 -> STR_2(5), 
   858 ;;  done            2   79[COMRAM] int 
   859 ;;  i               2    0        int 
   860 ;;  c               1    0        unsigned char 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   870 ;;      Params:         6       0       0       0       0       0       0
   871 ;;      Locals:        12       0       0       0       0       0       0
   872 ;;      Temps:          3       0       0       0       0       0       0
   873 ;;      Totals:        21       0       0       0       0       0       0
   874 ;;Total ram usage:       21 bytes
   875 ;; Hardware stack levels used: 1
   876 ;; Hardware stack levels required when called: 5
   877 ;; This function calls:
   878 ;;		_atoi
   879 ;;		_dtoa
   880 ;;		_fputc
   881 ;;		_isdigit
   882 ;; This function is called by:
   883 ;;		_vfprintf
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887                           	psect	text3
   888   0008EE                     __ptext3:
   889                           	callstack 0
   890   0008EE                     _vfpfcnvrt:
   891                           	callstack 23
   892   0008EE                     
   893                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   894   0008EE  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   895   0008F2  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   896   0008F6  CFDE FFF6          	movff	postinc2,tblptrl
   897   0008FA  CFDD FFF7          	movff	postdec2,tblptrh
   898   0008FE                     	if	0	;tblptru may be non-zero
   899   0008FE                     	endif
   900   0008FE                     	if	0	;tblptru may be non-zero
   901   0008FE                     	endif
   902   0008FE  0008               	tblrd		*
   903   000900  50F5               	movf	tablat,w,c
   904   000902  0A25               	xorlw	37
   905   000904  A4D8               	btfss	status,2,c
   906   000906  EF87  F004         	goto	u1081
   907   00090A  EF89  F004         	goto	u1080
   908   00090E                     u1081:
   909   00090E  EFAF  F005         	goto	l1709
   910   000912                     u1080:
   911   000912                     
   912                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   913   000912  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   914   000916  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   915   00091A  2ADE               	incf	postinc2,f,c
   916   00091C  0E00               	movlw	0
   917   00091E  22DD               	addwfc	postdec2,f,c
   918   000920                     
   919                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   920   000920  0E00               	movlw	0
   921   000922  6E72               	movwf	(_width+1)^0,c
   922   000924  0E00               	movlw	0
   923   000926  6E71               	movwf	_width^0,c
   924   000928  C071  F077         	movff	_width,_flags
   925   00092C                     
   926                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   927   00092C  6873               	setf	_prec^0,c
   928   00092E  6874               	setf	(_prec+1)^0,c
   929   000930                     
   930                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   931   000930  0E00               	movlw	0
   932   000932  6E51               	movwf	(vfpfcnvrt@done+1)^0,c
   933   000934  0E00               	movlw	0
   934   000936  6E50               	movwf	vfpfcnvrt@done^0,c
   935                           
   936                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   937   000938  EFC8  F004         	goto	l1675
   938   00093C                     l1665:
   939                           
   940                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   941   00093C  8277               	bsf	_flags^0,1,c
   942   00093E                     
   943                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   944   00093E  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   945   000942  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   946   000946  2ADE               	incf	postinc2,f,c
   947   000948  0E00               	movlw	0
   948   00094A  22DD               	addwfc	postdec2,f,c
   949                           
   950                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   951   00094C  EFC8  F004         	goto	l1675
   952   000950                     l1669:
   953                           
   954                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   955   000950  0E00               	movlw	0
   956   000952  6E51               	movwf	(vfpfcnvrt@done+1)^0,c
   957   000954  0E01               	movlw	1
   958   000956  6E50               	movwf	vfpfcnvrt@done^0,c
   959                           
   960                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   961   000958  EFC8  F004         	goto	l1675
   962   00095C                     l1673:
   963   00095C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   964   000960  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   965   000964  CFDE FFF6          	movff	postinc2,tblptrl
   966   000968  CFDD FFF7          	movff	postdec2,tblptrh
   967   00096C                     	if	0	;tblptru may be non-zero
   968   00096C                     	endif
   969   00096C                     	if	0	;tblptru may be non-zero
   970   00096C                     	endif
   971   00096C  0008               	tblrd		*
   972   00096E  50F5               	movf	tablat,w,c
   973   000970  6E45               	movwf	??_vfpfcnvrt^0,c
   974   000972  6A46               	clrf	(??_vfpfcnvrt+1)^0,c
   975                           
   976                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   977                           ; Switch size 1, requested type "simple"
   978                           ; Number of cases is 1, Range of values is 0 to 0
   979                           ; switch strategies available:
   980                           ; Name         Instructions Cycles
   981                           ; simple_byte            4     3 (average)
   982                           ;	Chosen strategy is simple_byte
   983   000974  5046               	movf	(??_vfpfcnvrt+1)^0,w,c
   984   000976  0A00               	xorlw	0	; case 0
   985   000978  B4D8               	btfsc	status,2,c
   986   00097A  EFC1  F004         	goto	l1887
   987   00097E  EFA8  F004         	goto	l1669
   988   000982                     l1887:
   989                           
   990                           ; Switch size 1, requested type "simple"
   991                           ; Number of cases is 1, Range of values is 48 to 48
   992                           ; switch strategies available:
   993                           ; Name         Instructions Cycles
   994                           ; simple_byte            4     3 (average)
   995                           ;	Chosen strategy is simple_byte
   996   000982  5045               	movf	??_vfpfcnvrt^0,w,c
   997   000984  0A30               	xorlw	48	; case 48
   998   000986  B4D8               	btfsc	status,2,c
   999   000988  EF9E  F004         	goto	l1665
  1000   00098C  EFA8  F004         	goto	l1669
  1001   000990                     l1675:
  1002                           
  1003                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
  1004   000990  5050               	movf	vfpfcnvrt@done^0,w,c
  1005   000992  1051               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1006   000994  B4D8               	btfsc	status,2,c
  1007   000996  EFCF  F004         	goto	u1091
  1008   00099A  EFD1  F004         	goto	u1090
  1009   00099E                     u1091:
  1010   00099E  EFAE  F004         	goto	l1673
  1011   0009A2                     u1090:
  1012   0009A2                     
  1013                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
  1014   0009A2  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1015   0009A6  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1016   0009AA  CFDE FFF6          	movff	postinc2,tblptrl
  1017   0009AE  CFDD FFF7          	movff	postdec2,tblptrh
  1018   0009B2                     	if	0	;tblptru may be non-zero
  1019   0009B2                     	endif
  1020   0009B2                     	if	0	;tblptru may be non-zero
  1021   0009B2                     	endif
  1022   0009B2  0008               	tblrd		*
  1023   0009B4  50F5               	movf	tablat,w,c
  1024   0009B6  0A2A               	xorlw	42
  1025   0009B8  A4D8               	btfss	status,2,c
  1026   0009BA  EFE1  F004         	goto	u1101
  1027   0009BE  EFE3  F004         	goto	u1100
  1028   0009C2                     u1101:
  1029   0009C2  EF0C  F005         	goto	l1685
  1030   0009C6                     u1100:
  1031   0009C6                     
  1032                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
  1033   0009C6  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1034   0009CA  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1035   0009CE  2ADE               	incf	postinc2,f,c
  1036   0009D0  0E00               	movlw	0
  1037   0009D2  22DD               	addwfc	postdec2,f,c
  1038                           
  1039                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1040   0009D4  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1041   0009D8  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1042   0009DC  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1043   0009E0  0E02               	movlw	2
  1044   0009E2  26DE               	addwf	postinc2,f,c
  1045   0009E4  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1046   0009E8  0E00               	movlw	0
  1047   0009EA  22DD               	addwfc	postdec2,f,c
  1048   0009EC  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1049   0009F0  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1050   0009F4  CFDE F071          	movff	postinc2,_width
  1051   0009F8  CFDD F072          	movff	postdec2,_width+1
  1052   0009FC                     
  1053                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  1054   0009FC  BE72               	btfsc	(_width+1)^0,7,c
  1055   0009FE  EF05  F005         	goto	u1110
  1056   000A02  EF03  F005         	goto	u1111
  1057   000A06                     u1111:
  1058   000A06  EF3F  F005         	goto	l1693
  1059   000A0A                     u1110:
  1060   000A0A                     
  1061                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  1062   000A0A  8077               	bsf	_flags^0,0,c
  1063                           
  1064                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  1065   000A0C  6C71               	negf	_width^0,c
  1066   000A0E  1E72               	comf	(_width+1)^0,f,c
  1067   000A10  B0D8               	btfsc	status,0,c
  1068   000A12  2A72               	incf	(_width+1)^0,f,c
  1069   000A14  EF3F  F005         	goto	l1693
  1070   000A18                     l1685:
  1071                           
  1072                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1073   000A18  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1074   000A1C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1075   000A20  CFDE F007          	movff	postinc2,atoi@s
  1076   000A24  CFDD F008          	movff	postdec2,atoi@s+1
  1077   000A28  EC3A  F007         	call	_atoi	;wreg free
  1078   000A2C  C007  F071         	movff	?_atoi,_width
  1079   000A30  C008  F072         	movff	?_atoi+1,_width+1
  1080                           
  1081                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1082   000A34  EF23  F005         	goto	l1691
  1083   000A38                     l1687:
  1084                           
  1085                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1086   000A38  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1087   000A3C  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1088   000A40  2ADE               	incf	postinc2,f,c
  1089   000A42  0E00               	movlw	0
  1090   000A44  22DD               	addwfc	postdec2,f,c
  1091   000A46                     l1691:
  1092   000A46  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1093   000A4A  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1094   000A4E  CFDE FFF6          	movff	postinc2,tblptrl
  1095   000A52  CFDD FFF7          	movff	postdec2,tblptrh
  1096   000A56                     	if	0	;tblptru may be non-zero
  1097   000A56                     	endif
  1098   000A56                     	if	0	;tblptru may be non-zero
  1099   000A56                     	endif
  1100   000A56  0008               	tblrd		*
  1101   000A58  CFF5 F045          	movff	tablat,??_vfpfcnvrt
  1102   000A5C  0ED0               	movlw	208
  1103   000A5E  2445               	addwf	??_vfpfcnvrt^0,w,c
  1104   000A60  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1105   000A62  6A47               	clrf	(??_vfpfcnvrt+2)^0,c
  1106   000A64  0EFF               	movlw	255
  1107   000A66  2247               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1108   000A68  5047               	movf	(??_vfpfcnvrt+2)^0,w,c
  1109   000A6A  E109               	bnz	u1120
  1110   000A6C  0E0A               	movlw	10
  1111   000A6E  5C46               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1112   000A70  A0D8               	btfss	status,0,c
  1113   000A72  EF3D  F005         	goto	u1121
  1114   000A76  EF3F  F005         	goto	u1120
  1115   000A7A                     u1121:
  1116   000A7A  EF1C  F005         	goto	l1687
  1117   000A7E                     u1120:
  1118   000A7E                     l1693:
  1119                           
  1120                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1121   000A7E  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1122   000A82  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1123   000A86  CFDE F052          	movff	postinc2,vfpfcnvrt@cp
  1124   000A8A  CFDD F053          	movff	postdec2,vfpfcnvrt@cp+1
  1125   000A8E                     
  1126                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1127   000A8E  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1128   000A92  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1129   000A96                     	if	0	;tblptru may be non-zero
  1130   000A96                     	endif
  1131   000A96                     	if	0	;tblptru may be non-zero
  1132   000A96                     	endif
  1133   000A96  0008               	tblrd		*
  1134   000A98  50F5               	movf	tablat,w,c
  1135   000A9A  0A64               	xorlw	100
  1136   000A9C  B4D8               	btfsc	status,2,c
  1137   000A9E  EF53  F005         	goto	u1131
  1138   000AA2  EF55  F005         	goto	u1130
  1139   000AA6                     u1131:
  1140   000AA6  EF63  F005         	goto	l1699
  1141   000AAA                     u1130:
  1142   000AAA  C052  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1143   000AAE  C053  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1144   000AB2                     	if	0	;tblptru may be non-zero
  1145   000AB2                     	endif
  1146   000AB2                     	if	0	;tblptru may be non-zero
  1147   000AB2                     	endif
  1148   000AB2  0008               	tblrd		*
  1149   000AB4  50F5               	movf	tablat,w,c
  1150   000AB6  0A69               	xorlw	105
  1151   000AB8  A4D8               	btfss	status,2,c
  1152   000ABA  EF61  F005         	goto	u1141
  1153   000ABE  EF63  F005         	goto	u1140
  1154   000AC2                     u1141:
  1155   000AC2  EFA6  F005         	goto	l1705
  1156   000AC6                     u1140:
  1157   000AC6                     l1699:
  1158                           
  1159                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1160   000AC6  C043  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1161   000ACA  C044  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1162   000ACE  CFDF F045          	movff	indf2,??_vfpfcnvrt
  1163   000AD2  0E02               	movlw	2
  1164   000AD4  26DE               	addwf	postinc2,f,c
  1165   000AD6  CFDF F046          	movff	indf2,??_vfpfcnvrt+1
  1166   000ADA  0E00               	movlw	0
  1167   000ADC  22DD               	addwfc	postdec2,f,c
  1168   000ADE  C045  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1169   000AE2  C046  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1170   000AE6  CFDE F048          	movff	postinc2,vfpfcnvrt@convarg
  1171   000AEA  CFDD F049          	movff	postdec2,vfpfcnvrt@convarg+1
  1172   000AEE  0E00               	movlw	0
  1173   000AF0  BE49               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1174   000AF2  0EFF               	movlw	-1
  1175   000AF4  6E4A               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1176   000AF6  6E4B               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1177   000AF8  6E4C               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1178   000AFA  6E4D               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1179   000AFC  6E4E               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1180   000AFE  6E4F               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1181                           
  1182                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1183   000B00  0E01               	movlw	1
  1184   000B02  2452               	addwf	vfpfcnvrt@cp^0,w,c
  1185   000B04  6E45               	movwf	??_vfpfcnvrt^0,c
  1186   000B06  0E00               	movlw	0
  1187   000B08  2053               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1188   000B0A  6E46               	movwf	(??_vfpfcnvrt+1)^0,c
  1189   000B0C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1190   000B10  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1191   000B14  C045  FFDE         	movff	??_vfpfcnvrt,postinc2
  1192   000B18  C046  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1193   000B1C                     
  1194                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1195   000B1C  C03F  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
  1196   000B20  C040  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1197   000B24  C048  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
  1198   000B28  C049  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1199   000B2C  C04A  F020         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1200   000B30  C04B  F021         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1201   000B34  C04C  F022         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1202   000B38  C04D  F023         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1203   000B3C  C04E  F024         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1204   000B40  C04F  F025         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1205   000B44  EC1D  F003         	call	_dtoa	;wreg free
  1206   000B48  EFC3  F005         	goto	l838
  1207   000B4C                     l1705:
  1208                           
  1209                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1210   000B4C  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1211   000B50  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1212   000B54  2ADE               	incf	postinc2,f,c
  1213   000B56  0E00               	movlw	0
  1214   000B58  22DD               	addwfc	postdec2,f,c
  1215   000B5A  EFC3  F005         	goto	l838
  1216   000B5E                     l1709:
  1217                           
  1218                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1219   000B5E  C041  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1220   000B62  C042  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1221   000B66  CFDE FFF6          	movff	postinc2,tblptrl
  1222   000B6A  CFDD FFF7          	movff	postdec2,tblptrh
  1223   000B6E                     	if	0	;tblptru may be non-zero
  1224   000B6E                     	endif
  1225   000B6E                     	if	0	;tblptru may be non-zero
  1226   000B6E                     	endif
  1227   000B6E  0008               	tblrd		*
  1228   000B70  50F5               	movf	tablat,w,c
  1229   000B72  6E01               	movwf	fputc@c^0,c
  1230   000B74  6A02               	clrf	(fputc@c+1)^0,c
  1231   000B76  C03F  F003         	movff	vfpfcnvrt@fp,fputc@fp
  1232   000B7A  C040  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1233   000B7E  ECC0  F008         	call	_fputc	;wreg free
  1234   000B82  EFA6  F005         	goto	l1705
  1235   000B86                     l838:
  1236   000B86  0012               	return		;funcret
  1237   000B88                     __end_of_vfpfcnvrt:
  1238                           	callstack 0
  1239                           
  1240 ;; *************** function _dtoa *****************
  1241 ;; Defined at:
  1242 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
  1245 ;;		 -> sprintf@f(11), 
  1246 ;;  d               8   29[COMRAM] long long 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  n               8   51[COMRAM] long long 
  1249 ;;  i               2   59[COMRAM] int 
  1250 ;;  w               2   49[COMRAM] int 
  1251 ;;  p               2   47[COMRAM] int 
  1252 ;;  s               1   61[COMRAM] unsigned char 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1262 ;;      Params:        10       0       0       0       0       0       0
  1263 ;;      Locals:        17       0       0       0       0       0       0
  1264 ;;      Temps:          8       0       0       0       0       0       0
  1265 ;;      Totals:        35       0       0       0       0       0       0
  1266 ;;Total ram usage:       35 bytes
  1267 ;; Hardware stack levels used: 1
  1268 ;; Hardware stack levels required when called: 4
  1269 ;; This function calls:
  1270 ;;		___aodiv
  1271 ;;		___aomod
  1272 ;;		_abs
  1273 ;;		_pad
  1274 ;; This function is called by:
  1275 ;;		_vfpfcnvrt
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           	psect	text4
  1280   00063A                     __ptext4:
  1281                           	callstack 0
  1282   00063A                     _dtoa:
  1283                           	callstack 23
  1284   00063A                     
  1285                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1286   00063A  C01E  F034         	movff	dtoa@d,dtoa@n
  1287   00063E  C01F  F035         	movff	dtoa@d+1,dtoa@n+1
  1288   000642  C020  F036         	movff	dtoa@d+2,dtoa@n+2
  1289   000646  C021  F037         	movff	dtoa@d+3,dtoa@n+3
  1290   00064A  C022  F038         	movff	dtoa@d+4,dtoa@n+4
  1291   00064E  C023  F039         	movff	dtoa@d+5,dtoa@n+5
  1292   000652  C024  F03A         	movff	dtoa@d+6,dtoa@n+6
  1293   000656  C025  F03B         	movff	dtoa@d+7,dtoa@n+7
  1294   00065A                     
  1295                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1296   00065A  BE3B               	btfsc	(dtoa@n+7)^0,7,c
  1297   00065C  EF32  F003         	goto	u911
  1298   000660  EF35  F003         	goto	u910
  1299   000664                     u911:
  1300   000664  0E01               	movlw	1
  1301   000666  EF36  F003         	goto	u920
  1302   00066A                     u910:
  1303   00066A  0E00               	movlw	0
  1304   00066C                     u920:
  1305   00066C  6E3E               	movwf	dtoa@s^0,c
  1306   00066E                     
  1307                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1308   00066E  503E               	movf	dtoa@s^0,w,c
  1309   000670  B4D8               	btfsc	status,2,c
  1310   000672  EF3D  F003         	goto	u931
  1311   000676  EF3F  F003         	goto	u930
  1312   00067A                     u931:
  1313   00067A  EF4F  F003         	goto	l1551
  1314   00067E                     u930:
  1315   00067E                     
  1316                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1317   00067E  1E3B               	comf	(dtoa@n+7)^0,f,c
  1318   000680  1E3A               	comf	(dtoa@n+6)^0,f,c
  1319   000682  1E39               	comf	(dtoa@n+5)^0,f,c
  1320   000684  1E38               	comf	(dtoa@n+4)^0,f,c
  1321   000686  1E37               	comf	(dtoa@n+3)^0,f,c
  1322   000688  1E36               	comf	(dtoa@n+2)^0,f,c
  1323   00068A  1E35               	comf	(dtoa@n+1)^0,f,c
  1324   00068C  6C34               	negf	dtoa@n^0,c
  1325   00068E  0E00               	movlw	0
  1326   000690  2235               	addwfc	(dtoa@n+1)^0,f,c
  1327   000692  2236               	addwfc	(dtoa@n+2)^0,f,c
  1328   000694  2237               	addwfc	(dtoa@n+3)^0,f,c
  1329   000696  2238               	addwfc	(dtoa@n+4)^0,f,c
  1330   000698  2239               	addwfc	(dtoa@n+5)^0,f,c
  1331   00069A  223A               	addwfc	(dtoa@n+6)^0,f,c
  1332   00069C  223B               	addwfc	(dtoa@n+7)^0,f,c
  1333   00069E                     l1551:
  1334                           
  1335                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 458:     if (!(pr
      +                          ec < 0)) {
  1336   00069E  BE74               	btfsc	(_prec+1)^0,7,c
  1337   0006A0  EF54  F003         	goto	u941
  1338   0006A4  EF56  F003         	goto	u940
  1339   0006A8                     u941:
  1340   0006A8  EF57  F003         	goto	l1555
  1341   0006AC                     u940:
  1342   0006AC                     
  1343                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 459:         flag
      +                          s &= ~(1 << 1);
  1344   0006AC  9277               	bcf	_flags^0,1,c
  1345   0006AE                     l1555:
  1346                           
  1347                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1348   0006AE  BE74               	btfsc	(_prec+1)^0,7,c
  1349   0006B0  EF64  F003         	goto	u950
  1350   0006B4  5074               	movf	(_prec+1)^0,w,c
  1351   0006B6  E106               	bnz	u951
  1352   0006B8  0473               	decf	_prec^0,w,c
  1353   0006BA  B0D8               	btfsc	status,0,c
  1354   0006BC  EF62  F003         	goto	u951
  1355   0006C0  EF64  F003         	goto	u950
  1356   0006C4                     u951:
  1357   0006C4  EF6A  F003         	goto	l800
  1358   0006C8                     u950:
  1359   0006C8  0E00               	movlw	0
  1360   0006CA  6E31               	movwf	(dtoa@p+1)^0,c
  1361   0006CC  0E01               	movlw	1
  1362   0006CE  6E30               	movwf	dtoa@p^0,c
  1363   0006D0  EF6E  F003         	goto	l802
  1364   0006D4                     l800:
  1365   0006D4  C073  F030         	movff	_prec,dtoa@p
  1366   0006D8  C074  F031         	movff	_prec+1,dtoa@p+1
  1367   0006DC                     l802:
  1368                           
  1369                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1370   0006DC  C071  F032         	movff	_width,dtoa@w
  1371   0006E0  C072  F033         	movff	_width+1,dtoa@w+1
  1372   0006E4                     
  1373                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1374   0006E4  503E               	movf	dtoa@s^0,w,c
  1375   0006E6  B4D8               	btfsc	status,2,c
  1376   0006E8  EF78  F003         	goto	u961
  1377   0006EC  EF7A  F003         	goto	u960
  1378   0006F0                     u961:
  1379   0006F0  EF91  F003         	goto	l803
  1380   0006F4                     u960:
  1381   0006F4                     
  1382                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1383   0006F4  0632               	decf	dtoa@w^0,f,c
  1384   0006F6  A0D8               	btfss	status,0,c
  1385   0006F8  0633               	decf	(dtoa@w+1)^0,f,c
  1386   0006FA                     
  1387                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1388   0006FA  503E               	movf	dtoa@s^0,w,c
  1389   0006FC  A4D8               	btfss	status,2,c
  1390   0006FE  EF83  F003         	goto	u971
  1391   000702  EF85  F003         	goto	u970
  1392   000706                     u971:
  1393   000706  EF8B  F003         	goto	l1567
  1394   00070A                     u970:
  1395   00070A  0E00               	movlw	0
  1396   00070C  6E2F               	movwf	(_dtoa$904+1)^0,c
  1397   00070E  0E2B               	movlw	43
  1398   000710  6E2E               	movwf	_dtoa$904^0,c
  1399   000712  EF8F  F003         	goto	l1569
  1400   000716                     l1567:
  1401   000716  0E00               	movlw	0
  1402   000718  6E2F               	movwf	(_dtoa$904+1)^0,c
  1403   00071A  0E2D               	movlw	45
  1404   00071C  6E2E               	movwf	_dtoa$904^0,c
  1405   00071E                     l1569:
  1406   00071E  C02E  F03E         	movff	_dtoa$904,dtoa@s
  1407   000722                     l803:
  1408                           
  1409                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1410   000722  0E00               	movlw	0
  1411   000724  6E3D               	movwf	(dtoa@i+1)^0,c
  1412   000726  0E1F               	movlw	31
  1413   000728  6E3C               	movwf	dtoa@i^0,c
  1414   00072A                     
  1415                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1416   00072A  0E00               	movlw	0
  1417   00072C  0100               	movlb	0	; () banked
  1418   00072E  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1419                           
  1420                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1421   000730  EF16  F004         	goto	l1583
  1422   000734                     l1573:
  1423                           
  1424                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1425   000734  063C               	decf	dtoa@i^0,f,c
  1426   000736  A0D8               	btfss	status,0,c
  1427   000738  063D               	decf	(dtoa@i+1)^0,f,c
  1428   00073A                     
  1429                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1430   00073A  0E80               	movlw	low _dbuf
  1431   00073C  243C               	addwf	dtoa@i^0,w,c
  1432   00073E  6ED9               	movwf	fsr2l,c
  1433   000740  0E00               	movlw	high _dbuf
  1434   000742  203D               	addwfc	(dtoa@i+1)^0,w,c
  1435   000744  6EDA               	movwf	fsr2h,c
  1436   000746  C034  F001         	movff	dtoa@n,___aomod@dividend
  1437   00074A  C035  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1438   00074E  C036  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1439   000752  C037  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1440   000756  C038  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1441   00075A  C039  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1442   00075E  C03A  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1443   000762  C03B  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1444   000766  0E0A               	movlw	10
  1445   000768  6E09               	movwf	___aomod@divisor^0,c
  1446   00076A  0E00               	movlw	0
  1447   00076C  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1448   00076E  0E00               	movlw	0
  1449   000770  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1450   000772  0E00               	movlw	0
  1451   000774  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1452   000776  0E00               	movlw	0
  1453   000778  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1454   00077A  0E00               	movlw	0
  1455   00077C  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1456   00077E  0E00               	movlw	0
  1457   000780  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1458   000782  0E00               	movlw	0
  1459   000784  6E10               	movwf	(___aomod@divisor+7)^0,c
  1460   000786  EC88  F006         	call	___aomod	;wreg free
  1461   00078A  C001  F026         	movff	?___aomod,??_dtoa
  1462   00078E  C002  F027         	movff	?___aomod+1,??_dtoa+1
  1463   000792  C003  F028         	movff	?___aomod+2,??_dtoa+2
  1464   000796  C004  F029         	movff	?___aomod+3,??_dtoa+3
  1465   00079A  C005  F02A         	movff	?___aomod+4,??_dtoa+4
  1466   00079E  C006  F02B         	movff	?___aomod+5,??_dtoa+5
  1467   0007A2  C007  F02C         	movff	?___aomod+6,??_dtoa+6
  1468   0007A6  C008  F02D         	movff	?___aomod+7,??_dtoa+7
  1469   0007AA  C026  F013         	movff	??_dtoa,abs@a
  1470   0007AE  C027  F014         	movff	??_dtoa+1,abs@a+1
  1471   0007B2  ECAC  F00A         	call	_abs	;wreg free
  1472   0007B6  5013               	movf	?_abs^0,w,c
  1473   0007B8  0F30               	addlw	48
  1474   0007BA  6EDF               	movwf	indf2,c
  1475   0007BC                     
  1476                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1477   0007BC  0630               	decf	dtoa@p^0,f,c
  1478   0007BE  A0D8               	btfss	status,0,c
  1479   0007C0  0631               	decf	(dtoa@p+1)^0,f,c
  1480   0007C2                     
  1481                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1482   0007C2  0632               	decf	dtoa@w^0,f,c
  1483   0007C4  A0D8               	btfss	status,0,c
  1484   0007C6  0633               	decf	(dtoa@w+1)^0,f,c
  1485   0007C8                     
  1486                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1487   0007C8  C034  F001         	movff	dtoa@n,___aodiv@dividend
  1488   0007CC  C035  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1489   0007D0  C036  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1490   0007D4  C037  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1491   0007D8  C038  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1492   0007DC  C039  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1493   0007E0  C03A  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1494   0007E4  C03B  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1495   0007E8  0E0A               	movlw	10
  1496   0007EA  6E09               	movwf	___aodiv@divisor^0,c
  1497   0007EC  0E00               	movlw	0
  1498   0007EE  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1499   0007F0  0E00               	movlw	0
  1500   0007F2  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1501   0007F4  0E00               	movlw	0
  1502   0007F6  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1503   0007F8  0E00               	movlw	0
  1504   0007FA  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1505   0007FC  0E00               	movlw	0
  1506   0007FE  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1507   000800  0E00               	movlw	0
  1508   000802  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1509   000804  0E00               	movlw	0
  1510   000806  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1511   000808  ECC4  F005         	call	___aodiv	;wreg free
  1512   00080C  C001  F034         	movff	?___aodiv,dtoa@n
  1513   000810  C002  F035         	movff	?___aodiv+1,dtoa@n+1
  1514   000814  C003  F036         	movff	?___aodiv+2,dtoa@n+2
  1515   000818  C004  F037         	movff	?___aodiv+3,dtoa@n+3
  1516   00081C  C005  F038         	movff	?___aodiv+4,dtoa@n+4
  1517   000820  C006  F039         	movff	?___aodiv+5,dtoa@n+5
  1518   000824  C007  F03A         	movff	?___aodiv+6,dtoa@n+6
  1519   000828  C008  F03B         	movff	?___aodiv+7,dtoa@n+7
  1520   00082C                     l1583:
  1521                           
  1522                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1523   00082C  BE3D               	btfsc	(dtoa@i+1)^0,7,c
  1524   00082E  EF21  F004         	goto	u981
  1525   000832  503D               	movf	(dtoa@i+1)^0,w,c
  1526   000834  E108               	bnz	u980
  1527   000836  043C               	decf	dtoa@i^0,w,c
  1528   000838  A0D8               	btfss	status,0,c
  1529   00083A  EF21  F004         	goto	u981
  1530   00083E  EF23  F004         	goto	u980
  1531   000842                     u981:
  1532   000842  EF53  F004         	goto	l1593
  1533   000846                     u980:
  1534   000846  5034               	movf	dtoa@n^0,w,c
  1535   000848  1035               	iorwf	(dtoa@n+1)^0,w,c
  1536   00084A  1036               	iorwf	(dtoa@n+2)^0,w,c
  1537   00084C  1037               	iorwf	(dtoa@n+3)^0,w,c
  1538   00084E  1038               	iorwf	(dtoa@n+4)^0,w,c
  1539   000850  1039               	iorwf	(dtoa@n+5)^0,w,c
  1540   000852  103A               	iorwf	(dtoa@n+6)^0,w,c
  1541   000854  103B               	iorwf	(dtoa@n+7)^0,w,c
  1542   000856  A4D8               	btfss	status,2,c
  1543   000858  EF30  F004         	goto	u991
  1544   00085C  EF32  F004         	goto	u990
  1545   000860                     u991:
  1546   000860  EF9A  F003         	goto	l1573
  1547   000864                     u990:
  1548   000864  BE31               	btfsc	(dtoa@p+1)^0,7,c
  1549   000866  EF3F  F004         	goto	u1000
  1550   00086A  5031               	movf	(dtoa@p+1)^0,w,c
  1551   00086C  E106               	bnz	u1001
  1552   00086E  0430               	decf	dtoa@p^0,w,c
  1553   000870  B0D8               	btfsc	status,0,c
  1554   000872  EF3D  F004         	goto	u1001
  1555   000876  EF3F  F004         	goto	u1000
  1556   00087A                     u1001:
  1557   00087A  EF9A  F003         	goto	l1573
  1558   00087E                     u1000:
  1559   00087E  BE33               	btfsc	(dtoa@w+1)^0,7,c
  1560   000880  EF4A  F004         	goto	u1011
  1561   000884  5033               	movf	(dtoa@w+1)^0,w,c
  1562   000886  E108               	bnz	u1010
  1563   000888  0432               	decf	dtoa@w^0,w,c
  1564   00088A  A0D8               	btfss	status,0,c
  1565   00088C  EF4A  F004         	goto	u1011
  1566   000890  EF4C  F004         	goto	u1010
  1567   000894                     u1011:
  1568   000894  EF53  F004         	goto	l1593
  1569   000898                     u1010:
  1570   000898  B277               	btfsc	_flags^0,1,c
  1571   00089A  EF51  F004         	goto	u1021
  1572   00089E  EF53  F004         	goto	u1020
  1573   0008A2                     u1021:
  1574   0008A2  EF9A  F003         	goto	l1573
  1575   0008A6                     u1020:
  1576   0008A6                     l1593:
  1577                           
  1578                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1579   0008A6  503E               	movf	dtoa@s^0,w,c
  1580   0008A8  B4D8               	btfsc	status,2,c
  1581   0008AA  EF59  F004         	goto	u1031
  1582   0008AE  EF5B  F004         	goto	u1030
  1583   0008B2                     u1031:
  1584   0008B2  EF66  F004         	goto	l1599
  1585   0008B6                     u1030:
  1586   0008B6                     
  1587                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1588   0008B6  063C               	decf	dtoa@i^0,f,c
  1589   0008B8  A0D8               	btfss	status,0,c
  1590   0008BA  063D               	decf	(dtoa@i+1)^0,f,c
  1591   0008BC                     
  1592                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1593   0008BC  0E80               	movlw	low _dbuf
  1594   0008BE  243C               	addwf	dtoa@i^0,w,c
  1595   0008C0  6ED9               	movwf	fsr2l,c
  1596   0008C2  0E00               	movlw	high _dbuf
  1597   0008C4  203D               	addwfc	(dtoa@i+1)^0,w,c
  1598   0008C6  6EDA               	movwf	fsr2h,c
  1599   0008C8  C03E  FFDF         	movff	dtoa@s,indf2
  1600   0008CC                     l1599:
  1601                           
  1602                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1603   0008CC  C01C  F011         	movff	dtoa@fp,pad@fp
  1604   0008D0  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1605   0008D4  0E80               	movlw	low _dbuf
  1606   0008D6  243C               	addwf	dtoa@i^0,w,c
  1607   0008D8  6E13               	movwf	pad@buf^0,c
  1608   0008DA  0E00               	movlw	high _dbuf
  1609   0008DC  203D               	addwfc	(dtoa@i+1)^0,w,c
  1610   0008DE  6E14               	movwf	(pad@buf+1)^0,c
  1611   0008E0  C032  F015         	movff	dtoa@w,pad@p
  1612   0008E4  C033  F016         	movff	dtoa@w+1,pad@p+1
  1613   0008E8  EC25  F009         	call	_pad	;wreg free
  1614   0008EC  0012               	return		;funcret
  1615   0008EE                     __end_of_dtoa:
  1616                           	callstack 0
  1617                           
  1618 ;; *************** function _pad *****************
  1619 ;; Defined at:
  1620 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1623 ;;		 -> sprintf@f(11), 
  1624 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1625 ;;		 -> dbuf(32), 
  1626 ;;  p               2   20[COMRAM] int 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  w               2   25[COMRAM] int 
  1629 ;;  i               2   23[COMRAM] int 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1639 ;;      Params:         6       0       0       0       0       0       0
  1640 ;;      Locals:         4       0       0       0       0       0       0
  1641 ;;      Temps:          1       0       0       0       0       0       0
  1642 ;;      Totals:        11       0       0       0       0       0       0
  1643 ;;Total ram usage:       11 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; Hardware stack levels required when called: 3
  1646 ;; This function calls:
  1647 ;;		_fputc
  1648 ;;		_fputs
  1649 ;; This function is called by:
  1650 ;;		_dtoa
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text5
  1655   00124A                     __ptext5:
  1656                           	callstack 0
  1657   00124A                     _pad:
  1658                           	callstack 23
  1659   00124A                     
  1660                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1661   00124A  A077               	btfss	_flags^0,0,c
  1662   00124C  EF2A  F009         	goto	u811
  1663   001250  EF2C  F009         	goto	u810
  1664   001254                     u811:
  1665   001254  EF36  F009         	goto	l1497
  1666   001258                     u810:
  1667   001258                     
  1668                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1669   001258  C013  F00A         	movff	pad@buf,fputs@s
  1670   00125C  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1671   001260  C011  F00C         	movff	pad@fp,fputs@fp
  1672   001264  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1673   001268  EC8A  F00A         	call	_fputs	;wreg free
  1674   00126C                     l1497:
  1675                           
  1676                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1677   00126C  BE16               	btfsc	(pad@p+1)^0,7,c
  1678   00126E  EF3B  F009         	goto	u821
  1679   001272  EF3D  F009         	goto	u820
  1680   001276                     u821:
  1681   001276  EF43  F009         	goto	l1501
  1682   00127A                     u820:
  1683   00127A  C015  F01A         	movff	pad@p,pad@w
  1684   00127E  C016  F01B         	movff	pad@p+1,pad@w+1
  1685   001282  EF47  F009         	goto	l789
  1686   001286                     l1501:
  1687   001286  0E00               	movlw	0
  1688   001288  6E1B               	movwf	(pad@w+1)^0,c
  1689   00128A  0E00               	movlw	0
  1690   00128C  6E1A               	movwf	pad@w^0,c
  1691   00128E                     l789:
  1692                           
  1693                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1694   00128E  0E00               	movlw	0
  1695   001290  6E19               	movwf	(pad@i+1)^0,c
  1696   001292  0E00               	movlw	0
  1697   001294  6E18               	movwf	pad@i^0,c
  1698                           
  1699                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1700   001296  EF59  F009         	goto	l1507
  1701   00129A                     l1503:
  1702                           
  1703                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1704   00129A  0E00               	movlw	0
  1705   00129C  6E02               	movwf	(fputc@c+1)^0,c
  1706   00129E  0E20               	movlw	32
  1707   0012A0  6E01               	movwf	fputc@c^0,c
  1708   0012A2  C011  F003         	movff	pad@fp,fputc@fp
  1709   0012A6  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1710   0012AA  ECC0  F008         	call	_fputc	;wreg free
  1711   0012AE                     
  1712                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1713   0012AE  4A18               	infsnz	pad@i^0,f,c
  1714   0012B0  2A19               	incf	(pad@i+1)^0,f,c
  1715   0012B2                     l1507:
  1716                           
  1717                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1718   0012B2  501A               	movf	pad@w^0,w,c
  1719   0012B4  5C18               	subwf	pad@i^0,w,c
  1720   0012B6  5019               	movf	(pad@i+1)^0,w,c
  1721   0012B8  0A80               	xorlw	128
  1722   0012BA  6E17               	movwf	??_pad^0,c
  1723   0012BC  501B               	movf	(pad@w+1)^0,w,c
  1724   0012BE  0A80               	xorlw	128
  1725   0012C0  5817               	subwfb	??_pad^0,w,c
  1726   0012C2  A0D8               	btfss	status,0,c
  1727   0012C4  EF66  F009         	goto	u831
  1728   0012C8  EF68  F009         	goto	u830
  1729   0012CC                     u831:
  1730   0012CC  EF4D  F009         	goto	l1503
  1731   0012D0                     u830:
  1732   0012D0                     
  1733                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1734   0012D0  B077               	btfsc	_flags^0,0,c
  1735   0012D2  EF6D  F009         	goto	u841
  1736   0012D6  EF6F  F009         	goto	u840
  1737   0012DA                     u841:
  1738   0012DA  EF79  F009         	goto	l794
  1739   0012DE                     u840:
  1740   0012DE                     
  1741                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1742   0012DE  C013  F00A         	movff	pad@buf,fputs@s
  1743   0012E2  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1744   0012E6  C011  F00C         	movff	pad@fp,fputs@fp
  1745   0012EA  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1746   0012EE  EC8A  F00A         	call	_fputs	;wreg free
  1747   0012F2                     l794:
  1748   0012F2  0012               	return		;funcret
  1749   0012F4                     __end_of_pad:
  1750                           	callstack 0
  1751                           
  1752 ;; *************** function _fputs *****************
  1753 ;; Defined at:
  1754 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1757 ;;		 -> dbuf(32), 
  1758 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1759 ;;		 -> sprintf@f(11), 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  i               2   14[COMRAM] int 
  1762 ;;  c               1   13[COMRAM] unsigned char 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;                  2    9[COMRAM] int 
  1765 ;; Registers used:
  1766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1772 ;;      Params:         4       0       0       0       0       0       0
  1773 ;;      Locals:         3       0       0       0       0       0       0
  1774 ;;      Temps:          0       0       0       0       0       0       0
  1775 ;;      Totals:         7       0       0       0       0       0       0
  1776 ;;Total ram usage:        7 bytes
  1777 ;; Hardware stack levels used: 1
  1778 ;; Hardware stack levels required when called: 2
  1779 ;; This function calls:
  1780 ;;		_fputc
  1781 ;; This function is called by:
  1782 ;;		_pad
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786                           	psect	text6
  1787   001514                     __ptext6:
  1788                           	callstack 0
  1789   001514                     _fputs:
  1790                           	callstack 23
  1791   001514  0E00               	movlw	0
  1792   001516  6E10               	movwf	(fputs@i+1)^0,c
  1793   001518  0E00               	movlw	0
  1794   00151A  6E0F               	movwf	fputs@i^0,c
  1795   00151C  EF9B  F00A         	goto	l1405
  1796   001520                     l1401:
  1797   001520  C00E  F001         	movff	fputs@c,fputc@c
  1798   001524  6A02               	clrf	(fputc@c+1)^0,c
  1799   001526  C00C  F003         	movff	fputs@fp,fputc@fp
  1800   00152A  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1801   00152E  ECC0  F008         	call	_fputc	;wreg free
  1802   001532  4A0F               	infsnz	fputs@i^0,f,c
  1803   001534  2A10               	incf	(fputs@i+1)^0,f,c
  1804   001536                     l1405:
  1805   001536  500F               	movf	fputs@i^0,w,c
  1806   001538  240A               	addwf	fputs@s^0,w,c
  1807   00153A  6ED9               	movwf	fsr2l,c
  1808   00153C  5010               	movf	(fputs@i+1)^0,w,c
  1809   00153E  200B               	addwfc	(fputs@s+1)^0,w,c
  1810   001540  6EDA               	movwf	fsr2h,c
  1811   001542  50DF               	movf	indf2,w,c
  1812   001544  6E0E               	movwf	fputs@c^0,c
  1813   001546  500E               	movf	fputs@c^0,w,c
  1814   001548  A4D8               	btfss	status,2,c
  1815   00154A  EFA9  F00A         	goto	u671
  1816   00154E  EFAB  F00A         	goto	u670
  1817   001552                     u671:
  1818   001552  EF90  F00A         	goto	l1401
  1819   001556                     u670:
  1820   001556  0012               	return		;funcret
  1821   001558                     __end_of_fputs:
  1822                           	callstack 0
  1823                           
  1824 ;; *************** function _fputc *****************
  1825 ;; Defined at:
  1826 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  c               2    0[COMRAM] int 
  1829 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1830 ;;		 -> sprintf@f(11), 
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;		None
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  2    0[COMRAM] int 
  1835 ;; Registers used:
  1836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1842 ;;      Params:         4       0       0       0       0       0       0
  1843 ;;      Locals:         0       0       0       0       0       0       0
  1844 ;;      Temps:          5       0       0       0       0       0       0
  1845 ;;      Totals:         9       0       0       0       0       0       0
  1846 ;;Total ram usage:        9 bytes
  1847 ;; Hardware stack levels used: 1
  1848 ;; Hardware stack levels required when called: 1
  1849 ;; This function calls:
  1850 ;;		_putch
  1851 ;; This function is called by:
  1852 ;;		_pad
  1853 ;;		_vfpfcnvrt
  1854 ;;		_fputs
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text7
  1859   001180                     __ptext7:
  1860                           	callstack 0
  1861   001180                     _fputc:
  1862                           	callstack 26
  1863   001180  5003               	movf	fputc@fp^0,w,c
  1864   001182  1004               	iorwf	(fputc@fp+1)^0,w,c
  1865   001184  B4D8               	btfsc	status,2,c
  1866   001186  EFC7  F008         	goto	u631
  1867   00118A  EFC9  F008         	goto	u630
  1868   00118E                     u631:
  1869   00118E  EFD2  F008         	goto	l1389
  1870   001192                     u630:
  1871   001192  5003               	movf	fputc@fp^0,w,c
  1872   001194  1004               	iorwf	(fputc@fp+1)^0,w,c
  1873   001196  A4D8               	btfss	status,2,c
  1874   001198  EFD0  F008         	goto	u641
  1875   00119C  EFD2  F008         	goto	u640
  1876   0011A0                     u641:
  1877   0011A0  EFD7  F008         	goto	l1391
  1878   0011A4                     u640:
  1879   0011A4                     l1389:
  1880   0011A4  5001               	movf	fputc@c^0,w,c
  1881   0011A6  EC2F  F00B         	call	_putch
  1882   0011AA  EF24  F009         	goto	l902
  1883   0011AE                     l1391:
  1884   0011AE  EE20 F009          	lfsr	2,9
  1885   0011B2  5003               	movf	fputc@fp^0,w,c
  1886   0011B4  26D9               	addwf	fsr2l,f,c
  1887   0011B6  5004               	movf	(fputc@fp+1)^0,w,c
  1888   0011B8  22DA               	addwfc	fsr2h,f,c
  1889   0011BA  50DE               	movf	postinc2,w,c
  1890   0011BC  10DE               	iorwf	postinc2,w,c
  1891   0011BE  B4D8               	btfsc	status,2,c
  1892   0011C0  EFE4  F008         	goto	u651
  1893   0011C4  EFE6  F008         	goto	u650
  1894   0011C8                     u651:
  1895   0011C8  EF01  F009         	goto	l1395
  1896   0011CC                     u650:
  1897   0011CC  EE20 F009          	lfsr	2,9
  1898   0011D0  5003               	movf	fputc@fp^0,w,c
  1899   0011D2  26D9               	addwf	fsr2l,f,c
  1900   0011D4  5004               	movf	(fputc@fp+1)^0,w,c
  1901   0011D6  22DA               	addwfc	fsr2h,f,c
  1902   0011D8  EE10 F003          	lfsr	1,3
  1903   0011DC  5003               	movf	fputc@fp^0,w,c
  1904   0011DE  26E1               	addwf	fsr1l,f,c
  1905   0011E0  5004               	movf	(fputc@fp+1)^0,w,c
  1906   0011E2  22E2               	addwfc	fsr1h,f,c
  1907   0011E4  50DE               	movf	postinc2,w,c
  1908   0011E6  5CE6               	subwf	postinc1,w,c
  1909   0011E8  50E6               	movf	postinc1,w,c
  1910   0011EA  0A80               	xorlw	128
  1911   0011EC  6E09               	movwf	(??_fputc+4)^0,c
  1912   0011EE  50DE               	movf	postinc2,w,c
  1913   0011F0  0A80               	xorlw	128
  1914   0011F2  5809               	subwfb	(??_fputc+4)^0,w,c
  1915   0011F4  B0D8               	btfsc	status,0,c
  1916   0011F6  EFFF  F008         	goto	u661
  1917   0011FA  EF01  F009         	goto	u660
  1918   0011FE                     u661:
  1919   0011FE  EF24  F009         	goto	l902
  1920   001202                     u660:
  1921   001202                     l1395:
  1922   001202  EE20 F003          	lfsr	2,3
  1923   001206  5003               	movf	fputc@fp^0,w,c
  1924   001208  26D9               	addwf	fsr2l,f,c
  1925   00120A  5004               	movf	(fputc@fp+1)^0,w,c
  1926   00120C  22DA               	addwfc	fsr2h,f,c
  1927   00120E  CFDE F005          	movff	postinc2,??_fputc
  1928   001212  CFDD F006          	movff	postdec2,??_fputc+1
  1929   001216  C003  FFD9         	movff	fputc@fp,fsr2l
  1930   00121A  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1931   00121E  CFDE F007          	movff	postinc2,??_fputc+2
  1932   001222  CFDD F008          	movff	postdec2,??_fputc+3
  1933   001226  5005               	movf	??_fputc^0,w,c
  1934   001228  2407               	addwf	(??_fputc+2)^0,w,c
  1935   00122A  6ED9               	movwf	fsr2l,c
  1936   00122C  5006               	movf	(??_fputc+1)^0,w,c
  1937   00122E  2008               	addwfc	(??_fputc+3)^0,w,c
  1938   001230  6EDA               	movwf	fsr2h,c
  1939   001232  C001  FFDF         	movff	fputc@c,indf2
  1940   001236  EE20 F003          	lfsr	2,3
  1941   00123A  5003               	movf	fputc@fp^0,w,c
  1942   00123C  26D9               	addwf	fsr2l,f,c
  1943   00123E  5004               	movf	(fputc@fp+1)^0,w,c
  1944   001240  22DA               	addwfc	fsr2h,f,c
  1945   001242  2ADE               	incf	postinc2,f,c
  1946   001244  0E00               	movlw	0
  1947   001246  22DD               	addwfc	postdec2,f,c
  1948   001248                     l902:
  1949   001248  0012               	return		;funcret
  1950   00124A                     __end_of_fputc:
  1951                           	callstack 0
  1952                           
  1953 ;; *************** function _putch *****************
  1954 ;; Defined at:
  1955 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;  c               1    wreg     unsigned char 
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  c               1    0[COMRAM] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1969 ;;      Params:         0       0       0       0       0       0       0
  1970 ;;      Locals:         0       0       0       0       0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0
  1972 ;;      Totals:         0       0       0       0       0       0       0
  1973 ;;Total ram usage:        0 bytes
  1974 ;; Hardware stack levels used: 1
  1975 ;; This function calls:
  1976 ;;		Nothing
  1977 ;; This function is called by:
  1978 ;;		_fputc
  1979 ;; This function uses a non-reentrant model
  1980 ;;
  1981                           
  1982                           	psect	text8
  1983   00165E                     __ptext8:
  1984                           	callstack 0
  1985   00165E                     _putch:
  1986                           	callstack 26
  1987   00165E  0012               	return		;funcret
  1988   001660                     __end_of_putch:
  1989                           	callstack 0
  1990                           
  1991 ;; *************** function _abs *****************
  1992 ;; Defined at:
  1993 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  a               2   18[COMRAM] int 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;		None
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  2   18[COMRAM] int 
  2000 ;; Registers used:
  2001 ;;		wreg, status,2, status,0
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2007 ;;      Params:         2       0       0       0       0       0       0
  2008 ;;      Locals:         0       0       0       0       0       0       0
  2009 ;;      Temps:          2       0       0       0       0       0       0
  2010 ;;      Totals:         4       0       0       0       0       0       0
  2011 ;;Total ram usage:        4 bytes
  2012 ;; Hardware stack levels used: 1
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_dtoa
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text9
  2021   001558                     __ptext9:
  2022                           	callstack 0
  2023   001558                     _abs:
  2024                           	callstack 26
  2025   001558  BE14               	btfsc	(abs@a+1)^0,7,c
  2026   00155A  EFB9  F00A         	goto	u850
  2027   00155E  5014               	movf	(abs@a+1)^0,w,c
  2028   001560  E106               	bnz	u851
  2029   001562  0413               	decf	abs@a^0,w,c
  2030   001564  B0D8               	btfsc	status,0,c
  2031   001566  EFB7  F00A         	goto	u851
  2032   00156A  EFB9  F00A         	goto	u850
  2033   00156E                     u851:
  2034   00156E  EFC7  F00A         	goto	l848
  2035   001572                     u850:
  2036   001572  C013  F015         	movff	abs@a,??_abs
  2037   001576  C014  F016         	movff	abs@a+1,??_abs+1
  2038   00157A  1E15               	comf	??_abs^0,f,c
  2039   00157C  1E16               	comf	(??_abs+1)^0,f,c
  2040   00157E  4A15               	infsnz	??_abs^0,f,c
  2041   001580  2A16               	incf	(??_abs+1)^0,f,c
  2042   001582  C015  F013         	movff	??_abs,?_abs
  2043   001586  C016  F014         	movff	??_abs+1,?_abs+1
  2044   00158A  EFCB  F00A         	goto	l851
  2045   00158E                     l848:
  2046   00158E  C013  F013         	movff	abs@a,?_abs
  2047   001592  C014  F014         	movff	abs@a+1,?_abs+1
  2048   001596                     l851:
  2049   001596  0012               	return		;funcret
  2050   001598                     __end_of_abs:
  2051                           	callstack 0
  2052                           
  2053 ;; *************** function ___aomod *****************
  2054 ;; Defined at:
  2055 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  dividend        8    0[COMRAM] long long 
  2058 ;;  divisor         8    8[COMRAM] long long 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  sign            1   17[COMRAM] unsigned char 
  2061 ;;  counter         1   16[COMRAM] unsigned char 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  8    0[COMRAM] long long 
  2064 ;; Registers used:
  2065 ;;		wreg, status,2, status,0
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2071 ;;      Params:        16       0       0       0       0       0       0
  2072 ;;      Locals:         2       0       0       0       0       0       0
  2073 ;;      Temps:          0       0       0       0       0       0       0
  2074 ;;      Totals:        18       0       0       0       0       0       0
  2075 ;;Total ram usage:       18 bytes
  2076 ;; Hardware stack levels used: 1
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_dtoa
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text10
  2085   000D10                     __ptext10:
  2086                           	callstack 0
  2087   000D10                     ___aomod:
  2088                           	callstack 26
  2089   000D10  0E00               	movlw	0
  2090   000D12  6E12               	movwf	___aomod@sign^0,c
  2091   000D14  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  2092   000D16  EF91  F006         	goto	u750
  2093   000D1A  EF8F  F006         	goto	u751
  2094   000D1E                     u751:
  2095   000D1E  EFA3  F006         	goto	l1465
  2096   000D22                     u750:
  2097   000D22  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2098   000D24  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2099   000D26  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2100   000D28  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2101   000D2A  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2102   000D2C  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2103   000D2E  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2104   000D30  6C01               	negf	___aomod@dividend^0,c
  2105   000D32  0E00               	movlw	0
  2106   000D34  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2107   000D36  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2108   000D38  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2109   000D3A  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2110   000D3C  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2111   000D3E  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2112   000D40  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2113   000D42  0E01               	movlw	1
  2114   000D44  6E12               	movwf	___aomod@sign^0,c
  2115   000D46                     l1465:
  2116   000D46  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2117   000D48  EFAA  F006         	goto	u760
  2118   000D4C  EFA8  F006         	goto	u761
  2119   000D50                     u761:
  2120   000D50  EFBA  F006         	goto	l1469
  2121   000D54                     u760:
  2122   000D54  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2123   000D56  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2124   000D58  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2125   000D5A  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2126   000D5C  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2127   000D5E  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2128   000D60  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2129   000D62  6C09               	negf	___aomod@divisor^0,c
  2130   000D64  0E00               	movlw	0
  2131   000D66  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2132   000D68  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2133   000D6A  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2134   000D6C  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2135   000D6E  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2136   000D70  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2137   000D72  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2138   000D74                     l1469:
  2139   000D74  5009               	movf	___aomod@divisor^0,w,c
  2140   000D76  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2141   000D78  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2142   000D7A  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2143   000D7C  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2144   000D7E  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2145   000D80  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2146   000D82  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2147   000D84  B4D8               	btfsc	status,2,c
  2148   000D86  EFC7  F006         	goto	u771
  2149   000D8A  EFC9  F006         	goto	u770
  2150   000D8E                     u771:
  2151   000D8E  EF11  F007         	goto	l1485
  2152   000D92                     u770:
  2153   000D92  0E01               	movlw	1
  2154   000D94  6E11               	movwf	___aomod@counter^0,c
  2155   000D96  EFD7  F006         	goto	l1475
  2156   000D9A                     l1473:
  2157   000D9A  90D8               	bcf	status,0,c
  2158   000D9C  3609               	rlcf	___aomod@divisor^0,f,c
  2159   000D9E  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2160   000DA0  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2161   000DA2  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2162   000DA4  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2163   000DA6  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2164   000DA8  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2165   000DAA  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2166   000DAC  2A11               	incf	___aomod@counter^0,f,c
  2167   000DAE                     l1475:
  2168   000DAE  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2169   000DB0  EFDC  F006         	goto	u781
  2170   000DB4  EFDE  F006         	goto	u780
  2171   000DB8                     u781:
  2172   000DB8  EFCD  F006         	goto	l1473
  2173   000DBC                     u780:
  2174   000DBC                     l1477:
  2175   000DBC  5009               	movf	___aomod@divisor^0,w,c
  2176   000DBE  5C01               	subwf	___aomod@dividend^0,w,c
  2177   000DC0  500A               	movf	(___aomod@divisor+1)^0,w,c
  2178   000DC2  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2179   000DC4  500B               	movf	(___aomod@divisor+2)^0,w,c
  2180   000DC6  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2181   000DC8  500C               	movf	(___aomod@divisor+3)^0,w,c
  2182   000DCA  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2183   000DCC  500D               	movf	(___aomod@divisor+4)^0,w,c
  2184   000DCE  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2185   000DD0  500E               	movf	(___aomod@divisor+5)^0,w,c
  2186   000DD2  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2187   000DD4  500F               	movf	(___aomod@divisor+6)^0,w,c
  2188   000DD6  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2189   000DD8  5010               	movf	(___aomod@divisor+7)^0,w,c
  2190   000DDA  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2191   000DDC  A0D8               	btfss	status,0,c
  2192   000DDE  EFF3  F006         	goto	u791
  2193   000DE2  EFF5  F006         	goto	u790
  2194   000DE6                     u791:
  2195   000DE6  EF05  F007         	goto	l1481
  2196   000DEA                     u790:
  2197   000DEA  5009               	movf	___aomod@divisor^0,w,c
  2198   000DEC  5E01               	subwf	___aomod@dividend^0,f,c
  2199   000DEE  500A               	movf	(___aomod@divisor+1)^0,w,c
  2200   000DF0  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2201   000DF2  500B               	movf	(___aomod@divisor+2)^0,w,c
  2202   000DF4  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2203   000DF6  500C               	movf	(___aomod@divisor+3)^0,w,c
  2204   000DF8  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2205   000DFA  500D               	movf	(___aomod@divisor+4)^0,w,c
  2206   000DFC  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2207   000DFE  500E               	movf	(___aomod@divisor+5)^0,w,c
  2208   000E00  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2209   000E02  500F               	movf	(___aomod@divisor+6)^0,w,c
  2210   000E04  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2211   000E06  5010               	movf	(___aomod@divisor+7)^0,w,c
  2212   000E08  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2213   000E0A                     l1481:
  2214   000E0A  90D8               	bcf	status,0,c
  2215   000E0C  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2216   000E0E  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2217   000E10  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2218   000E12  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2219   000E14  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2220   000E16  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2221   000E18  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2222   000E1A  3209               	rrcf	___aomod@divisor^0,f,c
  2223   000E1C  2E11               	decfsz	___aomod@counter^0,f,c
  2224   000E1E  EFDE  F006         	goto	l1477
  2225   000E22                     l1485:
  2226   000E22  5012               	movf	___aomod@sign^0,w,c
  2227   000E24  B4D8               	btfsc	status,2,c
  2228   000E26  EF17  F007         	goto	u801
  2229   000E2A  EF19  F007         	goto	u800
  2230   000E2E                     u801:
  2231   000E2E  EF29  F007         	goto	l1489
  2232   000E32                     u800:
  2233   000E32  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2234   000E34  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2235   000E36  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2236   000E38  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2237   000E3A  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2238   000E3C  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2239   000E3E  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2240   000E40  6C01               	negf	___aomod@dividend^0,c
  2241   000E42  0E00               	movlw	0
  2242   000E44  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2243   000E46  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2244   000E48  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2245   000E4A  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2246   000E4C  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2247   000E4E  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2248   000E50  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2249   000E52                     l1489:
  2250   000E52  C001  F001         	movff	___aomod@dividend,?___aomod
  2251   000E56  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2252   000E5A  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2253   000E5E  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2254   000E62  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2255   000E66  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2256   000E6A  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2257   000E6E  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2258   000E72  0012               	return		;funcret
  2259   000E74                     __end_of___aomod:
  2260                           	callstack 0
  2261                           
  2262 ;; *************** function ___aodiv *****************
  2263 ;; Defined at:
  2264 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  dividend        8    0[COMRAM] long long 
  2267 ;;  divisor         8    8[COMRAM] long long 
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  quotient        8   18[COMRAM] long long 
  2270 ;;  sign            1   17[COMRAM] unsigned char 
  2271 ;;  counter         1   16[COMRAM] unsigned char 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  8    0[COMRAM] long long 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2281 ;;      Params:        16       0       0       0       0       0       0
  2282 ;;      Locals:        10       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0
  2284 ;;      Totals:        26       0       0       0       0       0       0
  2285 ;;Total ram usage:       26 bytes
  2286 ;; Hardware stack levels used: 1
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_dtoa
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text11
  2295   000B88                     __ptext11:
  2296                           	callstack 0
  2297   000B88                     ___aodiv:
  2298                           	callstack 26
  2299   000B88  0E00               	movlw	0
  2300   000B8A  6E12               	movwf	___aodiv@sign^0,c
  2301   000B8C  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2302   000B8E  EFCD  F005         	goto	u680
  2303   000B92  EFCB  F005         	goto	u681
  2304   000B96                     u681:
  2305   000B96  EFDF  F005         	goto	l1421
  2306   000B9A                     u680:
  2307   000B9A  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2308   000B9C  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2309   000B9E  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2310   000BA0  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2311   000BA2  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2312   000BA4  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2313   000BA6  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2314   000BA8  6C09               	negf	___aodiv@divisor^0,c
  2315   000BAA  0E00               	movlw	0
  2316   000BAC  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2317   000BAE  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2318   000BB0  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2319   000BB2  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2320   000BB4  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2321   000BB6  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2322   000BB8  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2323   000BBA  0E01               	movlw	1
  2324   000BBC  6E12               	movwf	___aodiv@sign^0,c
  2325   000BBE                     l1421:
  2326   000BBE  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2327   000BC0  EFE6  F005         	goto	u690
  2328   000BC4  EFE4  F005         	goto	u691
  2329   000BC8                     u691:
  2330   000BC8  EFF8  F005         	goto	l1427
  2331   000BCC                     u690:
  2332   000BCC  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2333   000BCE  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2334   000BD0  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2335   000BD2  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2336   000BD4  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2337   000BD6  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2338   000BD8  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2339   000BDA  6C01               	negf	___aodiv@dividend^0,c
  2340   000BDC  0E00               	movlw	0
  2341   000BDE  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2342   000BE0  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2343   000BE2  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2344   000BE4  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2345   000BE6  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2346   000BE8  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2347   000BEA  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2348   000BEC  0E01               	movlw	1
  2349   000BEE  1A12               	xorwf	___aodiv@sign^0,f,c
  2350   000BF0                     l1427:
  2351   000BF0  EE20  F013         	lfsr	2,___aodiv@quotient
  2352   000BF4  0E07               	movlw	7
  2353   000BF6                     u701:
  2354   000BF6  6ADE               	clrf	postinc2,c
  2355   000BF8  06E8               	decf	wreg,f,c
  2356   000BFA  E2FD               	bc	u701
  2357   000BFC  5009               	movf	___aodiv@divisor^0,w,c
  2358   000BFE  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2359   000C00  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2360   000C02  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2361   000C04  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2362   000C06  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2363   000C08  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2364   000C0A  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2365   000C0C  B4D8               	btfsc	status,2,c
  2366   000C0E  EF0B  F006         	goto	u711
  2367   000C12  EF0D  F006         	goto	u710
  2368   000C16                     u711:
  2369   000C16  EF5F  F006         	goto	l1449
  2370   000C1A                     u710:
  2371   000C1A  0E01               	movlw	1
  2372   000C1C  6E11               	movwf	___aodiv@counter^0,c
  2373   000C1E  EF1B  F006         	goto	l1435
  2374   000C22                     l1433:
  2375   000C22  90D8               	bcf	status,0,c
  2376   000C24  3609               	rlcf	___aodiv@divisor^0,f,c
  2377   000C26  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2378   000C28  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2379   000C2A  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2380   000C2C  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2381   000C2E  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2382   000C30  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2383   000C32  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2384   000C34  2A11               	incf	___aodiv@counter^0,f,c
  2385   000C36                     l1435:
  2386   000C36  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2387   000C38  EF20  F006         	goto	u721
  2388   000C3C  EF22  F006         	goto	u720
  2389   000C40                     u721:
  2390   000C40  EF11  F006         	goto	l1433
  2391   000C44                     u720:
  2392   000C44                     l1437:
  2393   000C44  90D8               	bcf	status,0,c
  2394   000C46  3613               	rlcf	___aodiv@quotient^0,f,c
  2395   000C48  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2396   000C4A  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2397   000C4C  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2398   000C4E  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2399   000C50  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2400   000C52  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2401   000C54  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2402   000C56  5009               	movf	___aodiv@divisor^0,w,c
  2403   000C58  5C01               	subwf	___aodiv@dividend^0,w,c
  2404   000C5A  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2405   000C5C  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2406   000C5E  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2407   000C60  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2408   000C62  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2409   000C64  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2410   000C66  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2411   000C68  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2412   000C6A  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2413   000C6C  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2414   000C6E  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2415   000C70  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2416   000C72  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2417   000C74  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2418   000C76  A0D8               	btfss	status,0,c
  2419   000C78  EF40  F006         	goto	u731
  2420   000C7C  EF42  F006         	goto	u730
  2421   000C80                     u731:
  2422   000C80  EF53  F006         	goto	l1445
  2423   000C84                     u730:
  2424   000C84  5009               	movf	___aodiv@divisor^0,w,c
  2425   000C86  5E01               	subwf	___aodiv@dividend^0,f,c
  2426   000C88  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2427   000C8A  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2428   000C8C  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2429   000C8E  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2430   000C90  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2431   000C92  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2432   000C94  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2433   000C96  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2434   000C98  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2435   000C9A  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2436   000C9C  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2437   000C9E  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2438   000CA0  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2439   000CA2  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2440   000CA4  8013               	bsf	___aodiv@quotient^0,0,c
  2441   000CA6                     l1445:
  2442   000CA6  90D8               	bcf	status,0,c
  2443   000CA8  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2444   000CAA  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2445   000CAC  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2446   000CAE  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2447   000CB0  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2448   000CB2  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2449   000CB4  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2450   000CB6  3209               	rrcf	___aodiv@divisor^0,f,c
  2451   000CB8  2E11               	decfsz	___aodiv@counter^0,f,c
  2452   000CBA  EF22  F006         	goto	l1437
  2453   000CBE                     l1449:
  2454   000CBE  5012               	movf	___aodiv@sign^0,w,c
  2455   000CC0  B4D8               	btfsc	status,2,c
  2456   000CC2  EF65  F006         	goto	u741
  2457   000CC6  EF67  F006         	goto	u740
  2458   000CCA                     u741:
  2459   000CCA  EF77  F006         	goto	l1453
  2460   000CCE                     u740:
  2461   000CCE  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2462   000CD0  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2463   000CD2  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2464   000CD4  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2465   000CD6  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2466   000CD8  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2467   000CDA  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2468   000CDC  6C13               	negf	___aodiv@quotient^0,c
  2469   000CDE  0E00               	movlw	0
  2470   000CE0  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2471   000CE2  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2472   000CE4  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2473   000CE6  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2474   000CE8  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2475   000CEA  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2476   000CEC  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2477   000CEE                     l1453:
  2478   000CEE  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2479   000CF2  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2480   000CF6  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2481   000CFA  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2482   000CFE  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2483   000D02  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2484   000D06  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2485   000D0A  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2486   000D0E  0012               	return		;funcret
  2487   000D10                     __end_of___aodiv:
  2488                           	callstack 0
  2489                           
  2490 ;; *************** function _atoi *****************
  2491 ;; Defined at:
  2492 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2493 ;; Parameters:    Size  Location     Type
  2494 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2495 ;;		 -> STR_2(5), 
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;  n               2   13[COMRAM] int 
  2498 ;;  neg             2   11[COMRAM] int 
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  2    6[COMRAM] int 
  2501 ;; Registers used:
  2502 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2508 ;;      Params:         2       0       0       0       0       0       0
  2509 ;;      Locals:         4       0       0       0       0       0       0
  2510 ;;      Temps:          3       0       0       0       0       0       0
  2511 ;;      Totals:         9       0       0       0       0       0       0
  2512 ;;Total ram usage:        9 bytes
  2513 ;; Hardware stack levels used: 1
  2514 ;; Hardware stack levels required when called: 1
  2515 ;; This function calls:
  2516 ;;		___wmul
  2517 ;;		_isdigit
  2518 ;;		_isspace
  2519 ;; This function is called by:
  2520 ;;		_vfpfcnvrt
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text12
  2525   000E74                     __ptext12:
  2526                           	callstack 0
  2527   000E74                     _atoi:
  2528                           	callstack 26
  2529   000E74  0E00               	movlw	0
  2530   000E76  6E0F               	movwf	(atoi@n+1)^0,c
  2531   000E78  0E00               	movlw	0
  2532   000E7A  6E0E               	movwf	atoi@n^0,c
  2533   000E7C  0E00               	movlw	0
  2534   000E7E  6E0D               	movwf	(atoi@neg+1)^0,c
  2535   000E80  0E00               	movlw	0
  2536   000E82  6E0C               	movwf	atoi@neg^0,c
  2537   000E84  EF46  F007         	goto	l1609
  2538   000E88                     l1605:
  2539   000E88  4A07               	infsnz	atoi@s^0,f,c
  2540   000E8A  2A08               	incf	(atoi@s+1)^0,f,c
  2541   000E8C                     l1609:
  2542   000E8C  C007  FFF6         	movff	atoi@s,tblptrl
  2543   000E90  C008  FFF7         	movff	atoi@s+1,tblptrh
  2544   000E94                     	if	0	;tblptru may be non-zero
  2545   000E94                     	endif
  2546   000E94                     	if	0	;tblptru may be non-zero
  2547   000E94                     	endif
  2548   000E94  0008               	tblrd		*
  2549   000E96  50F5               	movf	tablat,w,c
  2550   000E98  0A20               	xorlw	32
  2551   000E9A  B4D8               	btfsc	status,2,c
  2552   000E9C  EF52  F007         	goto	u1041
  2553   000EA0  EF54  F007         	goto	u1040
  2554   000EA4                     u1041:
  2555   000EA4  EF44  F007         	goto	l1605
  2556   000EA8                     u1040:
  2557   000EA8  C007  FFF6         	movff	atoi@s,tblptrl
  2558   000EAC  C008  FFF7         	movff	atoi@s+1,tblptrh
  2559   000EB0                     	if	0	;tblptru may be non-zero
  2560   000EB0                     	endif
  2561   000EB0                     	if	0	;tblptru may be non-zero
  2562   000EB0                     	endif
  2563   000EB0  0008               	tblrd		*
  2564   000EB2  CFF5 F009          	movff	tablat,??_atoi
  2565   000EB6  0EF7               	movlw	247
  2566   000EB8  2409               	addwf	??_atoi^0,w,c
  2567   000EBA  6E0A               	movwf	(??_atoi+1)^0,c
  2568   000EBC  6A0B               	clrf	(??_atoi+2)^0,c
  2569   000EBE  0EFF               	movlw	255
  2570   000EC0  220B               	addwfc	(??_atoi+2)^0,f,c
  2571   000EC2  500B               	movf	(??_atoi+2)^0,w,c
  2572   000EC4  E109               	bnz	u1050
  2573   000EC6  0E05               	movlw	5
  2574   000EC8  5C0A               	subwf	(??_atoi+1)^0,w,c
  2575   000ECA  A0D8               	btfss	status,0,c
  2576   000ECC  EF6A  F007         	goto	u1051
  2577   000ED0  EF6C  F007         	goto	u1050
  2578   000ED4                     u1051:
  2579   000ED4  EF44  F007         	goto	l1605
  2580   000ED8                     u1050:
  2581   000ED8  EF76  F007         	goto	l1617
  2582   000EDC                     l1613:
  2583   000EDC  0E00               	movlw	0
  2584   000EDE  6E0D               	movwf	(atoi@neg+1)^0,c
  2585   000EE0  0E01               	movlw	1
  2586   000EE2  6E0C               	movwf	atoi@neg^0,c
  2587   000EE4                     l1615:
  2588   000EE4  4A07               	infsnz	atoi@s^0,f,c
  2589   000EE6  2A08               	incf	(atoi@s+1)^0,f,c
  2590   000EE8  EFAB  F007         	goto	l1625
  2591   000EEC                     l1617:
  2592   000EEC  C007  FFF6         	movff	atoi@s,tblptrl
  2593   000EF0  C008  FFF7         	movff	atoi@s+1,tblptrh
  2594   000EF4                     	if	0	;tblptru may be non-zero
  2595   000EF4                     	endif
  2596   000EF4                     	if	0	;tblptru may be non-zero
  2597   000EF4                     	endif
  2598   000EF4  0008               	tblrd		*
  2599   000EF6  50F5               	movf	tablat,w,c
  2600   000EF8  6E09               	movwf	??_atoi^0,c
  2601   000EFA  6A0A               	clrf	(??_atoi+1)^0,c
  2602                           
  2603                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2604                           ; Switch size 1, requested type "simple"
  2605                           ; Number of cases is 1, Range of values is 0 to 0
  2606                           ; switch strategies available:
  2607                           ; Name         Instructions Cycles
  2608                           ; simple_byte            4     3 (average)
  2609                           ;	Chosen strategy is simple_byte
  2610   000EFC  500A               	movf	(??_atoi+1)^0,w,c
  2611   000EFE  0A00               	xorlw	0	; case 0
  2612   000F00  B4D8               	btfsc	status,2,c
  2613   000F02  EF85  F007         	goto	l1889
  2614   000F06  EFAB  F007         	goto	l1625
  2615   000F0A                     l1889:
  2616                           
  2617                           ; Switch size 1, requested type "simple"
  2618                           ; Number of cases is 2, Range of values is 43 to 45
  2619                           ; switch strategies available:
  2620                           ; Name         Instructions Cycles
  2621                           ; simple_byte            7     4 (average)
  2622                           ;	Chosen strategy is simple_byte
  2623   000F0A  5009               	movf	??_atoi^0,w,c
  2624   000F0C  0A2B               	xorlw	43	; case 43
  2625   000F0E  B4D8               	btfsc	status,2,c
  2626   000F10  EF72  F007         	goto	l1615
  2627   000F14  0A06               	xorlw	6	; case 45
  2628   000F16  B4D8               	btfsc	status,2,c
  2629   000F18  EF6E  F007         	goto	l1613
  2630   000F1C  EFAB  F007         	goto	l1625
  2631   000F20                     l1619:
  2632   000F20  C00E  F001         	movff	atoi@n,___wmul@multiplier
  2633   000F24  C00F  F002         	movff	atoi@n+1,___wmul@multiplier+1
  2634   000F28  0E00               	movlw	0
  2635   000F2A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2636   000F2C  0E0A               	movlw	10
  2637   000F2E  6E03               	movwf	___wmul@multiplicand^0,c
  2638   000F30  ECE2  F00A         	call	___wmul	;wreg free
  2639   000F34  C007  FFF6         	movff	atoi@s,tblptrl
  2640   000F38  C008  FFF7         	movff	atoi@s+1,tblptrh
  2641   000F3C                     	if	0	;tblptru may be non-zero
  2642   000F3C                     	endif
  2643   000F3C                     	if	0	;tblptru may be non-zero
  2644   000F3C                     	endif
  2645   000F3C  0008               	tblrd		*
  2646   000F3E  50F5               	movf	tablat,w,c
  2647   000F40  5E01               	subwf	?___wmul^0,f,c
  2648   000F42  0E00               	movlw	0
  2649   000F44  5A02               	subwfb	(?___wmul+1)^0,f,c
  2650   000F46  0E30               	movlw	48
  2651   000F48  2401               	addwf	?___wmul^0,w,c
  2652   000F4A  6E0E               	movwf	atoi@n^0,c
  2653   000F4C  0E00               	movlw	0
  2654   000F4E  2002               	addwfc	(?___wmul+1)^0,w,c
  2655   000F50  6E0F               	movwf	(atoi@n+1)^0,c
  2656   000F52  EF72  F007         	goto	l1615
  2657   000F56                     l1625:
  2658   000F56  C007  FFF6         	movff	atoi@s,tblptrl
  2659   000F5A  C008  FFF7         	movff	atoi@s+1,tblptrh
  2660   000F5E                     	if	0	;tblptru may be non-zero
  2661   000F5E                     	endif
  2662   000F5E                     	if	0	;tblptru may be non-zero
  2663   000F5E                     	endif
  2664   000F5E  0008               	tblrd		*
  2665   000F60  CFF5 F009          	movff	tablat,??_atoi
  2666   000F64  0ED0               	movlw	208
  2667   000F66  2409               	addwf	??_atoi^0,w,c
  2668   000F68  6E0A               	movwf	(??_atoi+1)^0,c
  2669   000F6A  6A0B               	clrf	(??_atoi+2)^0,c
  2670   000F6C  0EFF               	movlw	255
  2671   000F6E  220B               	addwfc	(??_atoi+2)^0,f,c
  2672   000F70  500B               	movf	(??_atoi+2)^0,w,c
  2673   000F72  E109               	bnz	u1060
  2674   000F74  0E0A               	movlw	10
  2675   000F76  5C0A               	subwf	(??_atoi+1)^0,w,c
  2676   000F78  A0D8               	btfss	status,0,c
  2677   000F7A  EFC1  F007         	goto	u1061
  2678   000F7E  EFC3  F007         	goto	u1060
  2679   000F82                     u1061:
  2680   000F82  EF90  F007         	goto	l1619
  2681   000F86                     u1060:
  2682   000F86  500C               	movf	atoi@neg^0,w,c
  2683   000F88  100D               	iorwf	(atoi@neg+1)^0,w,c
  2684   000F8A  A4D8               	btfss	status,2,c
  2685   000F8C  EFCA  F007         	goto	u1071
  2686   000F90  EFCC  F007         	goto	u1070
  2687   000F94                     u1071:
  2688   000F94  EFDA  F007         	goto	l873
  2689   000F98                     u1070:
  2690   000F98  C00E  F009         	movff	atoi@n,??_atoi
  2691   000F9C  C00F  F00A         	movff	atoi@n+1,??_atoi+1
  2692   000FA0  1E09               	comf	??_atoi^0,f,c
  2693   000FA2  1E0A               	comf	(??_atoi+1)^0,f,c
  2694   000FA4  4A09               	infsnz	??_atoi^0,f,c
  2695   000FA6  2A0A               	incf	(??_atoi+1)^0,f,c
  2696   000FA8  C009  F007         	movff	??_atoi,?_atoi
  2697   000FAC  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2698   000FB0  EFDE  F007         	goto	l876
  2699   000FB4                     l873:
  2700   000FB4  C00E  F007         	movff	atoi@n,?_atoi
  2701   000FB8  C00F  F008         	movff	atoi@n+1,?_atoi+1
  2702   000FBC                     l876:
  2703   000FBC  0012               	return		;funcret
  2704   000FBE                     __end_of_atoi:
  2705                           	callstack 0
  2706                           
  2707 ;; *************** function _isspace *****************
  2708 ;; Defined at:
  2709 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  c               2    0[COMRAM] int 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  2    0[COMRAM] int 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2723 ;;      Params:         2       0       0       0       0       0       0
  2724 ;;      Locals:         1       0       0       0       0       0       0
  2725 ;;      Temps:          2       0       0       0       0       0       0
  2726 ;;      Totals:         5       0       0       0       0       0       0
  2727 ;;Total ram usage:        5 bytes
  2728 ;; Hardware stack levels used: 1
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_atoi
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text13
  2737   0014CE                     __ptext13:
  2738                           	callstack 0
  2739   0014CE                     _isspace:
  2740                           	callstack 26
  2741   0014CE  0E01               	movlw	1
  2742   0014D0  6E05               	movwf	_isspace$953^0,c
  2743   0014D2  0E20               	movlw	32
  2744   0014D4  1801               	xorwf	isspace@c^0,w,c
  2745   0014D6  1002               	iorwf	(isspace@c+1)^0,w,c
  2746   0014D8  B4D8               	btfsc	status,2,c
  2747   0014DA  EF71  F00A         	goto	u881
  2748   0014DE  EF73  F00A         	goto	u880
  2749   0014E2                     u881:
  2750   0014E2  EF86  F00A         	goto	l1527
  2751   0014E6                     u880:
  2752   0014E6  0EF7               	movlw	247
  2753   0014E8  2401               	addwf	isspace@c^0,w,c
  2754   0014EA  6E03               	movwf	??_isspace^0,c
  2755   0014EC  0EFF               	movlw	255
  2756   0014EE  2002               	addwfc	(isspace@c+1)^0,w,c
  2757   0014F0  6E04               	movwf	(??_isspace+1)^0,c
  2758   0014F2  5004               	movf	(??_isspace+1)^0,w,c
  2759   0014F4  E109               	bnz	u890
  2760   0014F6  0E05               	movlw	5
  2761   0014F8  5C03               	subwf	??_isspace^0,w,c
  2762   0014FA  A0D8               	btfss	status,0,c
  2763   0014FC  EF82  F00A         	goto	u891
  2764   001500  EF84  F00A         	goto	u890
  2765   001504                     u891:
  2766   001504  EF86  F00A         	goto	l1527
  2767   001508                     u890:
  2768   001508  0E00               	movlw	0
  2769   00150A  6E05               	movwf	_isspace$953^0,c
  2770   00150C                     l1527:
  2771   00150C  C005  F001         	movff	_isspace$953,?_isspace
  2772   001510  6A02               	clrf	(?_isspace+1)^0,c
  2773   001512  0012               	return		;funcret
  2774   001514                     __end_of_isspace:
  2775                           	callstack 0
  2776                           
  2777 ;; *************** function _isdigit *****************
  2778 ;; Defined at:
  2779 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  c               2    0[COMRAM] int 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;		None
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  2    0[COMRAM] int 
  2786 ;; Registers used:
  2787 ;;		wreg, status,2, status,0
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2793 ;;      Params:         2       0       0       0       0       0       0
  2794 ;;      Locals:         0       0       0       0       0       0       0
  2795 ;;      Temps:          2       0       0       0       0       0       0
  2796 ;;      Totals:         4       0       0       0       0       0       0
  2797 ;;Total ram usage:        4 bytes
  2798 ;; Hardware stack levels used: 1
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_vfpfcnvrt
  2803 ;;		_atoi
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           	psect	text14
  2808   001598                     __ptext14:
  2809                           	callstack 0
  2810   001598                     _isdigit:
  2811                           	callstack 27
  2812   001598  0ED0               	movlw	208
  2813   00159A  2401               	addwf	isdigit@c^0,w,c
  2814   00159C  6E03               	movwf	??_isdigit^0,c
  2815   00159E  0EFF               	movlw	255
  2816   0015A0  2002               	addwfc	(isdigit@c+1)^0,w,c
  2817   0015A2  6E04               	movwf	(??_isdigit+1)^0,c
  2818   0015A4  5004               	movf	(??_isdigit+1)^0,w,c
  2819   0015A6  E10A               	bnz	u860
  2820   0015A8  0E0A               	movlw	10
  2821   0015AA  5C03               	subwf	??_isdigit^0,w,c
  2822   0015AC  A0D8               	btfss	status,0,c
  2823   0015AE  EFDB  F00A         	goto	u861
  2824   0015B2  EFDE  F00A         	goto	u860
  2825   0015B6                     u861:
  2826   0015B6  0E01               	movlw	1
  2827   0015B8  EFDF  F00A         	goto	u870
  2828   0015BC                     u860:
  2829   0015BC  0E00               	movlw	0
  2830   0015BE                     u870:
  2831   0015BE  6E01               	movwf	?_isdigit^0,c
  2832   0015C0  6A02               	clrf	(?_isdigit+1)^0,c
  2833   0015C2  0012               	return		;funcret
  2834   0015C4                     __end_of_isdigit:
  2835                           	callstack 0
  2836                           
  2837 ;; *************** function ___wmul *****************
  2838 ;; Defined at:
  2839 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;  multiplier      2    0[COMRAM] unsigned int 
  2842 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  product         2    4[COMRAM] unsigned int 
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  2    0[COMRAM] unsigned int 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0, prodl, prodh
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2854 ;;      Params:         4       0       0       0       0       0       0
  2855 ;;      Locals:         2       0       0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0
  2857 ;;      Totals:         6       0       0       0       0       0       0
  2858 ;;Total ram usage:        6 bytes
  2859 ;; Hardware stack levels used: 1
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_atoi
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text15
  2868   0015C4                     __ptext15:
  2869                           	callstack 0
  2870   0015C4                     ___wmul:
  2871                           	callstack 26
  2872   0015C4  5001               	movf	___wmul@multiplier^0,w,c
  2873   0015C6  0203               	mulwf	___wmul@multiplicand^0,c
  2874   0015C8  CFF3 F005          	movff	prodl,___wmul@product
  2875   0015CC  CFF4 F006          	movff	prodh,___wmul@product+1
  2876   0015D0  5001               	movf	___wmul@multiplier^0,w,c
  2877   0015D2  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  2878   0015D4  50F3               	movf	243,w,c
  2879   0015D6  2606               	addwf	(___wmul@product+1)^0,f,c
  2880   0015D8  5002               	movf	(___wmul@multiplier+1)^0,w,c
  2881   0015DA  0203               	mulwf	___wmul@multiplicand^0,c
  2882   0015DC  50F3               	movf	243,w,c
  2883   0015DE  2606               	addwf	(___wmul@product+1)^0,f,c
  2884   0015E0  C005  F001         	movff	___wmul@product,?___wmul
  2885   0015E4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2886   0015E8  0012               	return		;funcret
  2887   0015EA                     __end_of___wmul:
  2888                           	callstack 0
  2889                           
  2890 ;; *************** function _lcd_write *****************
  2891 ;; Defined at:
  2892 ;;		line 79 in file "LCD4b_EXSTO.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  lin             1    wreg     unsigned char 
  2895 ;;  col             1    6[COMRAM] unsigned char 
  2896 ;;  str             2    7[COMRAM] PTR unsigned char 
  2897 ;;		 -> STR_4(17), STR_3(16), bufferLCD(16), STR_1(17), 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  lin             1   10[COMRAM] unsigned char 
  2900 ;;  end             1    9[COMRAM] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  1    wreg      void 
  2903 ;; Registers used:
  2904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2910 ;;      Params:         3       0       0       0       0       0       0
  2911 ;;      Locals:         2       0       0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0
  2913 ;;      Totals:         5       0       0       0       0       0       0
  2914 ;;Total ram usage:        5 bytes
  2915 ;; Hardware stack levels used: 1
  2916 ;; Hardware stack levels required when called: 3
  2917 ;; This function calls:
  2918 ;;		_lcd_send_byte
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text16
  2925   0012F4                     __ptext16:
  2926                           	callstack 0
  2927   0012F4                     _lcd_write:
  2928                           	callstack 27
  2929                           
  2930                           ;incstack = 0
  2931                           ;lcd_write@lin stored from wreg
  2932   0012F4  6E0B               	movwf	lcd_write@lin^0,c
  2933   0012F6                     
  2934                           ;LCD4b_EXSTO.c: 79: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 80: {;L
      +                          CD4b_EXSTO.c: 81:     char end;;LCD4b_EXSTO.c: 83:     if(lin == 1)
  2935   0012F6  040B               	decf	lcd_write@lin^0,w,c
  2936   0012F8  A4D8               	btfss	status,2,c
  2937   0012FA  EF81  F009         	goto	u1181
  2938   0012FE  EF83  F009         	goto	u1180
  2939   001302                     u1181:
  2940   001302  EF88  F009         	goto	l1789
  2941   001306                     u1180:
  2942   001306                     
  2943                           ;LCD4b_EXSTO.c: 84:     {;LCD4b_EXSTO.c: 85:         end = col + 0X80 - 1;
  2944   001306  5007               	movf	lcd_write@col^0,w,c
  2945   001308  0F7F               	addlw	127
  2946   00130A  6E0A               	movwf	lcd_write@end^0,c
  2947                           
  2948                           ;LCD4b_EXSTO.c: 86:     }
  2949   00130C  EF94  F009         	goto	l1793
  2950   001310                     l1789:
  2951   001310  0E02               	movlw	2
  2952   001312  180B               	xorwf	lcd_write@lin^0,w,c
  2953   001314  A4D8               	btfss	status,2,c
  2954   001316  EF8F  F009         	goto	u1191
  2955   00131A  EF91  F009         	goto	u1190
  2956   00131E                     u1191:
  2957   00131E  EF94  F009         	goto	l1793
  2958   001322                     u1190:
  2959   001322                     
  2960                           ;LCD4b_EXSTO.c: 88:     {;LCD4b_EXSTO.c: 89:         end = col + 0xC0 - 1;
  2961   001322  5007               	movf	lcd_write@col^0,w,c
  2962   001324  0FBF               	addlw	191
  2963   001326  6E0A               	movwf	lcd_write@end^0,c
  2964   001328                     l1793:
  2965                           
  2966                           ;LCD4b_EXSTO.c: 91:     lcd_send_byte(0,end);
  2967   001328  C00A  F005         	movff	lcd_write@end,lcd_send_byte@data
  2968   00132C  0E00               	movlw	0
  2969   00132E  EC16  F00B         	call	_lcd_send_byte
  2970                           
  2971                           ;LCD4b_EXSTO.c: 93:     while(*str)
  2972   001332  EFB1  F009         	goto	l1799
  2973   001336                     l1795:
  2974                           
  2975                           ;LCD4b_EXSTO.c: 94:     {;LCD4b_EXSTO.c: 95:         lcd_send_byte(1,*str);
  2976   001336  C008  FFF6         	movff	lcd_write@str,tblptrl
  2977   00133A  C009  FFF7         	movff	lcd_write@str+1,tblptrh
  2978   00133E  6AF8               	clrf	tblptru,c
  2979   001340  0E05               	movlw	(high __ramtop+-1)
  2980   001342  64F7               	cpfsgt	tblptrh,c
  2981   001344  D003               	bra	u1207
  2982   001346  0008               	tblrd		*
  2983   001348  50F5               	movf	tablat,w,c
  2984   00134A  D005               	bra	u1200
  2985   00134C                     u1207:
  2986   00134C  CFF6 FFE1          	movff	tblptrl,fsr1l
  2987   001350  CFF7 FFE2          	movff	tblptrh,fsr1h
  2988   001354  50E7               	movf	indf1,w,c
  2989   001356                     u1200:
  2990   001356  6E05               	movwf	lcd_send_byte@data^0,c
  2991   001358  0E01               	movlw	1
  2992   00135A  EC16  F00B         	call	_lcd_send_byte
  2993   00135E                     
  2994                           ;LCD4b_EXSTO.c: 96:         str++;
  2995   00135E  4A08               	infsnz	lcd_write@str^0,f,c
  2996   001360  2A09               	incf	(lcd_write@str+1)^0,f,c
  2997   001362                     l1799:
  2998                           
  2999                           ;LCD4b_EXSTO.c: 93:     while(*str)
  3000   001362  C008  FFF6         	movff	lcd_write@str,tblptrl
  3001   001366  C009  FFF7         	movff	lcd_write@str+1,tblptrh
  3002   00136A  6AF8               	clrf	tblptru,c
  3003   00136C  0E05               	movlw	(high __ramtop+-1)
  3004   00136E  64F7               	cpfsgt	tblptrh,c
  3005   001370  D003               	bra	u1217
  3006   001372  0008               	tblrd		*
  3007   001374  50F5               	movf	tablat,w,c
  3008   001376  D005               	bra	u1210
  3009   001378                     u1217:
  3010   001378  CFF6 FFE1          	movff	tblptrl,fsr1l
  3011   00137C  CFF7 FFE2          	movff	tblptrh,fsr1h
  3012   001380  50E7               	movf	indf1,w,c
  3013   001382                     u1210:
  3014   001382  0900               	iorlw	0
  3015   001384  A4D8               	btfss	status,2,c
  3016   001386  EFC7  F009         	goto	u1221
  3017   00138A  EFC9  F009         	goto	u1220
  3018   00138E                     u1221:
  3019   00138E  EF9B  F009         	goto	l1795
  3020   001392                     u1220:
  3021   001392  0012               	return		;funcret
  3022   001394                     __end_of_lcd_write:
  3023                           	callstack 0
  3024                           
  3025 ;; *************** function _lcd_send_byte *****************
  3026 ;; Defined at:
  3027 ;;		line 63 in file "LCD4b_EXSTO.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  level           1    wreg     unsigned char 
  3030 ;;  data            1    4[COMRAM] unsigned char 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  level           1    5[COMRAM] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, status,0, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3042 ;;      Params:         1       0       0       0       0       0       0
  3043 ;;      Locals:         1       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0
  3045 ;;      Totals:         2       0       0       0       0       0       0
  3046 ;;Total ram usage:        2 bytes
  3047 ;; Hardware stack levels used: 1
  3048 ;; Hardware stack levels required when called: 2
  3049 ;; This function calls:
  3050 ;;		_lcd_cmd
  3051 ;; This function is called by:
  3052 ;;		_lcd_write
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text17
  3057   00162C                     __ptext17:
  3058                           	callstack 0
  3059   00162C                     _lcd_send_byte:
  3060                           	callstack 27
  3061                           
  3062                           ;incstack = 0
  3063                           ;lcd_send_byte@level stored from wreg
  3064   00162C  6E06               	movwf	lcd_send_byte@level^0,c
  3065   00162E                     
  3066                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  3067   00162E  B006               	btfsc	lcd_send_byte@level^0,0,c
  3068   001630  D002               	bra	u1155
  3069   001632  9084               	bcf	132,0,c	;volatile
  3070   001634  D001               	bra	u1156
  3071   001636                     u1155:
  3072   001636  8084               	bsf	132,0,c	;volatile
  3073   001638                     u1156:
  3074   001638                     
  3075                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3076   001638  0E42               	movlw	66
  3077   00163A                     u1277:
  3078   00163A  2EE8               	decfsz	wreg,f,c
  3079   00163C  D7FE               	bra	u1277
  3080   00163E  D000               	nop2	
  3081   001640                     
  3082                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  3083   001640  9484               	bcf	132,2,c	;volatile
  3084   001642                     
  3085                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  3086   001642  5005               	movf	lcd_send_byte@data^0,w,c
  3087   001644  ECDF  F007         	call	_lcd_cmd
  3088   001648  0012               	return		;funcret
  3089   00164A                     __end_of_lcd_send_byte:
  3090                           	callstack 0
  3091                           
  3092 ;; *************** function _lcd_init *****************
  3093 ;; Defined at:
  3094 ;;		line 3 in file "LCD4b_EXSTO.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;  i               1    5[COMRAM] unsigned char 
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3108 ;;      Params:         0       0       0       0       0       0       0
  3109 ;;      Locals:         1       0       0       0       0       0       0
  3110 ;;      Temps:          1       0       0       0       0       0       0
  3111 ;;      Totals:         2       0       0       0       0       0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used: 1
  3114 ;; Hardware stack levels required when called: 2
  3115 ;; This function calls:
  3116 ;;		_lcd_cmd
  3117 ;; This function is called by:
  3118 ;;		_main
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text18
  3123   001394                     __ptext18:
  3124                           	callstack 0
  3125   001394                     _lcd_init:
  3126                           	callstack 28
  3127   001394                     
  3128                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  3129   001394  0E00               	movlw	0
  3130   001396  6E95               	movwf	149,c	;volatile
  3131   001398                     
  3132                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  3133   001398  9496               	bcf	150,2,c	;volatile
  3134   00139A                     
  3135                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  3136   00139A  9296               	bcf	150,1,c	;volatile
  3137   00139C                     
  3138                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  3139   00139C  9096               	bcf	150,0,c	;volatile
  3140                           
  3141                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  3142   00139E  0E00               	movlw	0
  3143   0013A0  6E83               	movwf	131,c	;volatile
  3144   0013A2                     
  3145                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  3146   0013A2  9084               	bcf	132,0,c	;volatile
  3147   0013A4                     
  3148                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  3149   0013A4  9284               	bcf	132,1,c	;volatile
  3150   0013A6                     
  3151                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  3152   0013A6  9484               	bcf	132,2,c	;volatile
  3153   0013A8                     
  3154                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3155   0013A8  0E27               	movlw	39
  3156   0013AA  6E05               	movwf	??_lcd_init^0,c
  3157   0013AC  0EF5               	movlw	245
  3158   0013AE                     u1287:
  3159   0013AE  2EE8               	decfsz	wreg,f,c
  3160   0013B0  D7FE               	bra	u1287
  3161   0013B2  2E05               	decfsz	??_lcd_init^0,f,c
  3162   0013B4  D7FC               	bra	u1287
  3163   0013B6  F000               	nop	
  3164   0013B8                     
  3165                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  3166   0013B8  0E00               	movlw	0
  3167   0013BA  6E06               	movwf	lcd_init@i^0,c
  3168   0013BC                     l1763:
  3169                           
  3170                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  3171   0013BC  0E30               	movlw	48
  3172   0013BE  ECDF  F007         	call	_lcd_cmd
  3173   0013C2                     
  3174                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3175   0013C2  0E0D               	movlw	13
  3176   0013C4  6E05               	movwf	??_lcd_init^0,c
  3177   0013C6  0EFC               	movlw	252
  3178   0013C8                     u1297:
  3179   0013C8  2EE8               	decfsz	wreg,f,c
  3180   0013CA  D7FE               	bra	u1297
  3181   0013CC  2E05               	decfsz	??_lcd_init^0,f,c
  3182   0013CE  D7FC               	bra	u1297
  3183   0013D0                     
  3184                           ;LCD4b_EXSTO.c: 22:     }
  3185   0013D0  2A06               	incf	lcd_init@i^0,f,c
  3186   0013D2  0E02               	movlw	2
  3187   0013D4  6406               	cpfsgt	lcd_init@i^0,c
  3188   0013D6  EFEF  F009         	goto	u1171
  3189   0013DA  EFF1  F009         	goto	u1170
  3190   0013DE                     u1171:
  3191   0013DE  EFDE  F009         	goto	l1763
  3192   0013E2                     u1170:
  3193   0013E2                     
  3194                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  3195   0013E2  0E02               	movlw	2
  3196   0013E4  ECDF  F007         	call	_lcd_cmd
  3197   0013E8                     
  3198                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3199   0013E8  0E1A               	movlw	26
  3200   0013EA                     u1307:
  3201   0013EA  2EE8               	decfsz	wreg,f,c
  3202   0013EC  D7FE               	bra	u1307
  3203   0013EE  D000               	nop2	
  3204   0013F0                     
  3205                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  3206   0013F0  0E28               	movlw	40
  3207   0013F2  ECDF  F007         	call	_lcd_cmd
  3208                           
  3209                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3210   0013F6  0E1A               	movlw	26
  3211   0013F8                     u1317:
  3212   0013F8  2EE8               	decfsz	wreg,f,c
  3213   0013FA  D7FE               	bra	u1317
  3214   0013FC  D000               	nop2	
  3215   0013FE                     
  3216                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  3217   0013FE  0E01               	movlw	1
  3218   001400  ECDF  F007         	call	_lcd_cmd
  3219   001404                     
  3220                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3221   001404  0E06               	movlw	6
  3222   001406  6E05               	movwf	??_lcd_init^0,c
  3223   001408  0E30               	movlw	48
  3224   00140A                     u1327:
  3225   00140A  2EE8               	decfsz	wreg,f,c
  3226   00140C  D7FE               	bra	u1327
  3227   00140E  2E05               	decfsz	??_lcd_init^0,f,c
  3228   001410  D7FC               	bra	u1327
  3229   001412  D000               	nop2	
  3230                           
  3231                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  3232   001414  0E0C               	movlw	12
  3233   001416  ECDF  F007         	call	_lcd_cmd
  3234   00141A                     
  3235                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3236   00141A  0E1A               	movlw	26
  3237   00141C                     u1337:
  3238   00141C  2EE8               	decfsz	wreg,f,c
  3239   00141E  D7FE               	bra	u1337
  3240   001420  D000               	nop2	
  3241   001422                     
  3242                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  3243   001422  0E06               	movlw	6
  3244   001424  ECDF  F007         	call	_lcd_cmd
  3245                           
  3246                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3247   001428  0E1A               	movlw	26
  3248   00142A                     u1347:
  3249   00142A  2EE8               	decfsz	wreg,f,c
  3250   00142C  D7FE               	bra	u1347
  3251   00142E  D000               	nop2	
  3252   001430  0012               	return		;funcret
  3253   001432                     __end_of_lcd_init:
  3254                           	callstack 0
  3255                           
  3256 ;; *************** function _lcd_cmd *****************
  3257 ;; Defined at:
  3258 ;;		line 42 in file "LCD4b_EXSTO.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  cmd             1    wreg     unsigned char 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  cmd             1    3[COMRAM] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      void 
  3265 ;; Registers used:
  3266 ;;		wreg, status,2, status,0, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3272 ;;      Params:         0       0       0       0       0       0       0
  3273 ;;      Locals:         1       0       0       0       0       0       0
  3274 ;;      Temps:          1       0       0       0       0       0       0
  3275 ;;      Totals:         2       0       0       0       0       0       0
  3276 ;;Total ram usage:        2 bytes
  3277 ;; Hardware stack levels used: 1
  3278 ;; Hardware stack levels required when called: 1
  3279 ;; This function calls:
  3280 ;;		_set_bit
  3281 ;; This function is called by:
  3282 ;;		_lcd_init
  3283 ;;		_lcd_send_byte
  3284 ;;		_lcd_clear
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           	psect	text19
  3289   000FBE                     __ptext19:
  3290                           	callstack 0
  3291   000FBE                     _lcd_cmd:
  3292                           	callstack 27
  3293                           
  3294                           ;incstack = 0
  3295                           ;lcd_cmd@cmd stored from wreg
  3296   000FBE  6E04               	movwf	lcd_cmd@cmd^0,c
  3297   000FC0                     
  3298                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  3299   000FC0  0E10               	movlw	16
  3300   000FC2  6E01               	movwf	set_bit@comp^0,c
  3301   000FC4  5004               	movf	lcd_cmd@cmd^0,w,c
  3302   000FC6  EC06  F00B         	call	_set_bit
  3303   000FCA  6E03               	movwf	??_lcd_cmd^0,c
  3304   000FCC  3A03               	swapf	??_lcd_cmd^0,f,c
  3305   000FCE  5083               	movf	131,w,c	;volatile
  3306   000FD0  1803               	xorwf	??_lcd_cmd^0,w,c
  3307   000FD2  0BEF               	andlw	-17
  3308   000FD4  1803               	xorwf	??_lcd_cmd^0,w,c
  3309   000FD6  6E83               	movwf	131,c	;volatile
  3310                           
  3311                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3312   000FD8  0E20               	movlw	32
  3313   000FDA  6E01               	movwf	set_bit@comp^0,c
  3314   000FDC  5004               	movf	lcd_cmd@cmd^0,w,c
  3315   000FDE  EC06  F00B         	call	_set_bit
  3316   000FE2  6E03               	movwf	??_lcd_cmd^0,c
  3317   000FE4  3A03               	swapf	??_lcd_cmd^0,f,c
  3318   000FE6  4603               	rlncf	??_lcd_cmd^0,f,c
  3319   000FE8  5083               	movf	131,w,c	;volatile
  3320   000FEA  1803               	xorwf	??_lcd_cmd^0,w,c
  3321   000FEC  0BDF               	andlw	-33
  3322   000FEE  1803               	xorwf	??_lcd_cmd^0,w,c
  3323   000FF0  6E83               	movwf	131,c	;volatile
  3324                           
  3325                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3326   000FF2  0E40               	movlw	64
  3327   000FF4  6E01               	movwf	set_bit@comp^0,c
  3328   000FF6  5004               	movf	lcd_cmd@cmd^0,w,c
  3329   000FF8  EC06  F00B         	call	_set_bit
  3330   000FFC  6E03               	movwf	??_lcd_cmd^0,c
  3331   000FFE  3A03               	swapf	??_lcd_cmd^0,f,c
  3332   001000  4603               	rlncf	??_lcd_cmd^0,f,c
  3333   001002  4603               	rlncf	??_lcd_cmd^0,f,c
  3334   001004  5083               	movf	131,w,c	;volatile
  3335   001006  1803               	xorwf	??_lcd_cmd^0,w,c
  3336   001008  0BBF               	andlw	-65
  3337   00100A  1803               	xorwf	??_lcd_cmd^0,w,c
  3338   00100C  6E83               	movwf	131,c	;volatile
  3339                           
  3340                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3341   00100E  0E80               	movlw	128
  3342   001010  6E01               	movwf	set_bit@comp^0,c
  3343   001012  5004               	movf	lcd_cmd@cmd^0,w,c
  3344   001014  EC06  F00B         	call	_set_bit
  3345   001018  6E03               	movwf	??_lcd_cmd^0,c
  3346   00101A  3203               	rrcf	??_lcd_cmd^0,f,c
  3347   00101C  3203               	rrcf	??_lcd_cmd^0,f,c
  3348   00101E  5083               	movf	131,w,c	;volatile
  3349   001020  1803               	xorwf	??_lcd_cmd^0,w,c
  3350   001022  0B7F               	andlw	-129
  3351   001024  1803               	xorwf	??_lcd_cmd^0,w,c
  3352   001026  6E83               	movwf	131,c	;volatile
  3353   001028                     
  3354                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  3355   001028  8484               	bsf	132,2,c	;volatile
  3356   00102A                     
  3357                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  3358   00102A  9484               	bcf	132,2,c	;volatile
  3359   00102C                     
  3360                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3361   00102C  0E42               	movlw	66
  3362   00102E                     u1357:
  3363   00102E  2EE8               	decfsz	wreg,f,c
  3364   001030  D7FE               	bra	u1357
  3365   001032  D000               	nop2	
  3366   001034                     
  3367                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3368   001034  0E01               	movlw	1
  3369   001036  6E01               	movwf	set_bit@comp^0,c
  3370   001038  5004               	movf	lcd_cmd@cmd^0,w,c
  3371   00103A  EC06  F00B         	call	_set_bit
  3372   00103E  6E03               	movwf	??_lcd_cmd^0,c
  3373   001040  3A03               	swapf	??_lcd_cmd^0,f,c
  3374   001042  5083               	movf	131,w,c	;volatile
  3375   001044  1803               	xorwf	??_lcd_cmd^0,w,c
  3376   001046  0BEF               	andlw	-17
  3377   001048  1803               	xorwf	??_lcd_cmd^0,w,c
  3378   00104A  6E83               	movwf	131,c	;volatile
  3379   00104C                     
  3380                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3381   00104C  0E02               	movlw	2
  3382   00104E  6E01               	movwf	set_bit@comp^0,c
  3383   001050  5004               	movf	lcd_cmd@cmd^0,w,c
  3384   001052  EC06  F00B         	call	_set_bit
  3385   001056  6E03               	movwf	??_lcd_cmd^0,c
  3386   001058  3A03               	swapf	??_lcd_cmd^0,f,c
  3387   00105A  4603               	rlncf	??_lcd_cmd^0,f,c
  3388   00105C  5083               	movf	131,w,c	;volatile
  3389   00105E  1803               	xorwf	??_lcd_cmd^0,w,c
  3390   001060  0BDF               	andlw	-33
  3391   001062  1803               	xorwf	??_lcd_cmd^0,w,c
  3392   001064  6E83               	movwf	131,c	;volatile
  3393   001066                     
  3394                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3395   001066  0E04               	movlw	4
  3396   001068  6E01               	movwf	set_bit@comp^0,c
  3397   00106A  5004               	movf	lcd_cmd@cmd^0,w,c
  3398   00106C  EC06  F00B         	call	_set_bit
  3399   001070  6E03               	movwf	??_lcd_cmd^0,c
  3400   001072  3A03               	swapf	??_lcd_cmd^0,f,c
  3401   001074  4603               	rlncf	??_lcd_cmd^0,f,c
  3402   001076  4603               	rlncf	??_lcd_cmd^0,f,c
  3403   001078  5083               	movf	131,w,c	;volatile
  3404   00107A  1803               	xorwf	??_lcd_cmd^0,w,c
  3405   00107C  0BBF               	andlw	-65
  3406   00107E  1803               	xorwf	??_lcd_cmd^0,w,c
  3407   001080  6E83               	movwf	131,c	;volatile
  3408   001082                     
  3409                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3410   001082  0E08               	movlw	8
  3411   001084  6E01               	movwf	set_bit@comp^0,c
  3412   001086  5004               	movf	lcd_cmd@cmd^0,w,c
  3413   001088  EC06  F00B         	call	_set_bit
  3414   00108C  6E03               	movwf	??_lcd_cmd^0,c
  3415   00108E  3203               	rrcf	??_lcd_cmd^0,f,c
  3416   001090  3203               	rrcf	??_lcd_cmd^0,f,c
  3417   001092  5083               	movf	131,w,c	;volatile
  3418   001094  1803               	xorwf	??_lcd_cmd^0,w,c
  3419   001096  0B7F               	andlw	-129
  3420   001098  1803               	xorwf	??_lcd_cmd^0,w,c
  3421   00109A  6E83               	movwf	131,c	;volatile
  3422   00109C                     
  3423                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  3424   00109C  8484               	bsf	132,2,c	;volatile
  3425   00109E                     
  3426                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  3427   00109E  9484               	bcf	132,2,c	;volatile
  3428   0010A0  0012               	return		;funcret
  3429   0010A2                     __end_of_lcd_cmd:
  3430                           	callstack 0
  3431                           
  3432 ;; *************** function _set_bit *****************
  3433 ;; Defined at:
  3434 ;;		line 36 in file "LCD4b_EXSTO.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;  cmd             1    wreg     unsigned char 
  3437 ;;  comp            1    0[COMRAM] unsigned char 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  cmd             1    1[COMRAM] unsigned char 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      unsigned char 
  3442 ;; Registers used:
  3443 ;;		wreg, status,2, status,0
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3449 ;;      Params:         1       0       0       0       0       0       0
  3450 ;;      Locals:         1       0       0       0       0       0       0
  3451 ;;      Temps:          0       0       0       0       0       0       0
  3452 ;;      Totals:         2       0       0       0       0       0       0
  3453 ;;Total ram usage:        2 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_lcd_cmd
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461                           
  3462                           	psect	text20
  3463   00160C                     __ptext20:
  3464                           	callstack 0
  3465   00160C                     _set_bit:
  3466                           	callstack 27
  3467                           
  3468                           ;incstack = 0
  3469                           ;set_bit@cmd stored from wreg
  3470   00160C  6E02               	movwf	set_bit@cmd^0,c
  3471   00160E                     
  3472                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  3473   00160E  5002               	movf	set_bit@cmd^0,w,c
  3474   001610  1401               	andwf	set_bit@comp^0,w,c
  3475   001612  0900               	iorlw	0
  3476   001614  B4D8               	btfsc	status,2,c
  3477   001616  EF0F  F00B         	goto	u901
  3478   00161A  EF11  F00B         	goto	u900
  3479   00161E                     u901:
  3480   00161E  EF14  F00B         	goto	l1539
  3481   001622                     u900:
  3482   001622  0E01               	movlw	1
  3483   001624  EF15  F00B         	goto	l62
  3484   001628                     l1539:
  3485   001628  0E00               	movlw	0
  3486   00162A                     l62:
  3487   00162A  0012               	return		;funcret
  3488   00162C                     __end_of_set_bit:
  3489                           	callstack 0
  3490                           
  3491 ;; *************** function _config_IO *****************
  3492 ;; Defined at:
  3493 ;;		line 77 in file "Main_counter.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      void 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3507 ;;      Params:         0       0       0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0
  3510 ;;      Totals:         0       0       0       0       0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_main
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text21
  3521   00164A                     __ptext21:
  3522                           	callstack 0
  3523   00164A                     _config_IO:
  3524                           	callstack 30
  3525   00164A                     
  3526                           ;Main_counter.c: 79:     TRISB = 0X01;
  3527   00164A  0E01               	movlw	1
  3528   00164C  6E93               	movwf	147,c	;volatile
  3529                           
  3530                           ;Main_counter.c: 80:     ADCON1 = 0X0F;
  3531   00164E  0E0F               	movlw	15
  3532   001650  6EC1               	movwf	193,c	;volatile
  3533   001652  0012               	return		;funcret
  3534   001654                     __end_of_config_IO:
  3535                           	callstack 0
  3536                           
  3537 ;; *************** function _config_FOSC *****************
  3538 ;; Defined at:
  3539 ;;		line 72 in file "Main_counter.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;		None
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;		None
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      void 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3553 ;;      Params:         0       0       0       0       0       0       0
  3554 ;;      Locals:         0       0       0       0       0       0       0
  3555 ;;      Temps:          0       0       0       0       0       0       0
  3556 ;;      Totals:         0       0       0       0       0       0       0
  3557 ;;Total ram usage:        0 bytes
  3558 ;; Hardware stack levels used: 1
  3559 ;; This function calls:
  3560 ;;		Nothing
  3561 ;; This function is called by:
  3562 ;;		_main
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text22
  3567   001654                     __ptext22:
  3568                           	callstack 0
  3569   001654                     _config_FOSC:
  3570                           	callstack 30
  3571   001654                     
  3572                           ;Main_counter.c: 74:     OSCCON = 0X72;
  3573   001654  0E72               	movlw	114
  3574   001656  6ED3               	movwf	211,c	;volatile
  3575                           
  3576                           ;Main_counter.c: 75:     OSCTUNE = 0X00;
  3577   001658  0E00               	movlw	0
  3578   00165A  6E9B               	movwf	155,c	;volatile
  3579   00165C  0012               	return		;funcret
  3580   00165E                     __end_of_config_FOSC:
  3581                           	callstack 0
  3582                           
  3583                           	psect	rparam
  3584   000000                     
  3585                           	psect	idloc
  3586                           
  3587                           ;Config register IDLOC0 @ 0x200000
  3588                           ;	unspecified, using default values
  3589   200000                     	org	2097152
  3590   200000  FF                 	db	255
  3591                           
  3592                           ;Config register IDLOC1 @ 0x200001
  3593                           ;	unspecified, using default values
  3594   200001                     	org	2097153
  3595   200001  FF                 	db	255
  3596                           
  3597                           ;Config register IDLOC2 @ 0x200002
  3598                           ;	unspecified, using default values
  3599   200002                     	org	2097154
  3600   200002  FF                 	db	255
  3601                           
  3602                           ;Config register IDLOC3 @ 0x200003
  3603                           ;	unspecified, using default values
  3604   200003                     	org	2097155
  3605   200003  FF                 	db	255
  3606                           
  3607                           ;Config register IDLOC4 @ 0x200004
  3608                           ;	unspecified, using default values
  3609   200004                     	org	2097156
  3610   200004  FF                 	db	255
  3611                           
  3612                           ;Config register IDLOC5 @ 0x200005
  3613                           ;	unspecified, using default values
  3614   200005                     	org	2097157
  3615   200005  FF                 	db	255
  3616                           
  3617                           ;Config register IDLOC6 @ 0x200006
  3618                           ;	unspecified, using default values
  3619   200006                     	org	2097158
  3620   200006  FF                 	db	255
  3621                           
  3622                           ;Config register IDLOC7 @ 0x200007
  3623                           ;	unspecified, using default values
  3624   200007                     	org	2097159
  3625   200007  FF                 	db	255
  3626                           
  3627                           	psect	config
  3628                           
  3629                           ; Padding undefined space
  3630   300000                     	org	3145728
  3631   300000  FF                 	db	255
  3632                           
  3633                           ;Config register CONFIG1H @ 0x300001
  3634                           ;	Oscillator Selection bits
  3635                           ;	OSC = HS, HS oscillator
  3636                           ;	Fail-Safe Clock Monitor Enable bit
  3637                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3638                           ;	Internal/External Oscillator Switchover bit
  3639                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3640   300001                     	org	3145729
  3641   300001  02                 	db	2
  3642                           
  3643                           ;Config register CONFIG2L @ 0x300002
  3644                           ;	Power-up Timer Enable bit
  3645                           ;	PWRT = OFF, PWRT disabled
  3646                           ;	Brown-out Reset Enable bits
  3647                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3648                           ;	Brown Out Reset Voltage bits
  3649                           ;	BORV = 3, Minimum setting
  3650   300002                     	org	3145730
  3651   300002  19                 	db	25
  3652                           
  3653                           ;Config register CONFIG2H @ 0x300003
  3654                           ;	Watchdog Timer Enable bit
  3655                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3656                           ;	Watchdog Timer Postscale Select bits
  3657                           ;	WDTPS = 32768, 1:32768
  3658   300003                     	org	3145731
  3659   300003  1E                 	db	30
  3660                           
  3661                           ; Padding undefined space
  3662   300004                     	org	3145732
  3663   300004  FF                 	db	255
  3664                           
  3665                           ;Config register CONFIG3H @ 0x300005
  3666                           ;	CCP2 MUX bit
  3667                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3668                           ;	PORTB A/D Enable bit
  3669                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3670                           ;	Low-Power Timer1 Oscillator Enable bit
  3671                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3672                           ;	MCLR Pin Enable bit
  3673                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3674   300005                     	org	3145733
  3675   300005  81                 	db	129
  3676                           
  3677                           ;Config register CONFIG4L @ 0x300006
  3678                           ;	Stack Full/Underflow Reset Enable bit
  3679                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3680                           ;	Single-Supply ICSP Enable bit
  3681                           ;	LVP = OFF, Single-Supply ICSP disabled
  3682                           ;	Extended Instruction Set Enable bit
  3683                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3684                           ;	Background Debugger Enable bit
  3685                           ;	DEBUG = 0x1, unprogrammed default
  3686   300006                     	org	3145734
  3687   300006  81                 	db	129
  3688                           
  3689                           ; Padding undefined space
  3690   300007                     	org	3145735
  3691   300007  FF                 	db	255
  3692                           
  3693                           ;Config register CONFIG5L @ 0x300008
  3694                           ;	Code Protection bit
  3695                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3696                           ;	Code Protection bit
  3697                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3698                           ;	Code Protection bit
  3699                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3700                           ;	Code Protection bit
  3701                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3702   300008                     	org	3145736
  3703   300008  0F                 	db	15
  3704                           
  3705                           ;Config register CONFIG5H @ 0x300009
  3706                           ;	Boot Block Code Protection bit
  3707                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3708                           ;	Data EEPROM Code Protection bit
  3709                           ;	CPD = OFF, Data EEPROM not code-protected
  3710   300009                     	org	3145737
  3711   300009  C0                 	db	192
  3712                           
  3713                           ;Config register CONFIG6L @ 0x30000A
  3714                           ;	Write Protection bit
  3715                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3716                           ;	Write Protection bit
  3717                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3718                           ;	Write Protection bit
  3719                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3720                           ;	Write Protection bit
  3721                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3722   30000A                     	org	3145738
  3723   30000A  0F                 	db	15
  3724                           
  3725                           ;Config register CONFIG6H @ 0x30000B
  3726                           ;	Configuration Register Write Protection bit
  3727                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3728                           ;	Boot Block Write Protection bit
  3729                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3730                           ;	Data EEPROM Write Protection bit
  3731                           ;	WRTD = OFF, Data EEPROM not write-protected
  3732   30000B                     	org	3145739
  3733   30000B  E0                 	db	224
  3734                           
  3735                           ;Config register CONFIG7L @ 0x30000C
  3736                           ;	Table Read Protection bit
  3737                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3738                           ;	Table Read Protection bit
  3739                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3740                           ;	Table Read Protection bit
  3741                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3742                           ;	Table Read Protection bit
  3743                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3744   30000C                     	org	3145740
  3745   30000C  0F                 	db	15
  3746                           
  3747                           ;Config register CONFIG7H @ 0x30000D
  3748                           ;	Boot Block Table Read Protection bit
  3749                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3750   30000D                     	org	3145741
  3751   30000D  40                 	db	64
  3752                           tosu	equ	0xFFF
  3753                           tosh	equ	0xFFE
  3754                           tosl	equ	0xFFD
  3755                           stkptr	equ	0xFFC
  3756                           pclatu	equ	0xFFB
  3757                           pclath	equ	0xFFA
  3758                           pcl	equ	0xFF9
  3759                           tblptru	equ	0xFF8
  3760                           tblptrh	equ	0xFF7
  3761                           tblptrl	equ	0xFF6
  3762                           tablat	equ	0xFF5
  3763                           prodh	equ	0xFF4
  3764                           prodl	equ	0xFF3
  3765                           indf0	equ	0xFEF
  3766                           postinc0	equ	0xFEE
  3767                           postdec0	equ	0xFED
  3768                           preinc0	equ	0xFEC
  3769                           plusw0	equ	0xFEB
  3770                           fsr0h	equ	0xFEA
  3771                           fsr0l	equ	0xFE9
  3772                           wreg	equ	0xFE8
  3773                           indf1	equ	0xFE7
  3774                           postinc1	equ	0xFE6
  3775                           postdec1	equ	0xFE5
  3776                           preinc1	equ	0xFE4
  3777                           plusw1	equ	0xFE3
  3778                           fsr1h	equ	0xFE2
  3779                           fsr1l	equ	0xFE1
  3780                           bsr	equ	0xFE0
  3781                           indf2	equ	0xFDF
  3782                           postinc2	equ	0xFDE
  3783                           postdec2	equ	0xFDD
  3784                           preinc2	equ	0xFDC
  3785                           plusw2	equ	0xFDB
  3786                           fsr2h	equ	0xFDA
  3787                           fsr2l	equ	0xFD9
  3788                           status	equ	0xFD8

Data Sizes:
    Strings     55
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    112     119
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S866$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_2(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> bufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S813$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S813$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[16]), bufferLCD(BANK0[16]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10003
                                            110 COMRAM     2     2      0
                        _config_FOSC
                          _config_IO
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    7340
                                             91 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6987
                                             83 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           24    18      6    6626
                                             62 COMRAM    21    15      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3867
                                             27 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2195
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1083
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1080
                                              6 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     207
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     237
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1789
                                              6 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              4 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              4 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              2 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_FOSC
   _config_IO
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     70      77       1       93.7%
BITBIGSFRh          2C      0       0      16        0.0%
BITBIGSFRlhl        25      0       0      18        0.0%
BITBIGSFRlhh        11      0       0      17        0.0%
BITBIGSFRlllhh       E      0       0      21        0.0%
BITBIGSFRllhh        4      0       0      19        0.0%
BITBIGSFRlllhl       1      0       0      22        0.0%
BITBIGSFRllhl        1      0       0      20        0.0%
BITBIGSFRllll        1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A7      24        0.0%
DATA                 0      0      A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon May 22 14:27:05 2023

                     l25 165C                       l28 1652                       l62 162A  
                     l81 1392                       l66 10A0                       l58 1430  
                     l84 15E8                       l69 1648           ?_lcd_send_byte 0005  
    ___wmul@multiplicand 0003                      l211 0E72                      l198 0D0E  
                    l800 06D4                      l802 06DC                      l803 0722  
                    l902 1248                      l910 1556                      l816 08EC  
                    l913 165E                      l762 147E                      l851 1596  
                    l844 14CC                      l838 0B86                      l848 158E  
                    l792 12D0                      l873 0FB4                      l794 12F2  
                    l876 0FBC                      l789 128E                      l879 15C2  
                    l887 1512                      u701 0BF6                      u710 0C1A  
                    u630 1192                      u711 0C16                      u631 118E  
                    u720 0C44                      u800 0E32                      u640 11A4  
                    u721 0C40                      u801 0E2E                      u641 11A0  
                    u730 0C84                      u650 11CC                      u810 1258  
                    u731 0C80                      u651 11C8                      u811 1254  
                    u900 1622                      u740 0CCE                      u660 1202  
                    u820 127A                      u901 161E                      u741 0CCA  
                    u661 11FE                      u821 1276                      u750 0D22  
                    u670 1556                      u830 12D0                      u910 066A  
                    u751 0D1E                      u671 1552                      u831 12CC  
                    u911 0664                      u680 0B9A                      u760 0D54  
                    u840 12DE                      u920 066C                      u681 0B96  
                    u761 0D50                      u841 12DA                      u690 0BCC  
                    u770 0D92                      u850 1572                      u930 067E  
                    u691 0BC8                      u771 0D8E                      u851 156E  
                    u931 067A                      u860 15BC                      u780 0DBC  
                    u940 06AC                      u861 15B6                      u781 0DB8  
                    u941 06A8                      u870 15BE                      u790 0DEA  
                    u950 06C8                      u791 0DE6                      u951 06C4  
                    u880 14E6                      u960 06F4                      u881 14E2  
                    u961 06F0                      u890 1508                      u970 070A  
                    u891 1504                      u971 0706                      u980 0846  
                    u981 0842                      u990 0864                      u991 0860  
                    _abs 1558                      _pad 124A                      wreg 000FE8  
                   ?_abs 0013                     l1401 1520                     l1403 1532  
                   l1421 0BBE                     l1413 0B88                     l1405 1536  
                   l1501 1286                     l1407 15C4                     l1431 0C1A  
                   l1423 0BCC                     l1415 0B8C                     l1511 1558  
                   l1503 129A                     l1409 15E0                     l1521 14D2  
                   l1441 0C84                     l1433 0C22                     l1425 0BEC  
                   l1417 0B9A                     l1513 1572                     l1505 12AE  
                   l1531 160E                     l1515 1598                     l1523 14E6  
                   l1611 0EA8                     l1603 0E74                     l1451 0CCE  
                   l1443 0CA4                     l1435 0C36                     l1427 0BF0  
                   l1419 0BBA                     l1507 12B2                     l1533 1622  
                   l1525 1508                     l1613 0EDC                     l1605 0E88  
                   l1453 0CEE                     l1445 0CA6                     l1437 0C44  
                   l1429 0BFC                     l1461 0D22                     l1509 12DE  
                   l1701 0B1C                     l1527 150C                     l1519 14CE  
                   l1615 0EE4                     l1447 0CB8                     l1439 0C56  
                   l1471 0D92                     l1463 0D42                     l1391 11AE  
                   l1551 069E                     l1543 063A                     l1641 102C  
                   l1721 1638                     l1625 0F56                     l1617 0EEC  
                   l1609 0E8C                     l1449 0CBE                     l1481 0E0A  
                   l1473 0D9A                     l1465 0D46                     l1457 0D10  
                   l1393 11CC                     l1385 1180                     l1561 06F4  
                   l1553 06AC                     l1545 065A                     l1705 0B4C  
                   l1801 1432                     l1539 1628                     l1651 109C  
                   l1643 1034                     l1635 0FC0                     l1723 1640  
                   l1627 0F86                     l1619 0F20                     l1483 0E1C  
                   l1475 0DAE                     l1467 0D54                     l1459 0D14  
                   l1395 1202                     l1387 1192                     l1571 072A  
                   l1563 06FA                     l1555 06AE                     l1547 066E  
                   l1731 14A8                     l1803 1442                     l1653 109E  
                   l1645 104C                     l1637 1028                     l1741 1394  
                   l1725 1642                     l1629 0F98                     l1477 0DBC  
                   l1485 0E22                     l1469 0D74                     l1389 11A4  
                   l1493 124A                     l1581 07C8                     l1573 0734  
                   l1565 070A                     l1557 06C8                     l1549 067E  
                   l1661 092C                     l1709 0B5E                     l1733 14C4  
                   l1805 144A                     l1821 10C0                     l1813 10A2  
                   l1647 1066                     l1639 102A                     l1751 13A4  
                   l1743 1398                     l1719 162E                     l1487 0E32  
                   l1479 0DEA                     l1399 1514                     l1495 1258  
                   l1591 0898                     l1575 073A                     l1583 082C  
                   l1567 0716                     l1559 06E4                     l1663 0930  
                   l1655 08EE                     l1727 1480                     l1807 1452  
                   l1831 1124                     l1823 10D2                     l1815 10AA  
                   l1737 1654                     l1649 1082                     l1753 13A6  
                   l1745 139A                     l1489 0E52                     l1497 126C  
                   l1585 0846                     l1593 08A6                     l1577 07BC  
                   l1569 071E                     l1681 09FC                     l1673 095C  
                   l1665 093C                     l1657 0912                     l1729 148C  
                   l1809 146E                     l1825 10EE                     l1833 113E  
                   l1817 10AE                     l1739 164A                     l1771 13E2  
                   l1763 13BC                     l1755 13A8                     l1747 139C  
                   l1499 127A                     l1595 08B6                     l1587 0864  
                   l1579 07C2                     l1691 0A46                     l1683 0A0A  
                   l1667 093E                     l1675 0990                     l1659 0920  
                   l1835 1146                     l1827 1100                     l1819 10BC  
                   l1781 141A                     l1773 13E8                     l1765 13C2  
                   l1757 13B8                     l1749 13A2                     l1597 08BC  
                   l1589 087E                     l1693 0A7E                     l1685 0A18  
                   l1677 09A2                     l1669 0950                     l1837 1158  
                   l1829 111C                     l1783 1422                     l1775 13F0  
                   l1767 13D0                     l1791 1322                     l1599 08CC  
                   l1695 0A8E                     l1687 0A38                     l1679 09C6  
                   l1839 116A                     l1777 13FE                     l1769 13D2  
                   l1793 1328                     l1785 12F6                     l1697 0AAA  
                   l1779 1404                     l1795 1336                     l1787 1306  
                   l1699 0AC6                     l1797 135E                     l1789 1310  
                   ?_pad 0011                     l1799 1362                     l1887 0982  
                   l1889 0F0A                     STR_1 0612                     STR_2 0633  
                   STR_3 0623                     STR_4 0601                     u1000 087E  
                   u1001 087A                     u1010 0898                     u1011 0894  
                   u1020 08A6                     u1100 09C6                     u1021 08A2  
                   u1101 09C2                     u1030 08B6                     u1110 0A0A  
                   u1031 08B2                     u1111 0A06                     u1200 1356  
                   u1040 0EA8                     u1120 0A7E                     u1041 0EA4  
                   u1121 0A7A                     u1210 1382                     u1050 0ED8  
                   u1130 0AAA                     u1051 0ED4                     u1131 0AA6  
                   u1220 1392                     u1060 0F86                     u1140 0AC6  
                   u1221 138E                     u1061 0F82                     u1141 0AC2  
                   u1070 0F98                     u1230 10BC                     u1207 134C  
                   u1071 0F94                     u1231 10B8                     u1080 0912  
                   u1160 14C4                     u1240 111C                     u1217 1378  
                   u1081 090E                     u1161 14C0                     u1241 1118  
                   u1170 13E2                     u1090 09A2                     u1307 13EA  
                   u1171 13DE                     u1155 1636                     u1091 099E  
                   u1156 1638                     u1180 1306                     u1317 13F8  
                   u1181 1302                     u1190 1322                     u1327 140A  
                   u1191 131E                     u1337 141C                     u1257 112E  
                   u1347 142A                     u1267 1170                     u1357 102E  
                   u1277 163A                     u1287 13AE                     u1297 13C8  
                   abs@a 0013                     _dbuf 0080                     _atoi 0E74  
                   _main 10A2                     _dtoa 063A                     _prec 0073  
                   pad@i 0018                     pad@p 0015                     fsr1h 000FE2  
                   fsr2h 000FDA                     indf1 000FE7                     indf2 000FDF  
                   fsr1l 000FE1                     pad@w 001A                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           ___param_bank 000000                    ??_abs 0015                    ??_pad 0017  
        __end_of___aodiv 0D10                    ?_atoi 0007                    ?_main 0001  
                  ?_dtoa 001C          __end_of___aomod 0E74             vfpfcnvrt@fmt 0041  
                  _PORTD 000F83                    _TRISB 000F93                    _TRISD 000F95  
        __end_of_lcd_cmd 10A2                    _flags 0077                    _fputc 1180  
                  _fputs 1514          __end_of_isdigit 15C4                    atoi@n 000E  
                  pad@fp 0011                    atoi@s 0007                    _width 0071  
                  _putch 165E                    dtoa@d 001E                    dtoa@i 003C  
                  dtoa@n 0034                    dtoa@p 0030                    dtoa@s 003E  
                  dtoa@w 0032          __end_of_isspace 1514          __end_of_set_bit 162C  
                  tablat 000FF5                    status 000FD8          __end_of_sprintf 1480  
           lcd_write@end 000A             lcd_write@col 0007             lcd_write@lin 000B  
           lcd_write@str 0008          __initialization 15EA             __end_of_atoi 0FBE  
           __end_of_main 1180             __end_of_dtoa 08EE          ??_lcd_send_byte 0006  
                 ??_atoi 0009                   ??_main 006F                   ??_dtoa 0026  
          __activetblptr 000002                   _ADCON1 000FC1                   ?_fputc 0001  
                 ?_fputs 000A                   ?_putch 0001                   _OSCCON 000FD3  
          vfpfcnvrt@done 0050             vfprintf@cfmt 005A         __end_of_lcd_init 1432  
              ??___aodiv 0011                ??___aomod 0011                   ___wmul 15C4  
                 clear_0 15F0                   clear_1 15FC                   isa$std 000001  
                 pad@buf 0013                ??_lcd_cmd 0003                   dtoa@fp 001C  
                 fputc@c 0001                   fputs@c 000E                   fputs@i 000F  
                 fputs@s 000A                ??_isdigit 0003             __mediumconst 0000  
              ??_isspace 0003                ??_set_bit 0002                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 14CE                ??_sprintf 0062               __accesstop 0080  
__end_of__initialization 1602            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 124A            __end_of_fputs 1558            __end_of_putch 1660  
                ??_fputc 0005                  ??_fputs 000E                  ??_putch 0001  
             __pbssBANK0 0080                  ?___wmul 0001       lcd_send_byte@level 0006  
                _OSCTUNE 000F9B                ?_lcd_init 0001                  __Hparam 0000  
                __Lparam 0000        __end_of_config_IO 1654                  ___aodiv 0B88  
                ___aomod 0D10        __end_of_lcd_write 1394                ?_vfprintf 0054  
            set_bit@comp 0001             __psmallconst 0600                  __pcinit 15EA  
                __ramtop 0600                  __ptext0 10A2                  __ptext1 1432  
                __ptext2 1480                  __ptext3 08EE                  __ptext4 063A  
                __ptext5 124A                  __ptext6 1514                  __ptext7 1180  
                __ptext8 165E                  __ptext9 1558                  _lcd_cmd 0FBE  
                _counter 0075                  _isdigit 1598                  _isspace 14CE  
                _set_bit 160C                  atoi@neg 000C                  _sprintf 1432  
             ??_lcd_init 0005     end_of_initialization 1602                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 0B88  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE         vfpfcnvrt@convarg 0048               ??_vfprintf 005A  
  __end_of_lcd_send_byte 164A                _PORTBbits 000F81                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISEbits 000F96               lcd_cmd@cmd 0004  
          ??_config_FOSC 0001              vfpfcnvrt@ap 0043              vfpfcnvrt@cp 0052  
            vfpfcnvrt@fp 003F           __end_of___wmul 15EA      start_initialization 15EA  
            __end_of_abs 1598              __end_of_pad 12F4              vfprintf@fmt 0056  
    __end_of_config_FOSC 165E                 ??___wmul 0005              __pbssCOMRAM 0071  
       ___aodiv@dividend 0001                 ?___aodiv 0001                 ?___aomod 0001  
       ___aodiv@quotient 0013                _bufferLCD 00A0                _config_IO 164A  
      lcd_send_byte@data 0005                 ?_lcd_cmd 0001                _lcd_write 12F4  
            __smallconst 0600                 ?_isdigit 0001                 ?_isspace 0001  
               ?_set_bit 0001               set_bit@cmd 0002                 ?_sprintf 005C  
         ___wmul@product 0005              _config_FOSC 1654                _vfpfcnvrt 08EE  
             ?_config_IO 0001               ?_lcd_write 0007        ___wmul@multiplier 0001  
              lcd_init@i 0006                 __Hrparam 0000               vfprintf@ap 0058  
               __Lrparam 0000               vfprintf@fp 0054               ?_vfpfcnvrt 003F  
        ___aodiv@divisor 0009          ___aodiv@counter 0011               sprintf@fmt 005E  
               _dtoa$904 002E                 __ptext10 0D10                 __ptext11 0B88  
               __ptext20 160C                 __ptext12 0E74                 __ptext21 164A  
               __ptext13 14CE                 __ptext22 1654                 __ptext14 1598  
               __ptext15 15C4                 __ptext16 12F4                 __ptext17 162C  
               __ptext18 1394                 __ptext19 0FBE                 _lcd_init 1394  
               isa$xinst 000000                 _vfprintf 1480              ??_config_IO 0001  
            _isspace$953 0005              ??_lcd_write 000A         ___aomod@dividend 0001  
               isdigit@c 0001                sprintf@ap 0062                 isspace@c 0001  
        ___aomod@divisor 0009              ??_vfpfcnvrt 0045          ___aomod@counter 0011  
          _lcd_send_byte 162C                 sprintf@f 0064                 sprintf@s 005C  
           ___aodiv@sign 0012             ?_config_FOSC 0001             ___aomod@sign 0012  
